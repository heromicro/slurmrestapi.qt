/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition() {
    this->initializeModel();
}

OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::~OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition() {}

void OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_association_isSet = false;
    m_association_isValid = false;

    m_clusters_isSet = false;
    m_clusters_isValid = false;
}

void OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_association_isValid = ::OpenAPI::fromJsonValue(m_association, json[QString("association")]);
    m_association_isSet = !json[QString("association")].isNull() && m_association_isValid;

    m_clusters_isValid = ::OpenAPI::fromJsonValue(m_clusters, json[QString("clusters")]);
    m_clusters_isSet = !json[QString("clusters")].isNull() && m_clusters_isValid;
}

QString OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.size() > 0) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_association.isSet()) {
        obj.insert(QString("association"), ::OpenAPI::toJsonValue(m_association));
    }
    if (m_clusters.size() > 0) {
        obj.insert(QString("clusters"), ::OpenAPI::toJsonValue(m_clusters));
    }
    return obj;
}

QList<QString> OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::getAccounts() const {
    return m_accounts;
}
void OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::setAccounts(const QList<QString> &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::is_accounts_Valid() const{
    return m_accounts_isValid;
}

OAIV0_0_41_openapi_users_add_cond_resp_association_condition_association OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::getAssociation() const {
    return m_association;
}
void OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::setAssociation(const OAIV0_0_41_openapi_users_add_cond_resp_association_condition_association &association) {
    m_association = association;
    m_association_isSet = true;
}

bool OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::is_association_Set() const{
    return m_association_isSet;
}

bool OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::is_association_Valid() const{
    return m_association_isValid;
}

QList<QString> OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::getClusters() const {
    return m_clusters;
}
void OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::setClusters(const QList<QString> &clusters) {
    m_clusters = clusters;
    m_clusters_isSet = true;
}

bool OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::is_clusters_Set() const{
    return m_clusters_isSet;
}

bool OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::is_clusters_Valid() const{
    return m_clusters_isValid;
}

bool OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clusters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_41_openapi_accounts_add_cond_resp_association_condition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accounts_isValid && true;
}

} // namespace OpenAPI
