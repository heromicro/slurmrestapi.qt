/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_39_node.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_39_node::OAIV0_0_39_node(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_39_node::OAIV0_0_39_node() {
    this->initializeModel();
}

OAIV0_0_39_node::~OAIV0_0_39_node() {}

void OAIV0_0_39_node::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_burstbuffer_network_address_isSet = false;
    m_burstbuffer_network_address_isValid = false;

    m_boards_isSet = false;
    m_boards_isValid = false;

    m_boot_time_isSet = false;
    m_boot_time_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_cores_isSet = false;
    m_cores_isValid = false;

    m_specialized_cores_isSet = false;
    m_specialized_cores_isValid = false;

    m_cpu_binding_isSet = false;
    m_cpu_binding_isValid = false;

    m_cpu_load_isSet = false;
    m_cpu_load_isValid = false;

    m_free_mem_isSet = false;
    m_free_mem_isValid = false;

    m_cpus_isSet = false;
    m_cpus_isValid = false;

    m_effective_cpus_isSet = false;
    m_effective_cpus_isValid = false;

    m_specialized_cpus_isSet = false;
    m_specialized_cpus_isValid = false;

    m_energy_isSet = false;
    m_energy_isValid = false;

    m_external_sensors_isSet = false;
    m_external_sensors_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_power_isSet = false;
    m_power_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_active_features_isSet = false;
    m_active_features_isValid = false;

    m_gres_isSet = false;
    m_gres_isValid = false;

    m_gres_drained_isSet = false;
    m_gres_drained_isValid = false;

    m_gres_used_isSet = false;
    m_gres_used_isValid = false;

    m_last_busy_isSet = false;
    m_last_busy_isValid = false;

    m_mcs_label_isSet = false;
    m_mcs_label_isValid = false;

    m_specialized_memory_isSet = false;
    m_specialized_memory_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_state_after_reboot_isSet = false;
    m_next_state_after_reboot_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_partitions_isSet = false;
    m_partitions_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_real_memory_isSet = false;
    m_real_memory_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_reason_changed_at_isSet = false;
    m_reason_changed_at_isValid = false;

    m_reason_set_by_user_isSet = false;
    m_reason_set_by_user_isValid = false;

    m_resume_after_isSet = false;
    m_resume_after_isValid = false;

    m_reservation_isSet = false;
    m_reservation_isValid = false;

    m_alloc_memory_isSet = false;
    m_alloc_memory_isValid = false;

    m_alloc_cpus_isSet = false;
    m_alloc_cpus_isValid = false;

    m_alloc_idle_cpus_isSet = false;
    m_alloc_idle_cpus_isValid = false;

    m_tres_used_isSet = false;
    m_tres_used_isValid = false;

    m_tres_weighted_isSet = false;
    m_tres_weighted_isValid = false;

    m_slurmd_start_time_isSet = false;
    m_slurmd_start_time_isValid = false;

    m_sockets_isSet = false;
    m_sockets_isValid = false;

    m_threads_isSet = false;
    m_threads_isValid = false;

    m_temporary_disk_isSet = false;
    m_temporary_disk_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_tres_isSet = false;
    m_tres_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIV0_0_39_node::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_39_node::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_burstbuffer_network_address_isValid = ::OpenAPI::fromJsonValue(m_burstbuffer_network_address, json[QString("burstbuffer_network_address")]);
    m_burstbuffer_network_address_isSet = !json[QString("burstbuffer_network_address")].isNull() && m_burstbuffer_network_address_isValid;

    m_boards_isValid = ::OpenAPI::fromJsonValue(m_boards, json[QString("boards")]);
    m_boards_isSet = !json[QString("boards")].isNull() && m_boards_isValid;

    m_boot_time_isValid = ::OpenAPI::fromJsonValue(m_boot_time, json[QString("boot_time")]);
    m_boot_time_isSet = !json[QString("boot_time")].isNull() && m_boot_time_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("cluster_name")]);
    m_cluster_name_isSet = !json[QString("cluster_name")].isNull() && m_cluster_name_isValid;

    m_cores_isValid = ::OpenAPI::fromJsonValue(m_cores, json[QString("cores")]);
    m_cores_isSet = !json[QString("cores")].isNull() && m_cores_isValid;

    m_specialized_cores_isValid = ::OpenAPI::fromJsonValue(m_specialized_cores, json[QString("specialized_cores")]);
    m_specialized_cores_isSet = !json[QString("specialized_cores")].isNull() && m_specialized_cores_isValid;

    m_cpu_binding_isValid = ::OpenAPI::fromJsonValue(m_cpu_binding, json[QString("cpu_binding")]);
    m_cpu_binding_isSet = !json[QString("cpu_binding")].isNull() && m_cpu_binding_isValid;

    m_cpu_load_isValid = ::OpenAPI::fromJsonValue(m_cpu_load, json[QString("cpu_load")]);
    m_cpu_load_isSet = !json[QString("cpu_load")].isNull() && m_cpu_load_isValid;

    m_free_mem_isValid = ::OpenAPI::fromJsonValue(m_free_mem, json[QString("free_mem")]);
    m_free_mem_isSet = !json[QString("free_mem")].isNull() && m_free_mem_isValid;

    m_cpus_isValid = ::OpenAPI::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;

    m_effective_cpus_isValid = ::OpenAPI::fromJsonValue(m_effective_cpus, json[QString("effective_cpus")]);
    m_effective_cpus_isSet = !json[QString("effective_cpus")].isNull() && m_effective_cpus_isValid;

    m_specialized_cpus_isValid = ::OpenAPI::fromJsonValue(m_specialized_cpus, json[QString("specialized_cpus")]);
    m_specialized_cpus_isSet = !json[QString("specialized_cpus")].isNull() && m_specialized_cpus_isValid;

    m_energy_isValid = ::OpenAPI::fromJsonValue(m_energy, json[QString("energy")]);
    m_energy_isSet = !json[QString("energy")].isNull() && m_energy_isValid;

    m_external_sensors_isValid = ::OpenAPI::fromJsonValue(m_external_sensors, json[QString("external_sensors")]);
    m_external_sensors_isSet = !json[QString("external_sensors")].isNull() && m_external_sensors_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_power_isValid = ::OpenAPI::fromJsonValue(m_power, json[QString("power")]);
    m_power_isSet = !json[QString("power")].isNull() && m_power_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_active_features_isValid = ::OpenAPI::fromJsonValue(m_active_features, json[QString("active_features")]);
    m_active_features_isSet = !json[QString("active_features")].isNull() && m_active_features_isValid;

    m_gres_isValid = ::OpenAPI::fromJsonValue(m_gres, json[QString("gres")]);
    m_gres_isSet = !json[QString("gres")].isNull() && m_gres_isValid;

    m_gres_drained_isValid = ::OpenAPI::fromJsonValue(m_gres_drained, json[QString("gres_drained")]);
    m_gres_drained_isSet = !json[QString("gres_drained")].isNull() && m_gres_drained_isValid;

    m_gres_used_isValid = ::OpenAPI::fromJsonValue(m_gres_used, json[QString("gres_used")]);
    m_gres_used_isSet = !json[QString("gres_used")].isNull() && m_gres_used_isValid;

    m_last_busy_isValid = ::OpenAPI::fromJsonValue(m_last_busy, json[QString("last_busy")]);
    m_last_busy_isSet = !json[QString("last_busy")].isNull() && m_last_busy_isValid;

    m_mcs_label_isValid = ::OpenAPI::fromJsonValue(m_mcs_label, json[QString("mcs_label")]);
    m_mcs_label_isSet = !json[QString("mcs_label")].isNull() && m_mcs_label_isValid;

    m_specialized_memory_isValid = ::OpenAPI::fromJsonValue(m_specialized_memory, json[QString("specialized_memory")]);
    m_specialized_memory_isSet = !json[QString("specialized_memory")].isNull() && m_specialized_memory_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_state_after_reboot_isValid = ::OpenAPI::fromJsonValue(m_next_state_after_reboot, json[QString("next_state_after_reboot")]);
    m_next_state_after_reboot_isSet = !json[QString("next_state_after_reboot")].isNull() && m_next_state_after_reboot_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operating_system")]);
    m_operating_system_isSet = !json[QString("operating_system")].isNull() && m_operating_system_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_partitions_isValid = ::OpenAPI::fromJsonValue(m_partitions, json[QString("partitions")]);
    m_partitions_isSet = !json[QString("partitions")].isNull() && m_partitions_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_real_memory_isValid = ::OpenAPI::fromJsonValue(m_real_memory, json[QString("real_memory")]);
    m_real_memory_isSet = !json[QString("real_memory")].isNull() && m_real_memory_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_reason_changed_at_isValid = ::OpenAPI::fromJsonValue(m_reason_changed_at, json[QString("reason_changed_at")]);
    m_reason_changed_at_isSet = !json[QString("reason_changed_at")].isNull() && m_reason_changed_at_isValid;

    m_reason_set_by_user_isValid = ::OpenAPI::fromJsonValue(m_reason_set_by_user, json[QString("reason_set_by_user")]);
    m_reason_set_by_user_isSet = !json[QString("reason_set_by_user")].isNull() && m_reason_set_by_user_isValid;

    m_resume_after_isValid = ::OpenAPI::fromJsonValue(m_resume_after, json[QString("resume_after")]);
    m_resume_after_isSet = !json[QString("resume_after")].isNull() && m_resume_after_isValid;

    m_reservation_isValid = ::OpenAPI::fromJsonValue(m_reservation, json[QString("reservation")]);
    m_reservation_isSet = !json[QString("reservation")].isNull() && m_reservation_isValid;

    m_alloc_memory_isValid = ::OpenAPI::fromJsonValue(m_alloc_memory, json[QString("alloc_memory")]);
    m_alloc_memory_isSet = !json[QString("alloc_memory")].isNull() && m_alloc_memory_isValid;

    m_alloc_cpus_isValid = ::OpenAPI::fromJsonValue(m_alloc_cpus, json[QString("alloc_cpus")]);
    m_alloc_cpus_isSet = !json[QString("alloc_cpus")].isNull() && m_alloc_cpus_isValid;

    m_alloc_idle_cpus_isValid = ::OpenAPI::fromJsonValue(m_alloc_idle_cpus, json[QString("alloc_idle_cpus")]);
    m_alloc_idle_cpus_isSet = !json[QString("alloc_idle_cpus")].isNull() && m_alloc_idle_cpus_isValid;

    m_tres_used_isValid = ::OpenAPI::fromJsonValue(m_tres_used, json[QString("tres_used")]);
    m_tres_used_isSet = !json[QString("tres_used")].isNull() && m_tres_used_isValid;

    m_tres_weighted_isValid = ::OpenAPI::fromJsonValue(m_tres_weighted, json[QString("tres_weighted")]);
    m_tres_weighted_isSet = !json[QString("tres_weighted")].isNull() && m_tres_weighted_isValid;

    m_slurmd_start_time_isValid = ::OpenAPI::fromJsonValue(m_slurmd_start_time, json[QString("slurmd_start_time")]);
    m_slurmd_start_time_isSet = !json[QString("slurmd_start_time")].isNull() && m_slurmd_start_time_isValid;

    m_sockets_isValid = ::OpenAPI::fromJsonValue(m_sockets, json[QString("sockets")]);
    m_sockets_isSet = !json[QString("sockets")].isNull() && m_sockets_isValid;

    m_threads_isValid = ::OpenAPI::fromJsonValue(m_threads, json[QString("threads")]);
    m_threads_isSet = !json[QString("threads")].isNull() && m_threads_isValid;

    m_temporary_disk_isValid = ::OpenAPI::fromJsonValue(m_temporary_disk, json[QString("temporary_disk")]);
    m_temporary_disk_isSet = !json[QString("temporary_disk")].isNull() && m_temporary_disk_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_tres_isValid = ::OpenAPI::fromJsonValue(m_tres, json[QString("tres")]);
    m_tres_isSet = !json[QString("tres")].isNull() && m_tres_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIV0_0_39_node::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_39_node::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_burstbuffer_network_address_isSet) {
        obj.insert(QString("burstbuffer_network_address"), ::OpenAPI::toJsonValue(m_burstbuffer_network_address));
    }
    if (m_boards_isSet) {
        obj.insert(QString("boards"), ::OpenAPI::toJsonValue(m_boards));
    }
    if (m_boot_time_isSet) {
        obj.insert(QString("boot_time"), ::OpenAPI::toJsonValue(m_boot_time));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("cluster_name"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_cores_isSet) {
        obj.insert(QString("cores"), ::OpenAPI::toJsonValue(m_cores));
    }
    if (m_specialized_cores_isSet) {
        obj.insert(QString("specialized_cores"), ::OpenAPI::toJsonValue(m_specialized_cores));
    }
    if (m_cpu_binding_isSet) {
        obj.insert(QString("cpu_binding"), ::OpenAPI::toJsonValue(m_cpu_binding));
    }
    if (m_cpu_load.isSet()) {
        obj.insert(QString("cpu_load"), ::OpenAPI::toJsonValue(m_cpu_load));
    }
    if (m_free_mem.isSet()) {
        obj.insert(QString("free_mem"), ::OpenAPI::toJsonValue(m_free_mem));
    }
    if (m_cpus_isSet) {
        obj.insert(QString("cpus"), ::OpenAPI::toJsonValue(m_cpus));
    }
    if (m_effective_cpus_isSet) {
        obj.insert(QString("effective_cpus"), ::OpenAPI::toJsonValue(m_effective_cpus));
    }
    if (m_specialized_cpus_isSet) {
        obj.insert(QString("specialized_cpus"), ::OpenAPI::toJsonValue(m_specialized_cpus));
    }
    if (m_energy.isSet()) {
        obj.insert(QString("energy"), ::OpenAPI::toJsonValue(m_energy));
    }
    if (m_external_sensors_isSet) {
        obj.insert(QString("external_sensors"), ::OpenAPI::toJsonValue(m_external_sensors));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_power_isSet) {
        obj.insert(QString("power"), ::OpenAPI::toJsonValue(m_power));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_active_features.size() > 0) {
        obj.insert(QString("active_features"), ::OpenAPI::toJsonValue(m_active_features));
    }
    if (m_gres_isSet) {
        obj.insert(QString("gres"), ::OpenAPI::toJsonValue(m_gres));
    }
    if (m_gres_drained_isSet) {
        obj.insert(QString("gres_drained"), ::OpenAPI::toJsonValue(m_gres_drained));
    }
    if (m_gres_used_isSet) {
        obj.insert(QString("gres_used"), ::OpenAPI::toJsonValue(m_gres_used));
    }
    if (m_last_busy_isSet) {
        obj.insert(QString("last_busy"), ::OpenAPI::toJsonValue(m_last_busy));
    }
    if (m_mcs_label_isSet) {
        obj.insert(QString("mcs_label"), ::OpenAPI::toJsonValue(m_mcs_label));
    }
    if (m_specialized_memory_isSet) {
        obj.insert(QString("specialized_memory"), ::OpenAPI::toJsonValue(m_specialized_memory));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_state_after_reboot.size() > 0) {
        obj.insert(QString("next_state_after_reboot"), ::OpenAPI::toJsonValue(m_next_state_after_reboot));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_state.size() > 0) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("operating_system"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_partitions.size() > 0) {
        obj.insert(QString("partitions"), ::OpenAPI::toJsonValue(m_partitions));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_real_memory_isSet) {
        obj.insert(QString("real_memory"), ::OpenAPI::toJsonValue(m_real_memory));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_reason_changed_at_isSet) {
        obj.insert(QString("reason_changed_at"), ::OpenAPI::toJsonValue(m_reason_changed_at));
    }
    if (m_reason_set_by_user_isSet) {
        obj.insert(QString("reason_set_by_user"), ::OpenAPI::toJsonValue(m_reason_set_by_user));
    }
    if (m_resume_after.isSet()) {
        obj.insert(QString("resume_after"), ::OpenAPI::toJsonValue(m_resume_after));
    }
    if (m_reservation_isSet) {
        obj.insert(QString("reservation"), ::OpenAPI::toJsonValue(m_reservation));
    }
    if (m_alloc_memory_isSet) {
        obj.insert(QString("alloc_memory"), ::OpenAPI::toJsonValue(m_alloc_memory));
    }
    if (m_alloc_cpus_isSet) {
        obj.insert(QString("alloc_cpus"), ::OpenAPI::toJsonValue(m_alloc_cpus));
    }
    if (m_alloc_idle_cpus_isSet) {
        obj.insert(QString("alloc_idle_cpus"), ::OpenAPI::toJsonValue(m_alloc_idle_cpus));
    }
    if (m_tres_used_isSet) {
        obj.insert(QString("tres_used"), ::OpenAPI::toJsonValue(m_tres_used));
    }
    if (m_tres_weighted_isSet) {
        obj.insert(QString("tres_weighted"), ::OpenAPI::toJsonValue(m_tres_weighted));
    }
    if (m_slurmd_start_time_isSet) {
        obj.insert(QString("slurmd_start_time"), ::OpenAPI::toJsonValue(m_slurmd_start_time));
    }
    if (m_sockets_isSet) {
        obj.insert(QString("sockets"), ::OpenAPI::toJsonValue(m_sockets));
    }
    if (m_threads_isSet) {
        obj.insert(QString("threads"), ::OpenAPI::toJsonValue(m_threads));
    }
    if (m_temporary_disk_isSet) {
        obj.insert(QString("temporary_disk"), ::OpenAPI::toJsonValue(m_temporary_disk));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_tres_isSet) {
        obj.insert(QString("tres"), ::OpenAPI::toJsonValue(m_tres));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIV0_0_39_node::getArchitecture() const {
    return m_architecture;
}
void OAIV0_0_39_node::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIV0_0_39_node::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIV0_0_39_node::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIV0_0_39_node::getBurstbufferNetworkAddress() const {
    return m_burstbuffer_network_address;
}
void OAIV0_0_39_node::setBurstbufferNetworkAddress(const QString &burstbuffer_network_address) {
    m_burstbuffer_network_address = burstbuffer_network_address;
    m_burstbuffer_network_address_isSet = true;
}

bool OAIV0_0_39_node::is_burstbuffer_network_address_Set() const{
    return m_burstbuffer_network_address_isSet;
}

bool OAIV0_0_39_node::is_burstbuffer_network_address_Valid() const{
    return m_burstbuffer_network_address_isValid;
}

qint32 OAIV0_0_39_node::getBoards() const {
    return m_boards;
}
void OAIV0_0_39_node::setBoards(const qint32 &boards) {
    m_boards = boards;
    m_boards_isSet = true;
}

bool OAIV0_0_39_node::is_boards_Set() const{
    return m_boards_isSet;
}

bool OAIV0_0_39_node::is_boards_Valid() const{
    return m_boards_isValid;
}

qint64 OAIV0_0_39_node::getBootTime() const {
    return m_boot_time;
}
void OAIV0_0_39_node::setBootTime(const qint64 &boot_time) {
    m_boot_time = boot_time;
    m_boot_time_isSet = true;
}

bool OAIV0_0_39_node::is_boot_time_Set() const{
    return m_boot_time_isSet;
}

bool OAIV0_0_39_node::is_boot_time_Valid() const{
    return m_boot_time_isValid;
}

QString OAIV0_0_39_node::getClusterName() const {
    return m_cluster_name;
}
void OAIV0_0_39_node::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIV0_0_39_node::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIV0_0_39_node::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

qint32 OAIV0_0_39_node::getCores() const {
    return m_cores;
}
void OAIV0_0_39_node::setCores(const qint32 &cores) {
    m_cores = cores;
    m_cores_isSet = true;
}

bool OAIV0_0_39_node::is_cores_Set() const{
    return m_cores_isSet;
}

bool OAIV0_0_39_node::is_cores_Valid() const{
    return m_cores_isValid;
}

qint32 OAIV0_0_39_node::getSpecializedCores() const {
    return m_specialized_cores;
}
void OAIV0_0_39_node::setSpecializedCores(const qint32 &specialized_cores) {
    m_specialized_cores = specialized_cores;
    m_specialized_cores_isSet = true;
}

bool OAIV0_0_39_node::is_specialized_cores_Set() const{
    return m_specialized_cores_isSet;
}

bool OAIV0_0_39_node::is_specialized_cores_Valid() const{
    return m_specialized_cores_isValid;
}

qint32 OAIV0_0_39_node::getCpuBinding() const {
    return m_cpu_binding;
}
void OAIV0_0_39_node::setCpuBinding(const qint32 &cpu_binding) {
    m_cpu_binding = cpu_binding;
    m_cpu_binding_isSet = true;
}

bool OAIV0_0_39_node::is_cpu_binding_Set() const{
    return m_cpu_binding_isSet;
}

bool OAIV0_0_39_node::is_cpu_binding_Valid() const{
    return m_cpu_binding_isValid;
}

OAIV0_0_39_uint32_no_val OAIV0_0_39_node::getCpuLoad() const {
    return m_cpu_load;
}
void OAIV0_0_39_node::setCpuLoad(const OAIV0_0_39_uint32_no_val &cpu_load) {
    m_cpu_load = cpu_load;
    m_cpu_load_isSet = true;
}

bool OAIV0_0_39_node::is_cpu_load_Set() const{
    return m_cpu_load_isSet;
}

bool OAIV0_0_39_node::is_cpu_load_Valid() const{
    return m_cpu_load_isValid;
}

OAIV0_0_39_uint64_no_val OAIV0_0_39_node::getFreeMem() const {
    return m_free_mem;
}
void OAIV0_0_39_node::setFreeMem(const OAIV0_0_39_uint64_no_val &free_mem) {
    m_free_mem = free_mem;
    m_free_mem_isSet = true;
}

bool OAIV0_0_39_node::is_free_mem_Set() const{
    return m_free_mem_isSet;
}

bool OAIV0_0_39_node::is_free_mem_Valid() const{
    return m_free_mem_isValid;
}

qint32 OAIV0_0_39_node::getCpus() const {
    return m_cpus;
}
void OAIV0_0_39_node::setCpus(const qint32 &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAIV0_0_39_node::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAIV0_0_39_node::is_cpus_Valid() const{
    return m_cpus_isValid;
}

qint32 OAIV0_0_39_node::getEffectiveCpus() const {
    return m_effective_cpus;
}
void OAIV0_0_39_node::setEffectiveCpus(const qint32 &effective_cpus) {
    m_effective_cpus = effective_cpus;
    m_effective_cpus_isSet = true;
}

bool OAIV0_0_39_node::is_effective_cpus_Set() const{
    return m_effective_cpus_isSet;
}

bool OAIV0_0_39_node::is_effective_cpus_Valid() const{
    return m_effective_cpus_isValid;
}

QString OAIV0_0_39_node::getSpecializedCpus() const {
    return m_specialized_cpus;
}
void OAIV0_0_39_node::setSpecializedCpus(const QString &specialized_cpus) {
    m_specialized_cpus = specialized_cpus;
    m_specialized_cpus_isSet = true;
}

bool OAIV0_0_39_node::is_specialized_cpus_Set() const{
    return m_specialized_cpus_isSet;
}

bool OAIV0_0_39_node::is_specialized_cpus_Valid() const{
    return m_specialized_cpus_isValid;
}

OAIV0_0_39_acct_gather_energy OAIV0_0_39_node::getEnergy() const {
    return m_energy;
}
void OAIV0_0_39_node::setEnergy(const OAIV0_0_39_acct_gather_energy &energy) {
    m_energy = energy;
    m_energy_isSet = true;
}

bool OAIV0_0_39_node::is_energy_Set() const{
    return m_energy_isSet;
}

bool OAIV0_0_39_node::is_energy_Valid() const{
    return m_energy_isValid;
}

OAIObject OAIV0_0_39_node::getExternalSensors() const {
    return m_external_sensors;
}
void OAIV0_0_39_node::setExternalSensors(const OAIObject &external_sensors) {
    m_external_sensors = external_sensors;
    m_external_sensors_isSet = true;
}

bool OAIV0_0_39_node::is_external_sensors_Set() const{
    return m_external_sensors_isSet;
}

bool OAIV0_0_39_node::is_external_sensors_Valid() const{
    return m_external_sensors_isValid;
}

QString OAIV0_0_39_node::getExtra() const {
    return m_extra;
}
void OAIV0_0_39_node::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIV0_0_39_node::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIV0_0_39_node::is_extra_Valid() const{
    return m_extra_isValid;
}

OAIObject OAIV0_0_39_node::getPower() const {
    return m_power;
}
void OAIV0_0_39_node::setPower(const OAIObject &power) {
    m_power = power;
    m_power_isSet = true;
}

bool OAIV0_0_39_node::is_power_Set() const{
    return m_power_isSet;
}

bool OAIV0_0_39_node::is_power_Valid() const{
    return m_power_isValid;
}

QList<QString> OAIV0_0_39_node::getFeatures() const {
    return m_features;
}
void OAIV0_0_39_node::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIV0_0_39_node::is_features_Set() const{
    return m_features_isSet;
}

bool OAIV0_0_39_node::is_features_Valid() const{
    return m_features_isValid;
}

QList<QString> OAIV0_0_39_node::getActiveFeatures() const {
    return m_active_features;
}
void OAIV0_0_39_node::setActiveFeatures(const QList<QString> &active_features) {
    m_active_features = active_features;
    m_active_features_isSet = true;
}

bool OAIV0_0_39_node::is_active_features_Set() const{
    return m_active_features_isSet;
}

bool OAIV0_0_39_node::is_active_features_Valid() const{
    return m_active_features_isValid;
}

QString OAIV0_0_39_node::getGres() const {
    return m_gres;
}
void OAIV0_0_39_node::setGres(const QString &gres) {
    m_gres = gres;
    m_gres_isSet = true;
}

bool OAIV0_0_39_node::is_gres_Set() const{
    return m_gres_isSet;
}

bool OAIV0_0_39_node::is_gres_Valid() const{
    return m_gres_isValid;
}

QString OAIV0_0_39_node::getGresDrained() const {
    return m_gres_drained;
}
void OAIV0_0_39_node::setGresDrained(const QString &gres_drained) {
    m_gres_drained = gres_drained;
    m_gres_drained_isSet = true;
}

bool OAIV0_0_39_node::is_gres_drained_Set() const{
    return m_gres_drained_isSet;
}

bool OAIV0_0_39_node::is_gres_drained_Valid() const{
    return m_gres_drained_isValid;
}

QString OAIV0_0_39_node::getGresUsed() const {
    return m_gres_used;
}
void OAIV0_0_39_node::setGresUsed(const QString &gres_used) {
    m_gres_used = gres_used;
    m_gres_used_isSet = true;
}

bool OAIV0_0_39_node::is_gres_used_Set() const{
    return m_gres_used_isSet;
}

bool OAIV0_0_39_node::is_gres_used_Valid() const{
    return m_gres_used_isValid;
}

qint64 OAIV0_0_39_node::getLastBusy() const {
    return m_last_busy;
}
void OAIV0_0_39_node::setLastBusy(const qint64 &last_busy) {
    m_last_busy = last_busy;
    m_last_busy_isSet = true;
}

bool OAIV0_0_39_node::is_last_busy_Set() const{
    return m_last_busy_isSet;
}

bool OAIV0_0_39_node::is_last_busy_Valid() const{
    return m_last_busy_isValid;
}

QString OAIV0_0_39_node::getMcsLabel() const {
    return m_mcs_label;
}
void OAIV0_0_39_node::setMcsLabel(const QString &mcs_label) {
    m_mcs_label = mcs_label;
    m_mcs_label_isSet = true;
}

bool OAIV0_0_39_node::is_mcs_label_Set() const{
    return m_mcs_label_isSet;
}

bool OAIV0_0_39_node::is_mcs_label_Valid() const{
    return m_mcs_label_isValid;
}

qint64 OAIV0_0_39_node::getSpecializedMemory() const {
    return m_specialized_memory;
}
void OAIV0_0_39_node::setSpecializedMemory(const qint64 &specialized_memory) {
    m_specialized_memory = specialized_memory;
    m_specialized_memory_isSet = true;
}

bool OAIV0_0_39_node::is_specialized_memory_Set() const{
    return m_specialized_memory_isSet;
}

bool OAIV0_0_39_node::is_specialized_memory_Valid() const{
    return m_specialized_memory_isValid;
}

QString OAIV0_0_39_node::getName() const {
    return m_name;
}
void OAIV0_0_39_node::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV0_0_39_node::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV0_0_39_node::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIV0_0_39_node::getNextStateAfterReboot() const {
    return m_next_state_after_reboot;
}
void OAIV0_0_39_node::setNextStateAfterReboot(const QList<QString> &next_state_after_reboot) {
    m_next_state_after_reboot = next_state_after_reboot;
    m_next_state_after_reboot_isSet = true;
}

bool OAIV0_0_39_node::is_next_state_after_reboot_Set() const{
    return m_next_state_after_reboot_isSet;
}

bool OAIV0_0_39_node::is_next_state_after_reboot_Valid() const{
    return m_next_state_after_reboot_isValid;
}

QString OAIV0_0_39_node::getAddress() const {
    return m_address;
}
void OAIV0_0_39_node::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIV0_0_39_node::is_address_Set() const{
    return m_address_isSet;
}

bool OAIV0_0_39_node::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIV0_0_39_node::getHostname() const {
    return m_hostname;
}
void OAIV0_0_39_node::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIV0_0_39_node::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIV0_0_39_node::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QList<QString> OAIV0_0_39_node::getState() const {
    return m_state;
}
void OAIV0_0_39_node::setState(const QList<QString> &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIV0_0_39_node::is_state_Set() const{
    return m_state_isSet;
}

bool OAIV0_0_39_node::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIV0_0_39_node::getOperatingSystem() const {
    return m_operating_system;
}
void OAIV0_0_39_node::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIV0_0_39_node::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIV0_0_39_node::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

QString OAIV0_0_39_node::getOwner() const {
    return m_owner;
}
void OAIV0_0_39_node::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIV0_0_39_node::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIV0_0_39_node::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<QString> OAIV0_0_39_node::getPartitions() const {
    return m_partitions;
}
void OAIV0_0_39_node::setPartitions(const QList<QString> &partitions) {
    m_partitions = partitions;
    m_partitions_isSet = true;
}

bool OAIV0_0_39_node::is_partitions_Set() const{
    return m_partitions_isSet;
}

bool OAIV0_0_39_node::is_partitions_Valid() const{
    return m_partitions_isValid;
}

qint32 OAIV0_0_39_node::getPort() const {
    return m_port;
}
void OAIV0_0_39_node::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIV0_0_39_node::is_port_Set() const{
    return m_port_isSet;
}

bool OAIV0_0_39_node::is_port_Valid() const{
    return m_port_isValid;
}

qint64 OAIV0_0_39_node::getRealMemory() const {
    return m_real_memory;
}
void OAIV0_0_39_node::setRealMemory(const qint64 &real_memory) {
    m_real_memory = real_memory;
    m_real_memory_isSet = true;
}

bool OAIV0_0_39_node::is_real_memory_Set() const{
    return m_real_memory_isSet;
}

bool OAIV0_0_39_node::is_real_memory_Valid() const{
    return m_real_memory_isValid;
}

QString OAIV0_0_39_node::getComment() const {
    return m_comment;
}
void OAIV0_0_39_node::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIV0_0_39_node::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIV0_0_39_node::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIV0_0_39_node::getReason() const {
    return m_reason;
}
void OAIV0_0_39_node::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIV0_0_39_node::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIV0_0_39_node::is_reason_Valid() const{
    return m_reason_isValid;
}

qint64 OAIV0_0_39_node::getReasonChangedAt() const {
    return m_reason_changed_at;
}
void OAIV0_0_39_node::setReasonChangedAt(const qint64 &reason_changed_at) {
    m_reason_changed_at = reason_changed_at;
    m_reason_changed_at_isSet = true;
}

bool OAIV0_0_39_node::is_reason_changed_at_Set() const{
    return m_reason_changed_at_isSet;
}

bool OAIV0_0_39_node::is_reason_changed_at_Valid() const{
    return m_reason_changed_at_isValid;
}

QString OAIV0_0_39_node::getReasonSetByUser() const {
    return m_reason_set_by_user;
}
void OAIV0_0_39_node::setReasonSetByUser(const QString &reason_set_by_user) {
    m_reason_set_by_user = reason_set_by_user;
    m_reason_set_by_user_isSet = true;
}

bool OAIV0_0_39_node::is_reason_set_by_user_Set() const{
    return m_reason_set_by_user_isSet;
}

bool OAIV0_0_39_node::is_reason_set_by_user_Valid() const{
    return m_reason_set_by_user_isValid;
}

OAIV0_0_39_uint64_no_val OAIV0_0_39_node::getResumeAfter() const {
    return m_resume_after;
}
void OAIV0_0_39_node::setResumeAfter(const OAIV0_0_39_uint64_no_val &resume_after) {
    m_resume_after = resume_after;
    m_resume_after_isSet = true;
}

bool OAIV0_0_39_node::is_resume_after_Set() const{
    return m_resume_after_isSet;
}

bool OAIV0_0_39_node::is_resume_after_Valid() const{
    return m_resume_after_isValid;
}

QString OAIV0_0_39_node::getReservation() const {
    return m_reservation;
}
void OAIV0_0_39_node::setReservation(const QString &reservation) {
    m_reservation = reservation;
    m_reservation_isSet = true;
}

bool OAIV0_0_39_node::is_reservation_Set() const{
    return m_reservation_isSet;
}

bool OAIV0_0_39_node::is_reservation_Valid() const{
    return m_reservation_isValid;
}

qint64 OAIV0_0_39_node::getAllocMemory() const {
    return m_alloc_memory;
}
void OAIV0_0_39_node::setAllocMemory(const qint64 &alloc_memory) {
    m_alloc_memory = alloc_memory;
    m_alloc_memory_isSet = true;
}

bool OAIV0_0_39_node::is_alloc_memory_Set() const{
    return m_alloc_memory_isSet;
}

bool OAIV0_0_39_node::is_alloc_memory_Valid() const{
    return m_alloc_memory_isValid;
}

qint32 OAIV0_0_39_node::getAllocCpus() const {
    return m_alloc_cpus;
}
void OAIV0_0_39_node::setAllocCpus(const qint32 &alloc_cpus) {
    m_alloc_cpus = alloc_cpus;
    m_alloc_cpus_isSet = true;
}

bool OAIV0_0_39_node::is_alloc_cpus_Set() const{
    return m_alloc_cpus_isSet;
}

bool OAIV0_0_39_node::is_alloc_cpus_Valid() const{
    return m_alloc_cpus_isValid;
}

qint32 OAIV0_0_39_node::getAllocIdleCpus() const {
    return m_alloc_idle_cpus;
}
void OAIV0_0_39_node::setAllocIdleCpus(const qint32 &alloc_idle_cpus) {
    m_alloc_idle_cpus = alloc_idle_cpus;
    m_alloc_idle_cpus_isSet = true;
}

bool OAIV0_0_39_node::is_alloc_idle_cpus_Set() const{
    return m_alloc_idle_cpus_isSet;
}

bool OAIV0_0_39_node::is_alloc_idle_cpus_Valid() const{
    return m_alloc_idle_cpus_isValid;
}

QString OAIV0_0_39_node::getTresUsed() const {
    return m_tres_used;
}
void OAIV0_0_39_node::setTresUsed(const QString &tres_used) {
    m_tres_used = tres_used;
    m_tres_used_isSet = true;
}

bool OAIV0_0_39_node::is_tres_used_Set() const{
    return m_tres_used_isSet;
}

bool OAIV0_0_39_node::is_tres_used_Valid() const{
    return m_tres_used_isValid;
}

double OAIV0_0_39_node::getTresWeighted() const {
    return m_tres_weighted;
}
void OAIV0_0_39_node::setTresWeighted(const double &tres_weighted) {
    m_tres_weighted = tres_weighted;
    m_tres_weighted_isSet = true;
}

bool OAIV0_0_39_node::is_tres_weighted_Set() const{
    return m_tres_weighted_isSet;
}

bool OAIV0_0_39_node::is_tres_weighted_Valid() const{
    return m_tres_weighted_isValid;
}

qint64 OAIV0_0_39_node::getSlurmdStartTime() const {
    return m_slurmd_start_time;
}
void OAIV0_0_39_node::setSlurmdStartTime(const qint64 &slurmd_start_time) {
    m_slurmd_start_time = slurmd_start_time;
    m_slurmd_start_time_isSet = true;
}

bool OAIV0_0_39_node::is_slurmd_start_time_Set() const{
    return m_slurmd_start_time_isSet;
}

bool OAIV0_0_39_node::is_slurmd_start_time_Valid() const{
    return m_slurmd_start_time_isValid;
}

qint32 OAIV0_0_39_node::getSockets() const {
    return m_sockets;
}
void OAIV0_0_39_node::setSockets(const qint32 &sockets) {
    m_sockets = sockets;
    m_sockets_isSet = true;
}

bool OAIV0_0_39_node::is_sockets_Set() const{
    return m_sockets_isSet;
}

bool OAIV0_0_39_node::is_sockets_Valid() const{
    return m_sockets_isValid;
}

qint32 OAIV0_0_39_node::getThreads() const {
    return m_threads;
}
void OAIV0_0_39_node::setThreads(const qint32 &threads) {
    m_threads = threads;
    m_threads_isSet = true;
}

bool OAIV0_0_39_node::is_threads_Set() const{
    return m_threads_isSet;
}

bool OAIV0_0_39_node::is_threads_Valid() const{
    return m_threads_isValid;
}

qint32 OAIV0_0_39_node::getTemporaryDisk() const {
    return m_temporary_disk;
}
void OAIV0_0_39_node::setTemporaryDisk(const qint32 &temporary_disk) {
    m_temporary_disk = temporary_disk;
    m_temporary_disk_isSet = true;
}

bool OAIV0_0_39_node::is_temporary_disk_Set() const{
    return m_temporary_disk_isSet;
}

bool OAIV0_0_39_node::is_temporary_disk_Valid() const{
    return m_temporary_disk_isValid;
}

qint32 OAIV0_0_39_node::getWeight() const {
    return m_weight;
}
void OAIV0_0_39_node::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIV0_0_39_node::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIV0_0_39_node::is_weight_Valid() const{
    return m_weight_isValid;
}

QString OAIV0_0_39_node::getTres() const {
    return m_tres;
}
void OAIV0_0_39_node::setTres(const QString &tres) {
    m_tres = tres;
    m_tres_isSet = true;
}

bool OAIV0_0_39_node::is_tres_Set() const{
    return m_tres_isSet;
}

bool OAIV0_0_39_node::is_tres_Valid() const{
    return m_tres_isValid;
}

QString OAIV0_0_39_node::getVersion() const {
    return m_version;
}
void OAIV0_0_39_node::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIV0_0_39_node::is_version_Set() const{
    return m_version_isSet;
}

bool OAIV0_0_39_node::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIV0_0_39_node::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_burstbuffer_network_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialized_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_binding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_load.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_mem.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialized_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_sensors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gres_drained_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gres_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_busy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcs_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialized_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_state_after_reboot.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_changed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_set_by_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_after.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alloc_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alloc_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alloc_idle_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_weighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slurmd_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sockets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_39_node::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
