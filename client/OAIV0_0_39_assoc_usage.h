/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV0_0_39_assoc_usage.h
 *
 * 
 */

#ifndef OAIV0_0_39_assoc_usage_H
#define OAIV0_0_39_assoc_usage_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace hm:slurm:client {

class OAIV0_0_39_assoc_usage : public OAIObject {
public:
    OAIV0_0_39_assoc_usage();
    OAIV0_0_39_assoc_usage(QString json);
    ~OAIV0_0_39_assoc_usage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAccrueJobCount() const;
    void setAccrueJobCount(const qint32 &accrue_job_count);
    bool is_accrue_job_count_Set() const;
    bool is_accrue_job_count_Valid() const;

    double getGroupUsedWallclock() const;
    void setGroupUsedWallclock(const double &group_used_wallclock);
    bool is_group_used_wallclock_Set() const;
    bool is_group_used_wallclock_Valid() const;

    double getFairshareFactor() const;
    void setFairshareFactor(const double &fairshare_factor);
    bool is_fairshare_factor_Set() const;
    bool is_fairshare_factor_Valid() const;

    qint32 getFairshareShares() const;
    void setFairshareShares(const qint32 &fairshare_shares);
    bool is_fairshare_shares_Set() const;
    bool is_fairshare_shares_Valid() const;

    double getNormalizedPriority() const;
    void setNormalizedPriority(const double &normalized_priority);
    bool is_normalized_priority_Set() const;
    bool is_normalized_priority_Valid() const;

    double getNormalizedShares() const;
    void setNormalizedShares(const double &normalized_shares);
    bool is_normalized_shares_Set() const;
    bool is_normalized_shares_Valid() const;

    double getEffectiveNormalizedUsage() const;
    void setEffectiveNormalizedUsage(const double &effective_normalized_usage);
    bool is_effective_normalized_usage_Set() const;
    bool is_effective_normalized_usage_Valid() const;

    double getNormalizedUsage() const;
    void setNormalizedUsage(const double &normalized_usage);
    bool is_normalized_usage_Set() const;
    bool is_normalized_usage_Valid() const;

    double getRawUsage() const;
    void setRawUsage(const double &raw_usage);
    bool is_raw_usage_Set() const;
    bool is_raw_usage_Valid() const;

    qint32 getActiveJobs() const;
    void setActiveJobs(const qint32 &active_jobs);
    bool is_active_jobs_Set() const;
    bool is_active_jobs_Valid() const;

    qint32 getJobCount() const;
    void setJobCount(const qint32 &job_count);
    bool is_job_count_Set() const;
    bool is_job_count_Valid() const;

    double getFairshareLevel() const;
    void setFairshareLevel(const double &fairshare_level);
    bool is_fairshare_level_Set() const;
    bool is_fairshare_level_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_accrue_job_count;
    bool m_accrue_job_count_isSet;
    bool m_accrue_job_count_isValid;

    double m_group_used_wallclock;
    bool m_group_used_wallclock_isSet;
    bool m_group_used_wallclock_isValid;

    double m_fairshare_factor;
    bool m_fairshare_factor_isSet;
    bool m_fairshare_factor_isValid;

    qint32 m_fairshare_shares;
    bool m_fairshare_shares_isSet;
    bool m_fairshare_shares_isValid;

    double m_normalized_priority;
    bool m_normalized_priority_isSet;
    bool m_normalized_priority_isValid;

    double m_normalized_shares;
    bool m_normalized_shares_isSet;
    bool m_normalized_shares_isValid;

    double m_effective_normalized_usage;
    bool m_effective_normalized_usage_isSet;
    bool m_effective_normalized_usage_isValid;

    double m_normalized_usage;
    bool m_normalized_usage_isSet;
    bool m_normalized_usage_isValid;

    double m_raw_usage;
    bool m_raw_usage_isSet;
    bool m_raw_usage_isValid;

    qint32 m_active_jobs;
    bool m_active_jobs_isSet;
    bool m_active_jobs_isValid;

    qint32 m_job_count;
    bool m_job_count_isSet;
    bool m_job_count_isValid;

    double m_fairshare_level;
    bool m_fairshare_level_isSet;
    bool m_fairshare_level_isValid;
};

} // namespace hm:slurm:client

Q_DECLARE_METATYPE(hm:slurm:client::OAIV0_0_39_assoc_usage)

#endif // OAIV0_0_39_assoc_usage_H
