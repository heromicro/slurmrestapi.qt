/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_39_job_desc_msg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_39_job_desc_msg::OAIV0_0_39_job_desc_msg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_39_job_desc_msg::OAIV0_0_39_job_desc_msg() {
    this->initializeModel();
}

OAIV0_0_39_job_desc_msg::~OAIV0_0_39_job_desc_msg() {}

void OAIV0_0_39_job_desc_msg::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_account_gather_frequency_isSet = false;
    m_account_gather_frequency_isValid = false;

    m_admin_comment_isSet = false;
    m_admin_comment_isValid = false;

    m_allocation_node_list_isSet = false;
    m_allocation_node_list_isValid = false;

    m_allocation_node_port_isSet = false;
    m_allocation_node_port_isValid = false;

    m_argv_isSet = false;
    m_argv_isValid = false;

    m_array_isSet = false;
    m_array_isValid = false;

    m_batch_features_isSet = false;
    m_batch_features_isValid = false;

    m_begin_time_isSet = false;
    m_begin_time_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_burst_buffer_isSet = false;
    m_burst_buffer_isValid = false;

    m_clusters_isSet = false;
    m_clusters_isValid = false;

    m_cluster_constraint_isSet = false;
    m_cluster_constraint_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_contiguous_isSet = false;
    m_contiguous_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_core_specification_isSet = false;
    m_core_specification_isValid = false;

    m_thread_specification_isSet = false;
    m_thread_specification_isValid = false;

    m_cpu_binding_isSet = false;
    m_cpu_binding_isValid = false;

    m_cpu_binding_flags_isSet = false;
    m_cpu_binding_flags_isValid = false;

    m_cpu_frequency_isSet = false;
    m_cpu_frequency_isValid = false;

    m_cpus_per_tres_isSet = false;
    m_cpus_per_tres_isValid = false;

    m_crontab_isSet = false;
    m_crontab_isValid = false;

    m_deadline_isSet = false;
    m_deadline_isValid = false;

    m_delay_boot_isSet = false;
    m_delay_boot_isValid = false;

    m_dependency_isSet = false;
    m_dependency_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_excluded_nodes_isSet = false;
    m_excluded_nodes_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_hetjob_group_isSet = false;
    m_hetjob_group_isValid = false;

    m_immediate_isSet = false;
    m_immediate_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_kill_on_node_fail_isSet = false;
    m_kill_on_node_fail_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_mail_type_isSet = false;
    m_mail_type_isValid = false;

    m_mail_user_isSet = false;
    m_mail_user_isValid = false;

    m_mcs_label_isSet = false;
    m_mcs_label_isValid = false;

    m_memory_binding_isSet = false;
    m_memory_binding_isValid = false;

    m_memory_binding_type_isSet = false;
    m_memory_binding_type_isValid = false;

    m_memory_per_tres_isSet = false;
    m_memory_per_tres_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_nice_isSet = false;
    m_nice_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;

    m_open_mode_isSet = false;
    m_open_mode_isValid = false;

    m_reserve_ports_isSet = false;
    m_reserve_ports_isValid = false;

    m_overcommit_isSet = false;
    m_overcommit_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_distribution_plane_size_isSet = false;
    m_distribution_plane_size_isValid = false;

    m_power_flags_isSet = false;
    m_power_flags_isValid = false;

    m_prefer_isSet = false;
    m_prefer_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_qos_isSet = false;
    m_qos_isValid = false;

    m_reboot_isSet = false;
    m_reboot_isValid = false;

    m_required_nodes_isSet = false;
    m_required_nodes_isValid = false;

    m_requeue_isSet = false;
    m_requeue_isValid = false;

    m_reservation_isSet = false;
    m_reservation_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_shared_isSet = false;
    m_shared_isValid = false;

    m_exclusive_isSet = false;
    m_exclusive_isValid = false;

    m_oversubscribe_isSet = false;
    m_oversubscribe_isValid = false;

    m_site_factor_isSet = false;
    m_site_factor_isValid = false;

    m_spank_environment_isSet = false;
    m_spank_environment_isValid = false;

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_time_limit_isSet = false;
    m_time_limit_isValid = false;

    m_time_minimum_isSet = false;
    m_time_minimum_isValid = false;

    m_tres_bind_isSet = false;
    m_tres_bind_isValid = false;

    m_tres_freq_isSet = false;
    m_tres_freq_isValid = false;

    m_tres_per_job_isSet = false;
    m_tres_per_job_isValid = false;

    m_tres_per_node_isSet = false;
    m_tres_per_node_isValid = false;

    m_tres_per_socket_isSet = false;
    m_tres_per_socket_isValid = false;

    m_tres_per_task_isSet = false;
    m_tres_per_task_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_wait_all_nodes_isSet = false;
    m_wait_all_nodes_isValid = false;

    m_kill_warning_flags_isSet = false;
    m_kill_warning_flags_isValid = false;

    m_kill_warning_signal_isSet = false;
    m_kill_warning_signal_isValid = false;

    m_kill_warning_delay_isSet = false;
    m_kill_warning_delay_isValid = false;

    m_current_working_directory_isSet = false;
    m_current_working_directory_isValid = false;

    m_cpus_per_task_isSet = false;
    m_cpus_per_task_isValid = false;

    m_minimum_cpus_isSet = false;
    m_minimum_cpus_isValid = false;

    m_maximum_cpus_isSet = false;
    m_maximum_cpus_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_minimum_nodes_isSet = false;
    m_minimum_nodes_isValid = false;

    m_maximum_nodes_isSet = false;
    m_maximum_nodes_isValid = false;

    m_minimum_boards_per_node_isSet = false;
    m_minimum_boards_per_node_isValid = false;

    m_minimum_sockets_per_board_isSet = false;
    m_minimum_sockets_per_board_isValid = false;

    m_sockets_per_node_isSet = false;
    m_sockets_per_node_isValid = false;

    m_threads_per_core_isSet = false;
    m_threads_per_core_isValid = false;

    m_tasks_per_node_isSet = false;
    m_tasks_per_node_isValid = false;

    m_tasks_per_socket_isSet = false;
    m_tasks_per_socket_isValid = false;

    m_tasks_per_core_isSet = false;
    m_tasks_per_core_isValid = false;

    m_tasks_per_board_isSet = false;
    m_tasks_per_board_isValid = false;

    m_ntasks_per_tres_isSet = false;
    m_ntasks_per_tres_isValid = false;

    m_minimum_cpus_per_node_isSet = false;
    m_minimum_cpus_per_node_isValid = false;

    m_memory_per_cpu_isSet = false;
    m_memory_per_cpu_isValid = false;

    m_memory_per_node_isSet = false;
    m_memory_per_node_isValid = false;

    m_temporary_disk_per_node_isSet = false;
    m_temporary_disk_per_node_isValid = false;

    m_selinux_context_isSet = false;
    m_selinux_context_isValid = false;

    m_required_switches_isSet = false;
    m_required_switches_isValid = false;

    m_standard_error_isSet = false;
    m_standard_error_isValid = false;

    m_standard_input_isSet = false;
    m_standard_input_isValid = false;

    m_standard_output_isSet = false;
    m_standard_output_isValid = false;

    m_wait_for_switch_isSet = false;
    m_wait_for_switch_isValid = false;

    m_wckey_isSet = false;
    m_wckey_isValid = false;

    m_x11_isSet = false;
    m_x11_isValid = false;

    m_x11_magic_cookie_isSet = false;
    m_x11_magic_cookie_isValid = false;

    m_x11_target_host_isSet = false;
    m_x11_target_host_isValid = false;

    m_x11_target_port_isSet = false;
    m_x11_target_port_isValid = false;
}

void OAIV0_0_39_job_desc_msg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_39_job_desc_msg::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_account_gather_frequency_isValid = ::OpenAPI::fromJsonValue(m_account_gather_frequency, json[QString("account_gather_frequency")]);
    m_account_gather_frequency_isSet = !json[QString("account_gather_frequency")].isNull() && m_account_gather_frequency_isValid;

    m_admin_comment_isValid = ::OpenAPI::fromJsonValue(m_admin_comment, json[QString("admin_comment")]);
    m_admin_comment_isSet = !json[QString("admin_comment")].isNull() && m_admin_comment_isValid;

    m_allocation_node_list_isValid = ::OpenAPI::fromJsonValue(m_allocation_node_list, json[QString("allocation_node_list")]);
    m_allocation_node_list_isSet = !json[QString("allocation_node_list")].isNull() && m_allocation_node_list_isValid;

    m_allocation_node_port_isValid = ::OpenAPI::fromJsonValue(m_allocation_node_port, json[QString("allocation_node_port")]);
    m_allocation_node_port_isSet = !json[QString("allocation_node_port")].isNull() && m_allocation_node_port_isValid;

    m_argv_isValid = ::OpenAPI::fromJsonValue(m_argv, json[QString("argv")]);
    m_argv_isSet = !json[QString("argv")].isNull() && m_argv_isValid;

    m_array_isValid = ::OpenAPI::fromJsonValue(m_array, json[QString("array")]);
    m_array_isSet = !json[QString("array")].isNull() && m_array_isValid;

    m_batch_features_isValid = ::OpenAPI::fromJsonValue(m_batch_features, json[QString("batch_features")]);
    m_batch_features_isSet = !json[QString("batch_features")].isNull() && m_batch_features_isValid;

    m_begin_time_isValid = ::OpenAPI::fromJsonValue(m_begin_time, json[QString("begin_time")]);
    m_begin_time_isSet = !json[QString("begin_time")].isNull() && m_begin_time_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_burst_buffer_isValid = ::OpenAPI::fromJsonValue(m_burst_buffer, json[QString("burst_buffer")]);
    m_burst_buffer_isSet = !json[QString("burst_buffer")].isNull() && m_burst_buffer_isValid;

    m_clusters_isValid = ::OpenAPI::fromJsonValue(m_clusters, json[QString("clusters")]);
    m_clusters_isSet = !json[QString("clusters")].isNull() && m_clusters_isValid;

    m_cluster_constraint_isValid = ::OpenAPI::fromJsonValue(m_cluster_constraint, json[QString("cluster_constraint")]);
    m_cluster_constraint_isSet = !json[QString("cluster_constraint")].isNull() && m_cluster_constraint_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_contiguous_isValid = ::OpenAPI::fromJsonValue(m_contiguous, json[QString("contiguous")]);
    m_contiguous_isSet = !json[QString("contiguous")].isNull() && m_contiguous_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("container_id")]);
    m_container_id_isSet = !json[QString("container_id")].isNull() && m_container_id_isValid;

    m_core_specification_isValid = ::OpenAPI::fromJsonValue(m_core_specification, json[QString("core_specification")]);
    m_core_specification_isSet = !json[QString("core_specification")].isNull() && m_core_specification_isValid;

    m_thread_specification_isValid = ::OpenAPI::fromJsonValue(m_thread_specification, json[QString("thread_specification")]);
    m_thread_specification_isSet = !json[QString("thread_specification")].isNull() && m_thread_specification_isValid;

    m_cpu_binding_isValid = ::OpenAPI::fromJsonValue(m_cpu_binding, json[QString("cpu_binding")]);
    m_cpu_binding_isSet = !json[QString("cpu_binding")].isNull() && m_cpu_binding_isValid;

    m_cpu_binding_flags_isValid = ::OpenAPI::fromJsonValue(m_cpu_binding_flags, json[QString("cpu_binding_flags")]);
    m_cpu_binding_flags_isSet = !json[QString("cpu_binding_flags")].isNull() && m_cpu_binding_flags_isValid;

    m_cpu_frequency_isValid = ::OpenAPI::fromJsonValue(m_cpu_frequency, json[QString("cpu_frequency")]);
    m_cpu_frequency_isSet = !json[QString("cpu_frequency")].isNull() && m_cpu_frequency_isValid;

    m_cpus_per_tres_isValid = ::OpenAPI::fromJsonValue(m_cpus_per_tres, json[QString("cpus_per_tres")]);
    m_cpus_per_tres_isSet = !json[QString("cpus_per_tres")].isNull() && m_cpus_per_tres_isValid;

    m_crontab_isValid = ::OpenAPI::fromJsonValue(m_crontab, json[QString("crontab")]);
    m_crontab_isSet = !json[QString("crontab")].isNull() && m_crontab_isValid;

    m_deadline_isValid = ::OpenAPI::fromJsonValue(m_deadline, json[QString("deadline")]);
    m_deadline_isSet = !json[QString("deadline")].isNull() && m_deadline_isValid;

    m_delay_boot_isValid = ::OpenAPI::fromJsonValue(m_delay_boot, json[QString("delay_boot")]);
    m_delay_boot_isSet = !json[QString("delay_boot")].isNull() && m_delay_boot_isValid;

    m_dependency_isValid = ::OpenAPI::fromJsonValue(m_dependency, json[QString("dependency")]);
    m_dependency_isSet = !json[QString("dependency")].isNull() && m_dependency_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_excluded_nodes_isValid = ::OpenAPI::fromJsonValue(m_excluded_nodes, json[QString("excluded_nodes")]);
    m_excluded_nodes_isSet = !json[QString("excluded_nodes")].isNull() && m_excluded_nodes_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_hetjob_group_isValid = ::OpenAPI::fromJsonValue(m_hetjob_group, json[QString("hetjob_group")]);
    m_hetjob_group_isSet = !json[QString("hetjob_group")].isNull() && m_hetjob_group_isValid;

    m_immediate_isValid = ::OpenAPI::fromJsonValue(m_immediate, json[QString("immediate")]);
    m_immediate_isSet = !json[QString("immediate")].isNull() && m_immediate_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("job_id")]);
    m_job_id_isSet = !json[QString("job_id")].isNull() && m_job_id_isValid;

    m_kill_on_node_fail_isValid = ::OpenAPI::fromJsonValue(m_kill_on_node_fail, json[QString("kill_on_node_fail")]);
    m_kill_on_node_fail_isSet = !json[QString("kill_on_node_fail")].isNull() && m_kill_on_node_fail_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_mail_type_isValid = ::OpenAPI::fromJsonValue(m_mail_type, json[QString("mail_type")]);
    m_mail_type_isSet = !json[QString("mail_type")].isNull() && m_mail_type_isValid;

    m_mail_user_isValid = ::OpenAPI::fromJsonValue(m_mail_user, json[QString("mail_user")]);
    m_mail_user_isSet = !json[QString("mail_user")].isNull() && m_mail_user_isValid;

    m_mcs_label_isValid = ::OpenAPI::fromJsonValue(m_mcs_label, json[QString("mcs_label")]);
    m_mcs_label_isSet = !json[QString("mcs_label")].isNull() && m_mcs_label_isValid;

    m_memory_binding_isValid = ::OpenAPI::fromJsonValue(m_memory_binding, json[QString("memory_binding")]);
    m_memory_binding_isSet = !json[QString("memory_binding")].isNull() && m_memory_binding_isValid;

    m_memory_binding_type_isValid = ::OpenAPI::fromJsonValue(m_memory_binding_type, json[QString("memory_binding_type")]);
    m_memory_binding_type_isSet = !json[QString("memory_binding_type")].isNull() && m_memory_binding_type_isValid;

    m_memory_per_tres_isValid = ::OpenAPI::fromJsonValue(m_memory_per_tres, json[QString("memory_per_tres")]);
    m_memory_per_tres_isSet = !json[QString("memory_per_tres")].isNull() && m_memory_per_tres_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_nice_isValid = ::OpenAPI::fromJsonValue(m_nice, json[QString("nice")]);
    m_nice_isSet = !json[QString("nice")].isNull() && m_nice_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;

    m_open_mode_isValid = ::OpenAPI::fromJsonValue(m_open_mode, json[QString("open_mode")]);
    m_open_mode_isSet = !json[QString("open_mode")].isNull() && m_open_mode_isValid;

    m_reserve_ports_isValid = ::OpenAPI::fromJsonValue(m_reserve_ports, json[QString("reserve_ports")]);
    m_reserve_ports_isSet = !json[QString("reserve_ports")].isNull() && m_reserve_ports_isValid;

    m_overcommit_isValid = ::OpenAPI::fromJsonValue(m_overcommit, json[QString("overcommit")]);
    m_overcommit_isSet = !json[QString("overcommit")].isNull() && m_overcommit_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_distribution_plane_size_isValid = ::OpenAPI::fromJsonValue(m_distribution_plane_size, json[QString("distribution_plane_size")]);
    m_distribution_plane_size_isSet = !json[QString("distribution_plane_size")].isNull() && m_distribution_plane_size_isValid;

    m_power_flags_isValid = ::OpenAPI::fromJsonValue(m_power_flags, json[QString("power_flags")]);
    m_power_flags_isSet = !json[QString("power_flags")].isNull() && m_power_flags_isValid;

    m_prefer_isValid = ::OpenAPI::fromJsonValue(m_prefer, json[QString("prefer")]);
    m_prefer_isSet = !json[QString("prefer")].isNull() && m_prefer_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_qos_isValid = ::OpenAPI::fromJsonValue(m_qos, json[QString("qos")]);
    m_qos_isSet = !json[QString("qos")].isNull() && m_qos_isValid;

    m_reboot_isValid = ::OpenAPI::fromJsonValue(m_reboot, json[QString("reboot")]);
    m_reboot_isSet = !json[QString("reboot")].isNull() && m_reboot_isValid;

    m_required_nodes_isValid = ::OpenAPI::fromJsonValue(m_required_nodes, json[QString("required_nodes")]);
    m_required_nodes_isSet = !json[QString("required_nodes")].isNull() && m_required_nodes_isValid;

    m_requeue_isValid = ::OpenAPI::fromJsonValue(m_requeue, json[QString("requeue")]);
    m_requeue_isSet = !json[QString("requeue")].isNull() && m_requeue_isValid;

    m_reservation_isValid = ::OpenAPI::fromJsonValue(m_reservation, json[QString("reservation")]);
    m_reservation_isSet = !json[QString("reservation")].isNull() && m_reservation_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_shared_isValid = ::OpenAPI::fromJsonValue(m_shared, json[QString("shared")]);
    m_shared_isSet = !json[QString("shared")].isNull() && m_shared_isValid;

    m_exclusive_isValid = ::OpenAPI::fromJsonValue(m_exclusive, json[QString("exclusive")]);
    m_exclusive_isSet = !json[QString("exclusive")].isNull() && m_exclusive_isValid;

    m_oversubscribe_isValid = ::OpenAPI::fromJsonValue(m_oversubscribe, json[QString("oversubscribe")]);
    m_oversubscribe_isSet = !json[QString("oversubscribe")].isNull() && m_oversubscribe_isValid;

    m_site_factor_isValid = ::OpenAPI::fromJsonValue(m_site_factor, json[QString("site_factor")]);
    m_site_factor_isSet = !json[QString("site_factor")].isNull() && m_site_factor_isValid;

    m_spank_environment_isValid = ::OpenAPI::fromJsonValue(m_spank_environment, json[QString("spank_environment")]);
    m_spank_environment_isSet = !json[QString("spank_environment")].isNull() && m_spank_environment_isValid;

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("distribution")]);
    m_distribution_isSet = !json[QString("distribution")].isNull() && m_distribution_isValid;

    m_time_limit_isValid = ::OpenAPI::fromJsonValue(m_time_limit, json[QString("time_limit")]);
    m_time_limit_isSet = !json[QString("time_limit")].isNull() && m_time_limit_isValid;

    m_time_minimum_isValid = ::OpenAPI::fromJsonValue(m_time_minimum, json[QString("time_minimum")]);
    m_time_minimum_isSet = !json[QString("time_minimum")].isNull() && m_time_minimum_isValid;

    m_tres_bind_isValid = ::OpenAPI::fromJsonValue(m_tres_bind, json[QString("tres_bind")]);
    m_tres_bind_isSet = !json[QString("tres_bind")].isNull() && m_tres_bind_isValid;

    m_tres_freq_isValid = ::OpenAPI::fromJsonValue(m_tres_freq, json[QString("tres_freq")]);
    m_tres_freq_isSet = !json[QString("tres_freq")].isNull() && m_tres_freq_isValid;

    m_tres_per_job_isValid = ::OpenAPI::fromJsonValue(m_tres_per_job, json[QString("tres_per_job")]);
    m_tres_per_job_isSet = !json[QString("tres_per_job")].isNull() && m_tres_per_job_isValid;

    m_tres_per_node_isValid = ::OpenAPI::fromJsonValue(m_tres_per_node, json[QString("tres_per_node")]);
    m_tres_per_node_isSet = !json[QString("tres_per_node")].isNull() && m_tres_per_node_isValid;

    m_tres_per_socket_isValid = ::OpenAPI::fromJsonValue(m_tres_per_socket, json[QString("tres_per_socket")]);
    m_tres_per_socket_isSet = !json[QString("tres_per_socket")].isNull() && m_tres_per_socket_isValid;

    m_tres_per_task_isValid = ::OpenAPI::fromJsonValue(m_tres_per_task, json[QString("tres_per_task")]);
    m_tres_per_task_isSet = !json[QString("tres_per_task")].isNull() && m_tres_per_task_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_wait_all_nodes_isValid = ::OpenAPI::fromJsonValue(m_wait_all_nodes, json[QString("wait_all_nodes")]);
    m_wait_all_nodes_isSet = !json[QString("wait_all_nodes")].isNull() && m_wait_all_nodes_isValid;

    m_kill_warning_flags_isValid = ::OpenAPI::fromJsonValue(m_kill_warning_flags, json[QString("kill_warning_flags")]);
    m_kill_warning_flags_isSet = !json[QString("kill_warning_flags")].isNull() && m_kill_warning_flags_isValid;

    m_kill_warning_signal_isValid = ::OpenAPI::fromJsonValue(m_kill_warning_signal, json[QString("kill_warning_signal")]);
    m_kill_warning_signal_isSet = !json[QString("kill_warning_signal")].isNull() && m_kill_warning_signal_isValid;

    m_kill_warning_delay_isValid = ::OpenAPI::fromJsonValue(m_kill_warning_delay, json[QString("kill_warning_delay")]);
    m_kill_warning_delay_isSet = !json[QString("kill_warning_delay")].isNull() && m_kill_warning_delay_isValid;

    m_current_working_directory_isValid = ::OpenAPI::fromJsonValue(m_current_working_directory, json[QString("current_working_directory")]);
    m_current_working_directory_isSet = !json[QString("current_working_directory")].isNull() && m_current_working_directory_isValid;

    m_cpus_per_task_isValid = ::OpenAPI::fromJsonValue(m_cpus_per_task, json[QString("cpus_per_task")]);
    m_cpus_per_task_isSet = !json[QString("cpus_per_task")].isNull() && m_cpus_per_task_isValid;

    m_minimum_cpus_isValid = ::OpenAPI::fromJsonValue(m_minimum_cpus, json[QString("minimum_cpus")]);
    m_minimum_cpus_isSet = !json[QString("minimum_cpus")].isNull() && m_minimum_cpus_isValid;

    m_maximum_cpus_isValid = ::OpenAPI::fromJsonValue(m_maximum_cpus, json[QString("maximum_cpus")]);
    m_maximum_cpus_isSet = !json[QString("maximum_cpus")].isNull() && m_maximum_cpus_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_minimum_nodes_isValid = ::OpenAPI::fromJsonValue(m_minimum_nodes, json[QString("minimum_nodes")]);
    m_minimum_nodes_isSet = !json[QString("minimum_nodes")].isNull() && m_minimum_nodes_isValid;

    m_maximum_nodes_isValid = ::OpenAPI::fromJsonValue(m_maximum_nodes, json[QString("maximum_nodes")]);
    m_maximum_nodes_isSet = !json[QString("maximum_nodes")].isNull() && m_maximum_nodes_isValid;

    m_minimum_boards_per_node_isValid = ::OpenAPI::fromJsonValue(m_minimum_boards_per_node, json[QString("minimum_boards_per_node")]);
    m_minimum_boards_per_node_isSet = !json[QString("minimum_boards_per_node")].isNull() && m_minimum_boards_per_node_isValid;

    m_minimum_sockets_per_board_isValid = ::OpenAPI::fromJsonValue(m_minimum_sockets_per_board, json[QString("minimum_sockets_per_board")]);
    m_minimum_sockets_per_board_isSet = !json[QString("minimum_sockets_per_board")].isNull() && m_minimum_sockets_per_board_isValid;

    m_sockets_per_node_isValid = ::OpenAPI::fromJsonValue(m_sockets_per_node, json[QString("sockets_per_node")]);
    m_sockets_per_node_isSet = !json[QString("sockets_per_node")].isNull() && m_sockets_per_node_isValid;

    m_threads_per_core_isValid = ::OpenAPI::fromJsonValue(m_threads_per_core, json[QString("threads_per_core")]);
    m_threads_per_core_isSet = !json[QString("threads_per_core")].isNull() && m_threads_per_core_isValid;

    m_tasks_per_node_isValid = ::OpenAPI::fromJsonValue(m_tasks_per_node, json[QString("tasks_per_node")]);
    m_tasks_per_node_isSet = !json[QString("tasks_per_node")].isNull() && m_tasks_per_node_isValid;

    m_tasks_per_socket_isValid = ::OpenAPI::fromJsonValue(m_tasks_per_socket, json[QString("tasks_per_socket")]);
    m_tasks_per_socket_isSet = !json[QString("tasks_per_socket")].isNull() && m_tasks_per_socket_isValid;

    m_tasks_per_core_isValid = ::OpenAPI::fromJsonValue(m_tasks_per_core, json[QString("tasks_per_core")]);
    m_tasks_per_core_isSet = !json[QString("tasks_per_core")].isNull() && m_tasks_per_core_isValid;

    m_tasks_per_board_isValid = ::OpenAPI::fromJsonValue(m_tasks_per_board, json[QString("tasks_per_board")]);
    m_tasks_per_board_isSet = !json[QString("tasks_per_board")].isNull() && m_tasks_per_board_isValid;

    m_ntasks_per_tres_isValid = ::OpenAPI::fromJsonValue(m_ntasks_per_tres, json[QString("ntasks_per_tres")]);
    m_ntasks_per_tres_isSet = !json[QString("ntasks_per_tres")].isNull() && m_ntasks_per_tres_isValid;

    m_minimum_cpus_per_node_isValid = ::OpenAPI::fromJsonValue(m_minimum_cpus_per_node, json[QString("minimum_cpus_per_node")]);
    m_minimum_cpus_per_node_isSet = !json[QString("minimum_cpus_per_node")].isNull() && m_minimum_cpus_per_node_isValid;

    m_memory_per_cpu_isValid = ::OpenAPI::fromJsonValue(m_memory_per_cpu, json[QString("memory_per_cpu")]);
    m_memory_per_cpu_isSet = !json[QString("memory_per_cpu")].isNull() && m_memory_per_cpu_isValid;

    m_memory_per_node_isValid = ::OpenAPI::fromJsonValue(m_memory_per_node, json[QString("memory_per_node")]);
    m_memory_per_node_isSet = !json[QString("memory_per_node")].isNull() && m_memory_per_node_isValid;

    m_temporary_disk_per_node_isValid = ::OpenAPI::fromJsonValue(m_temporary_disk_per_node, json[QString("temporary_disk_per_node")]);
    m_temporary_disk_per_node_isSet = !json[QString("temporary_disk_per_node")].isNull() && m_temporary_disk_per_node_isValid;

    m_selinux_context_isValid = ::OpenAPI::fromJsonValue(m_selinux_context, json[QString("selinux_context")]);
    m_selinux_context_isSet = !json[QString("selinux_context")].isNull() && m_selinux_context_isValid;

    m_required_switches_isValid = ::OpenAPI::fromJsonValue(m_required_switches, json[QString("required_switches")]);
    m_required_switches_isSet = !json[QString("required_switches")].isNull() && m_required_switches_isValid;

    m_standard_error_isValid = ::OpenAPI::fromJsonValue(m_standard_error, json[QString("standard_error")]);
    m_standard_error_isSet = !json[QString("standard_error")].isNull() && m_standard_error_isValid;

    m_standard_input_isValid = ::OpenAPI::fromJsonValue(m_standard_input, json[QString("standard_input")]);
    m_standard_input_isSet = !json[QString("standard_input")].isNull() && m_standard_input_isValid;

    m_standard_output_isValid = ::OpenAPI::fromJsonValue(m_standard_output, json[QString("standard_output")]);
    m_standard_output_isSet = !json[QString("standard_output")].isNull() && m_standard_output_isValid;

    m_wait_for_switch_isValid = ::OpenAPI::fromJsonValue(m_wait_for_switch, json[QString("wait_for_switch")]);
    m_wait_for_switch_isSet = !json[QString("wait_for_switch")].isNull() && m_wait_for_switch_isValid;

    m_wckey_isValid = ::OpenAPI::fromJsonValue(m_wckey, json[QString("wckey")]);
    m_wckey_isSet = !json[QString("wckey")].isNull() && m_wckey_isValid;

    m_x11_isValid = ::OpenAPI::fromJsonValue(m_x11, json[QString("x11")]);
    m_x11_isSet = !json[QString("x11")].isNull() && m_x11_isValid;

    m_x11_magic_cookie_isValid = ::OpenAPI::fromJsonValue(m_x11_magic_cookie, json[QString("x11_magic_cookie")]);
    m_x11_magic_cookie_isSet = !json[QString("x11_magic_cookie")].isNull() && m_x11_magic_cookie_isValid;

    m_x11_target_host_isValid = ::OpenAPI::fromJsonValue(m_x11_target_host, json[QString("x11_target_host")]);
    m_x11_target_host_isSet = !json[QString("x11_target_host")].isNull() && m_x11_target_host_isValid;

    m_x11_target_port_isValid = ::OpenAPI::fromJsonValue(m_x11_target_port, json[QString("x11_target_port")]);
    m_x11_target_port_isSet = !json[QString("x11_target_port")].isNull() && m_x11_target_port_isValid;
}

QString OAIV0_0_39_job_desc_msg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_39_job_desc_msg::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_account_gather_frequency_isSet) {
        obj.insert(QString("account_gather_frequency"), ::OpenAPI::toJsonValue(m_account_gather_frequency));
    }
    if (m_admin_comment_isSet) {
        obj.insert(QString("admin_comment"), ::OpenAPI::toJsonValue(m_admin_comment));
    }
    if (m_allocation_node_list_isSet) {
        obj.insert(QString("allocation_node_list"), ::OpenAPI::toJsonValue(m_allocation_node_list));
    }
    if (m_allocation_node_port_isSet) {
        obj.insert(QString("allocation_node_port"), ::OpenAPI::toJsonValue(m_allocation_node_port));
    }
    if (m_argv.size() > 0) {
        obj.insert(QString("argv"), ::OpenAPI::toJsonValue(m_argv));
    }
    if (m_array_isSet) {
        obj.insert(QString("array"), ::OpenAPI::toJsonValue(m_array));
    }
    if (m_batch_features_isSet) {
        obj.insert(QString("batch_features"), ::OpenAPI::toJsonValue(m_batch_features));
    }
    if (m_begin_time_isSet) {
        obj.insert(QString("begin_time"), ::OpenAPI::toJsonValue(m_begin_time));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_burst_buffer_isSet) {
        obj.insert(QString("burst_buffer"), ::OpenAPI::toJsonValue(m_burst_buffer));
    }
    if (m_clusters_isSet) {
        obj.insert(QString("clusters"), ::OpenAPI::toJsonValue(m_clusters));
    }
    if (m_cluster_constraint_isSet) {
        obj.insert(QString("cluster_constraint"), ::OpenAPI::toJsonValue(m_cluster_constraint));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_contiguous_isSet) {
        obj.insert(QString("contiguous"), ::OpenAPI::toJsonValue(m_contiguous));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("container_id"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_core_specification_isSet) {
        obj.insert(QString("core_specification"), ::OpenAPI::toJsonValue(m_core_specification));
    }
    if (m_thread_specification_isSet) {
        obj.insert(QString("thread_specification"), ::OpenAPI::toJsonValue(m_thread_specification));
    }
    if (m_cpu_binding_isSet) {
        obj.insert(QString("cpu_binding"), ::OpenAPI::toJsonValue(m_cpu_binding));
    }
    if (m_cpu_binding_flags.size() > 0) {
        obj.insert(QString("cpu_binding_flags"), ::OpenAPI::toJsonValue(m_cpu_binding_flags));
    }
    if (m_cpu_frequency_isSet) {
        obj.insert(QString("cpu_frequency"), ::OpenAPI::toJsonValue(m_cpu_frequency));
    }
    if (m_cpus_per_tres_isSet) {
        obj.insert(QString("cpus_per_tres"), ::OpenAPI::toJsonValue(m_cpus_per_tres));
    }
    if (m_crontab.isSet()) {
        obj.insert(QString("crontab"), ::OpenAPI::toJsonValue(m_crontab));
    }
    if (m_deadline_isSet) {
        obj.insert(QString("deadline"), ::OpenAPI::toJsonValue(m_deadline));
    }
    if (m_delay_boot_isSet) {
        obj.insert(QString("delay_boot"), ::OpenAPI::toJsonValue(m_delay_boot));
    }
    if (m_dependency_isSet) {
        obj.insert(QString("dependency"), ::OpenAPI::toJsonValue(m_dependency));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_environment.size() > 0) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_excluded_nodes.size() > 0) {
        obj.insert(QString("excluded_nodes"), ::OpenAPI::toJsonValue(m_excluded_nodes));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_constraints_isSet) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_hetjob_group_isSet) {
        obj.insert(QString("hetjob_group"), ::OpenAPI::toJsonValue(m_hetjob_group));
    }
    if (m_immediate_isSet) {
        obj.insert(QString("immediate"), ::OpenAPI::toJsonValue(m_immediate));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("job_id"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_kill_on_node_fail_isSet) {
        obj.insert(QString("kill_on_node_fail"), ::OpenAPI::toJsonValue(m_kill_on_node_fail));
    }
    if (m_licenses_isSet) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_mail_type.size() > 0) {
        obj.insert(QString("mail_type"), ::OpenAPI::toJsonValue(m_mail_type));
    }
    if (m_mail_user_isSet) {
        obj.insert(QString("mail_user"), ::OpenAPI::toJsonValue(m_mail_user));
    }
    if (m_mcs_label_isSet) {
        obj.insert(QString("mcs_label"), ::OpenAPI::toJsonValue(m_mcs_label));
    }
    if (m_memory_binding_isSet) {
        obj.insert(QString("memory_binding"), ::OpenAPI::toJsonValue(m_memory_binding));
    }
    if (m_memory_binding_type.size() > 0) {
        obj.insert(QString("memory_binding_type"), ::OpenAPI::toJsonValue(m_memory_binding_type));
    }
    if (m_memory_per_tres_isSet) {
        obj.insert(QString("memory_per_tres"), ::OpenAPI::toJsonValue(m_memory_per_tres));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_nice_isSet) {
        obj.insert(QString("nice"), ::OpenAPI::toJsonValue(m_nice));
    }
    if (m_tasks_isSet) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    if (m_open_mode.size() > 0) {
        obj.insert(QString("open_mode"), ::OpenAPI::toJsonValue(m_open_mode));
    }
    if (m_reserve_ports_isSet) {
        obj.insert(QString("reserve_ports"), ::OpenAPI::toJsonValue(m_reserve_ports));
    }
    if (m_overcommit_isSet) {
        obj.insert(QString("overcommit"), ::OpenAPI::toJsonValue(m_overcommit));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_distribution_plane_size_isSet) {
        obj.insert(QString("distribution_plane_size"), ::OpenAPI::toJsonValue(m_distribution_plane_size));
    }
    if (m_power_flags.size() > 0) {
        obj.insert(QString("power_flags"), ::OpenAPI::toJsonValue(m_power_flags));
    }
    if (m_prefer_isSet) {
        obj.insert(QString("prefer"), ::OpenAPI::toJsonValue(m_prefer));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_profile.size() > 0) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_qos_isSet) {
        obj.insert(QString("qos"), ::OpenAPI::toJsonValue(m_qos));
    }
    if (m_reboot_isSet) {
        obj.insert(QString("reboot"), ::OpenAPI::toJsonValue(m_reboot));
    }
    if (m_required_nodes.size() > 0) {
        obj.insert(QString("required_nodes"), ::OpenAPI::toJsonValue(m_required_nodes));
    }
    if (m_requeue_isSet) {
        obj.insert(QString("requeue"), ::OpenAPI::toJsonValue(m_requeue));
    }
    if (m_reservation_isSet) {
        obj.insert(QString("reservation"), ::OpenAPI::toJsonValue(m_reservation));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_shared.size() > 0) {
        obj.insert(QString("shared"), ::OpenAPI::toJsonValue(m_shared));
    }
    if (m_exclusive.size() > 0) {
        obj.insert(QString("exclusive"), ::OpenAPI::toJsonValue(m_exclusive));
    }
    if (m_oversubscribe_isSet) {
        obj.insert(QString("oversubscribe"), ::OpenAPI::toJsonValue(m_oversubscribe));
    }
    if (m_site_factor_isSet) {
        obj.insert(QString("site_factor"), ::OpenAPI::toJsonValue(m_site_factor));
    }
    if (m_spank_environment.size() > 0) {
        obj.insert(QString("spank_environment"), ::OpenAPI::toJsonValue(m_spank_environment));
    }
    if (m_distribution_isSet) {
        obj.insert(QString("distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_time_limit.isSet()) {
        obj.insert(QString("time_limit"), ::OpenAPI::toJsonValue(m_time_limit));
    }
    if (m_time_minimum.isSet()) {
        obj.insert(QString("time_minimum"), ::OpenAPI::toJsonValue(m_time_minimum));
    }
    if (m_tres_bind_isSet) {
        obj.insert(QString("tres_bind"), ::OpenAPI::toJsonValue(m_tres_bind));
    }
    if (m_tres_freq_isSet) {
        obj.insert(QString("tres_freq"), ::OpenAPI::toJsonValue(m_tres_freq));
    }
    if (m_tres_per_job_isSet) {
        obj.insert(QString("tres_per_job"), ::OpenAPI::toJsonValue(m_tres_per_job));
    }
    if (m_tres_per_node_isSet) {
        obj.insert(QString("tres_per_node"), ::OpenAPI::toJsonValue(m_tres_per_node));
    }
    if (m_tres_per_socket_isSet) {
        obj.insert(QString("tres_per_socket"), ::OpenAPI::toJsonValue(m_tres_per_socket));
    }
    if (m_tres_per_task_isSet) {
        obj.insert(QString("tres_per_task"), ::OpenAPI::toJsonValue(m_tres_per_task));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_wait_all_nodes_isSet) {
        obj.insert(QString("wait_all_nodes"), ::OpenAPI::toJsonValue(m_wait_all_nodes));
    }
    if (m_kill_warning_flags.size() > 0) {
        obj.insert(QString("kill_warning_flags"), ::OpenAPI::toJsonValue(m_kill_warning_flags));
    }
    if (m_kill_warning_signal_isSet) {
        obj.insert(QString("kill_warning_signal"), ::OpenAPI::toJsonValue(m_kill_warning_signal));
    }
    if (m_kill_warning_delay.isSet()) {
        obj.insert(QString("kill_warning_delay"), ::OpenAPI::toJsonValue(m_kill_warning_delay));
    }
    if (m_current_working_directory_isSet) {
        obj.insert(QString("current_working_directory"), ::OpenAPI::toJsonValue(m_current_working_directory));
    }
    if (m_cpus_per_task_isSet) {
        obj.insert(QString("cpus_per_task"), ::OpenAPI::toJsonValue(m_cpus_per_task));
    }
    if (m_minimum_cpus_isSet) {
        obj.insert(QString("minimum_cpus"), ::OpenAPI::toJsonValue(m_minimum_cpus));
    }
    if (m_maximum_cpus_isSet) {
        obj.insert(QString("maximum_cpus"), ::OpenAPI::toJsonValue(m_maximum_cpus));
    }
    if (m_nodes_isSet) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_minimum_nodes_isSet) {
        obj.insert(QString("minimum_nodes"), ::OpenAPI::toJsonValue(m_minimum_nodes));
    }
    if (m_maximum_nodes_isSet) {
        obj.insert(QString("maximum_nodes"), ::OpenAPI::toJsonValue(m_maximum_nodes));
    }
    if (m_minimum_boards_per_node_isSet) {
        obj.insert(QString("minimum_boards_per_node"), ::OpenAPI::toJsonValue(m_minimum_boards_per_node));
    }
    if (m_minimum_sockets_per_board_isSet) {
        obj.insert(QString("minimum_sockets_per_board"), ::OpenAPI::toJsonValue(m_minimum_sockets_per_board));
    }
    if (m_sockets_per_node_isSet) {
        obj.insert(QString("sockets_per_node"), ::OpenAPI::toJsonValue(m_sockets_per_node));
    }
    if (m_threads_per_core_isSet) {
        obj.insert(QString("threads_per_core"), ::OpenAPI::toJsonValue(m_threads_per_core));
    }
    if (m_tasks_per_node_isSet) {
        obj.insert(QString("tasks_per_node"), ::OpenAPI::toJsonValue(m_tasks_per_node));
    }
    if (m_tasks_per_socket_isSet) {
        obj.insert(QString("tasks_per_socket"), ::OpenAPI::toJsonValue(m_tasks_per_socket));
    }
    if (m_tasks_per_core_isSet) {
        obj.insert(QString("tasks_per_core"), ::OpenAPI::toJsonValue(m_tasks_per_core));
    }
    if (m_tasks_per_board_isSet) {
        obj.insert(QString("tasks_per_board"), ::OpenAPI::toJsonValue(m_tasks_per_board));
    }
    if (m_ntasks_per_tres_isSet) {
        obj.insert(QString("ntasks_per_tres"), ::OpenAPI::toJsonValue(m_ntasks_per_tres));
    }
    if (m_minimum_cpus_per_node_isSet) {
        obj.insert(QString("minimum_cpus_per_node"), ::OpenAPI::toJsonValue(m_minimum_cpus_per_node));
    }
    if (m_memory_per_cpu.isSet()) {
        obj.insert(QString("memory_per_cpu"), ::OpenAPI::toJsonValue(m_memory_per_cpu));
    }
    if (m_memory_per_node.isSet()) {
        obj.insert(QString("memory_per_node"), ::OpenAPI::toJsonValue(m_memory_per_node));
    }
    if (m_temporary_disk_per_node_isSet) {
        obj.insert(QString("temporary_disk_per_node"), ::OpenAPI::toJsonValue(m_temporary_disk_per_node));
    }
    if (m_selinux_context_isSet) {
        obj.insert(QString("selinux_context"), ::OpenAPI::toJsonValue(m_selinux_context));
    }
    if (m_required_switches.isSet()) {
        obj.insert(QString("required_switches"), ::OpenAPI::toJsonValue(m_required_switches));
    }
    if (m_standard_error_isSet) {
        obj.insert(QString("standard_error"), ::OpenAPI::toJsonValue(m_standard_error));
    }
    if (m_standard_input_isSet) {
        obj.insert(QString("standard_input"), ::OpenAPI::toJsonValue(m_standard_input));
    }
    if (m_standard_output_isSet) {
        obj.insert(QString("standard_output"), ::OpenAPI::toJsonValue(m_standard_output));
    }
    if (m_wait_for_switch_isSet) {
        obj.insert(QString("wait_for_switch"), ::OpenAPI::toJsonValue(m_wait_for_switch));
    }
    if (m_wckey_isSet) {
        obj.insert(QString("wckey"), ::OpenAPI::toJsonValue(m_wckey));
    }
    if (m_x11.size() > 0) {
        obj.insert(QString("x11"), ::OpenAPI::toJsonValue(m_x11));
    }
    if (m_x11_magic_cookie_isSet) {
        obj.insert(QString("x11_magic_cookie"), ::OpenAPI::toJsonValue(m_x11_magic_cookie));
    }
    if (m_x11_target_host_isSet) {
        obj.insert(QString("x11_target_host"), ::OpenAPI::toJsonValue(m_x11_target_host));
    }
    if (m_x11_target_port_isSet) {
        obj.insert(QString("x11_target_port"), ::OpenAPI::toJsonValue(m_x11_target_port));
    }
    return obj;
}

QString OAIV0_0_39_job_desc_msg::getAccount() const {
    return m_account;
}
void OAIV0_0_39_job_desc_msg::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_account_Set() const{
    return m_account_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIV0_0_39_job_desc_msg::getAccountGatherFrequency() const {
    return m_account_gather_frequency;
}
void OAIV0_0_39_job_desc_msg::setAccountGatherFrequency(const QString &account_gather_frequency) {
    m_account_gather_frequency = account_gather_frequency;
    m_account_gather_frequency_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_account_gather_frequency_Set() const{
    return m_account_gather_frequency_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_account_gather_frequency_Valid() const{
    return m_account_gather_frequency_isValid;
}

QString OAIV0_0_39_job_desc_msg::getAdminComment() const {
    return m_admin_comment;
}
void OAIV0_0_39_job_desc_msg::setAdminComment(const QString &admin_comment) {
    m_admin_comment = admin_comment;
    m_admin_comment_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_admin_comment_Set() const{
    return m_admin_comment_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_admin_comment_Valid() const{
    return m_admin_comment_isValid;
}

QString OAIV0_0_39_job_desc_msg::getAllocationNodeList() const {
    return m_allocation_node_list;
}
void OAIV0_0_39_job_desc_msg::setAllocationNodeList(const QString &allocation_node_list) {
    m_allocation_node_list = allocation_node_list;
    m_allocation_node_list_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_allocation_node_list_Set() const{
    return m_allocation_node_list_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_allocation_node_list_Valid() const{
    return m_allocation_node_list_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getAllocationNodePort() const {
    return m_allocation_node_port;
}
void OAIV0_0_39_job_desc_msg::setAllocationNodePort(const qint32 &allocation_node_port) {
    m_allocation_node_port = allocation_node_port;
    m_allocation_node_port_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_allocation_node_port_Set() const{
    return m_allocation_node_port_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_allocation_node_port_Valid() const{
    return m_allocation_node_port_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getArgv() const {
    return m_argv;
}
void OAIV0_0_39_job_desc_msg::setArgv(const QList<QString> &argv) {
    m_argv = argv;
    m_argv_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_argv_Set() const{
    return m_argv_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_argv_Valid() const{
    return m_argv_isValid;
}

QString OAIV0_0_39_job_desc_msg::getArray() const {
    return m_array;
}
void OAIV0_0_39_job_desc_msg::setArray(const QString &array) {
    m_array = array;
    m_array_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_array_Set() const{
    return m_array_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_array_Valid() const{
    return m_array_isValid;
}

QString OAIV0_0_39_job_desc_msg::getBatchFeatures() const {
    return m_batch_features;
}
void OAIV0_0_39_job_desc_msg::setBatchFeatures(const QString &batch_features) {
    m_batch_features = batch_features;
    m_batch_features_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_batch_features_Set() const{
    return m_batch_features_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_batch_features_Valid() const{
    return m_batch_features_isValid;
}

qint64 OAIV0_0_39_job_desc_msg::getBeginTime() const {
    return m_begin_time;
}
void OAIV0_0_39_job_desc_msg::setBeginTime(const qint64 &begin_time) {
    m_begin_time = begin_time;
    m_begin_time_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_begin_time_Set() const{
    return m_begin_time_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_begin_time_Valid() const{
    return m_begin_time_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getFlags() const {
    return m_flags;
}
void OAIV0_0_39_job_desc_msg::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIV0_0_39_job_desc_msg::getBurstBuffer() const {
    return m_burst_buffer;
}
void OAIV0_0_39_job_desc_msg::setBurstBuffer(const QString &burst_buffer) {
    m_burst_buffer = burst_buffer;
    m_burst_buffer_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_burst_buffer_Set() const{
    return m_burst_buffer_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_burst_buffer_Valid() const{
    return m_burst_buffer_isValid;
}

QString OAIV0_0_39_job_desc_msg::getClusters() const {
    return m_clusters;
}
void OAIV0_0_39_job_desc_msg::setClusters(const QString &clusters) {
    m_clusters = clusters;
    m_clusters_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_clusters_Set() const{
    return m_clusters_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_clusters_Valid() const{
    return m_clusters_isValid;
}

QString OAIV0_0_39_job_desc_msg::getClusterConstraint() const {
    return m_cluster_constraint;
}
void OAIV0_0_39_job_desc_msg::setClusterConstraint(const QString &cluster_constraint) {
    m_cluster_constraint = cluster_constraint;
    m_cluster_constraint_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_cluster_constraint_Set() const{
    return m_cluster_constraint_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_cluster_constraint_Valid() const{
    return m_cluster_constraint_isValid;
}

QString OAIV0_0_39_job_desc_msg::getComment() const {
    return m_comment;
}
void OAIV0_0_39_job_desc_msg::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIV0_0_39_job_desc_msg::isContiguous() const {
    return m_contiguous;
}
void OAIV0_0_39_job_desc_msg::setContiguous(const bool &contiguous) {
    m_contiguous = contiguous;
    m_contiguous_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_contiguous_Set() const{
    return m_contiguous_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_contiguous_Valid() const{
    return m_contiguous_isValid;
}

QString OAIV0_0_39_job_desc_msg::getContainer() const {
    return m_container;
}
void OAIV0_0_39_job_desc_msg::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_container_Set() const{
    return m_container_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIV0_0_39_job_desc_msg::getContainerId() const {
    return m_container_id;
}
void OAIV0_0_39_job_desc_msg::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_container_id_Valid() const{
    return m_container_id_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getCoreSpecification() const {
    return m_core_specification;
}
void OAIV0_0_39_job_desc_msg::setCoreSpecification(const qint32 &core_specification) {
    m_core_specification = core_specification;
    m_core_specification_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_core_specification_Set() const{
    return m_core_specification_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_core_specification_Valid() const{
    return m_core_specification_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getThreadSpecification() const {
    return m_thread_specification;
}
void OAIV0_0_39_job_desc_msg::setThreadSpecification(const qint32 &thread_specification) {
    m_thread_specification = thread_specification;
    m_thread_specification_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_thread_specification_Set() const{
    return m_thread_specification_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_thread_specification_Valid() const{
    return m_thread_specification_isValid;
}

QString OAIV0_0_39_job_desc_msg::getCpuBinding() const {
    return m_cpu_binding;
}
void OAIV0_0_39_job_desc_msg::setCpuBinding(const QString &cpu_binding) {
    m_cpu_binding = cpu_binding;
    m_cpu_binding_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_cpu_binding_Set() const{
    return m_cpu_binding_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_cpu_binding_Valid() const{
    return m_cpu_binding_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getCpuBindingFlags() const {
    return m_cpu_binding_flags;
}
void OAIV0_0_39_job_desc_msg::setCpuBindingFlags(const QList<QString> &cpu_binding_flags) {
    m_cpu_binding_flags = cpu_binding_flags;
    m_cpu_binding_flags_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_cpu_binding_flags_Set() const{
    return m_cpu_binding_flags_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_cpu_binding_flags_Valid() const{
    return m_cpu_binding_flags_isValid;
}

QString OAIV0_0_39_job_desc_msg::getCpuFrequency() const {
    return m_cpu_frequency;
}
void OAIV0_0_39_job_desc_msg::setCpuFrequency(const QString &cpu_frequency) {
    m_cpu_frequency = cpu_frequency;
    m_cpu_frequency_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_cpu_frequency_Set() const{
    return m_cpu_frequency_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_cpu_frequency_Valid() const{
    return m_cpu_frequency_isValid;
}

QString OAIV0_0_39_job_desc_msg::getCpusPerTres() const {
    return m_cpus_per_tres;
}
void OAIV0_0_39_job_desc_msg::setCpusPerTres(const QString &cpus_per_tres) {
    m_cpus_per_tres = cpus_per_tres;
    m_cpus_per_tres_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_cpus_per_tres_Set() const{
    return m_cpus_per_tres_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_cpus_per_tres_Valid() const{
    return m_cpus_per_tres_isValid;
}

OAIV0_0_39_cron_entry OAIV0_0_39_job_desc_msg::getCrontab() const {
    return m_crontab;
}
void OAIV0_0_39_job_desc_msg::setCrontab(const OAIV0_0_39_cron_entry &crontab) {
    m_crontab = crontab;
    m_crontab_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_crontab_Set() const{
    return m_crontab_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_crontab_Valid() const{
    return m_crontab_isValid;
}

qint64 OAIV0_0_39_job_desc_msg::getDeadline() const {
    return m_deadline;
}
void OAIV0_0_39_job_desc_msg::setDeadline(const qint64 &deadline) {
    m_deadline = deadline;
    m_deadline_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_deadline_Set() const{
    return m_deadline_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_deadline_Valid() const{
    return m_deadline_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getDelayBoot() const {
    return m_delay_boot;
}
void OAIV0_0_39_job_desc_msg::setDelayBoot(const qint32 &delay_boot) {
    m_delay_boot = delay_boot;
    m_delay_boot_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_delay_boot_Set() const{
    return m_delay_boot_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_delay_boot_Valid() const{
    return m_delay_boot_isValid;
}

QString OAIV0_0_39_job_desc_msg::getDependency() const {
    return m_dependency;
}
void OAIV0_0_39_job_desc_msg::setDependency(const QString &dependency) {
    m_dependency = dependency;
    m_dependency_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_dependency_Set() const{
    return m_dependency_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_dependency_Valid() const{
    return m_dependency_isValid;
}

qint64 OAIV0_0_39_job_desc_msg::getEndTime() const {
    return m_end_time;
}
void OAIV0_0_39_job_desc_msg::setEndTime(const qint64 &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getEnvironment() const {
    return m_environment;
}
void OAIV0_0_39_job_desc_msg::setEnvironment(const QList<QString> &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getExcludedNodes() const {
    return m_excluded_nodes;
}
void OAIV0_0_39_job_desc_msg::setExcludedNodes(const QList<QString> &excluded_nodes) {
    m_excluded_nodes = excluded_nodes;
    m_excluded_nodes_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_excluded_nodes_Set() const{
    return m_excluded_nodes_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_excluded_nodes_Valid() const{
    return m_excluded_nodes_isValid;
}

QString OAIV0_0_39_job_desc_msg::getExtra() const {
    return m_extra;
}
void OAIV0_0_39_job_desc_msg::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_extra_Valid() const{
    return m_extra_isValid;
}

QString OAIV0_0_39_job_desc_msg::getConstraints() const {
    return m_constraints;
}
void OAIV0_0_39_job_desc_msg::setConstraints(const QString &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QString OAIV0_0_39_job_desc_msg::getGroupId() const {
    return m_group_id;
}
void OAIV0_0_39_job_desc_msg::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_group_id_Valid() const{
    return m_group_id_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getHetjobGroup() const {
    return m_hetjob_group;
}
void OAIV0_0_39_job_desc_msg::setHetjobGroup(const qint32 &hetjob_group) {
    m_hetjob_group = hetjob_group;
    m_hetjob_group_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_hetjob_group_Set() const{
    return m_hetjob_group_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_hetjob_group_Valid() const{
    return m_hetjob_group_isValid;
}

bool OAIV0_0_39_job_desc_msg::isImmediate() const {
    return m_immediate;
}
void OAIV0_0_39_job_desc_msg::setImmediate(const bool &immediate) {
    m_immediate = immediate;
    m_immediate_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_immediate_Set() const{
    return m_immediate_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_immediate_Valid() const{
    return m_immediate_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getJobId() const {
    return m_job_id;
}
void OAIV0_0_39_job_desc_msg::setJobId(const qint32 &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_job_id_Valid() const{
    return m_job_id_isValid;
}

bool OAIV0_0_39_job_desc_msg::isKillOnNodeFail() const {
    return m_kill_on_node_fail;
}
void OAIV0_0_39_job_desc_msg::setKillOnNodeFail(const bool &kill_on_node_fail) {
    m_kill_on_node_fail = kill_on_node_fail;
    m_kill_on_node_fail_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_kill_on_node_fail_Set() const{
    return m_kill_on_node_fail_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_kill_on_node_fail_Valid() const{
    return m_kill_on_node_fail_isValid;
}

QString OAIV0_0_39_job_desc_msg::getLicenses() const {
    return m_licenses;
}
void OAIV0_0_39_job_desc_msg::setLicenses(const QString &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_licenses_Valid() const{
    return m_licenses_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getMailType() const {
    return m_mail_type;
}
void OAIV0_0_39_job_desc_msg::setMailType(const QList<QString> &mail_type) {
    m_mail_type = mail_type;
    m_mail_type_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_mail_type_Set() const{
    return m_mail_type_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_mail_type_Valid() const{
    return m_mail_type_isValid;
}

QString OAIV0_0_39_job_desc_msg::getMailUser() const {
    return m_mail_user;
}
void OAIV0_0_39_job_desc_msg::setMailUser(const QString &mail_user) {
    m_mail_user = mail_user;
    m_mail_user_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_mail_user_Set() const{
    return m_mail_user_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_mail_user_Valid() const{
    return m_mail_user_isValid;
}

QString OAIV0_0_39_job_desc_msg::getMcsLabel() const {
    return m_mcs_label;
}
void OAIV0_0_39_job_desc_msg::setMcsLabel(const QString &mcs_label) {
    m_mcs_label = mcs_label;
    m_mcs_label_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_mcs_label_Set() const{
    return m_mcs_label_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_mcs_label_Valid() const{
    return m_mcs_label_isValid;
}

QString OAIV0_0_39_job_desc_msg::getMemoryBinding() const {
    return m_memory_binding;
}
void OAIV0_0_39_job_desc_msg::setMemoryBinding(const QString &memory_binding) {
    m_memory_binding = memory_binding;
    m_memory_binding_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_memory_binding_Set() const{
    return m_memory_binding_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_memory_binding_Valid() const{
    return m_memory_binding_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getMemoryBindingType() const {
    return m_memory_binding_type;
}
void OAIV0_0_39_job_desc_msg::setMemoryBindingType(const QList<QString> &memory_binding_type) {
    m_memory_binding_type = memory_binding_type;
    m_memory_binding_type_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_memory_binding_type_Set() const{
    return m_memory_binding_type_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_memory_binding_type_Valid() const{
    return m_memory_binding_type_isValid;
}

QString OAIV0_0_39_job_desc_msg::getMemoryPerTres() const {
    return m_memory_per_tres;
}
void OAIV0_0_39_job_desc_msg::setMemoryPerTres(const QString &memory_per_tres) {
    m_memory_per_tres = memory_per_tres;
    m_memory_per_tres_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_memory_per_tres_Set() const{
    return m_memory_per_tres_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_memory_per_tres_Valid() const{
    return m_memory_per_tres_isValid;
}

QString OAIV0_0_39_job_desc_msg::getName() const {
    return m_name;
}
void OAIV0_0_39_job_desc_msg::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIV0_0_39_job_desc_msg::getNetwork() const {
    return m_network;
}
void OAIV0_0_39_job_desc_msg::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_network_Set() const{
    return m_network_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_network_Valid() const{
    return m_network_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getNice() const {
    return m_nice;
}
void OAIV0_0_39_job_desc_msg::setNice(const qint32 &nice) {
    m_nice = nice;
    m_nice_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_nice_Set() const{
    return m_nice_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_nice_Valid() const{
    return m_nice_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getTasks() const {
    return m_tasks;
}
void OAIV0_0_39_job_desc_msg::setTasks(const qint32 &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_Valid() const{
    return m_tasks_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getOpenMode() const {
    return m_open_mode;
}
void OAIV0_0_39_job_desc_msg::setOpenMode(const QList<QString> &open_mode) {
    m_open_mode = open_mode;
    m_open_mode_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_open_mode_Set() const{
    return m_open_mode_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_open_mode_Valid() const{
    return m_open_mode_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getReservePorts() const {
    return m_reserve_ports;
}
void OAIV0_0_39_job_desc_msg::setReservePorts(const qint32 &reserve_ports) {
    m_reserve_ports = reserve_ports;
    m_reserve_ports_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_reserve_ports_Set() const{
    return m_reserve_ports_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_reserve_ports_Valid() const{
    return m_reserve_ports_isValid;
}

bool OAIV0_0_39_job_desc_msg::isOvercommit() const {
    return m_overcommit;
}
void OAIV0_0_39_job_desc_msg::setOvercommit(const bool &overcommit) {
    m_overcommit = overcommit;
    m_overcommit_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_overcommit_Set() const{
    return m_overcommit_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_overcommit_Valid() const{
    return m_overcommit_isValid;
}

QString OAIV0_0_39_job_desc_msg::getPartition() const {
    return m_partition;
}
void OAIV0_0_39_job_desc_msg::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_partition_Valid() const{
    return m_partition_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getDistributionPlaneSize() const {
    return m_distribution_plane_size;
}
void OAIV0_0_39_job_desc_msg::setDistributionPlaneSize(const qint32 &distribution_plane_size) {
    m_distribution_plane_size = distribution_plane_size;
    m_distribution_plane_size_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_distribution_plane_size_Set() const{
    return m_distribution_plane_size_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_distribution_plane_size_Valid() const{
    return m_distribution_plane_size_isValid;
}

QList<QJsonValue> OAIV0_0_39_job_desc_msg::getPowerFlags() const {
    return m_power_flags;
}
void OAIV0_0_39_job_desc_msg::setPowerFlags(const QList<QJsonValue> &power_flags) {
    m_power_flags = power_flags;
    m_power_flags_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_power_flags_Set() const{
    return m_power_flags_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_power_flags_Valid() const{
    return m_power_flags_isValid;
}

QString OAIV0_0_39_job_desc_msg::getPrefer() const {
    return m_prefer;
}
void OAIV0_0_39_job_desc_msg::setPrefer(const QString &prefer) {
    m_prefer = prefer;
    m_prefer_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_prefer_Set() const{
    return m_prefer_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_prefer_Valid() const{
    return m_prefer_isValid;
}

bool OAIV0_0_39_job_desc_msg::isHold() const {
    return m_hold;
}
void OAIV0_0_39_job_desc_msg::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIV0_0_39_uint32_no_val OAIV0_0_39_job_desc_msg::getPriority() const {
    return m_priority;
}
void OAIV0_0_39_job_desc_msg::setPriority(const OAIV0_0_39_uint32_no_val &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getProfile() const {
    return m_profile;
}
void OAIV0_0_39_job_desc_msg::setProfile(const QList<QString> &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_profile_Valid() const{
    return m_profile_isValid;
}

QString OAIV0_0_39_job_desc_msg::getQos() const {
    return m_qos;
}
void OAIV0_0_39_job_desc_msg::setQos(const QString &qos) {
    m_qos = qos;
    m_qos_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_qos_Set() const{
    return m_qos_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_qos_Valid() const{
    return m_qos_isValid;
}

bool OAIV0_0_39_job_desc_msg::isReboot() const {
    return m_reboot;
}
void OAIV0_0_39_job_desc_msg::setReboot(const bool &reboot) {
    m_reboot = reboot;
    m_reboot_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_reboot_Set() const{
    return m_reboot_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_reboot_Valid() const{
    return m_reboot_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getRequiredNodes() const {
    return m_required_nodes;
}
void OAIV0_0_39_job_desc_msg::setRequiredNodes(const QList<QString> &required_nodes) {
    m_required_nodes = required_nodes;
    m_required_nodes_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_required_nodes_Set() const{
    return m_required_nodes_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_required_nodes_Valid() const{
    return m_required_nodes_isValid;
}

bool OAIV0_0_39_job_desc_msg::isRequeue() const {
    return m_requeue;
}
void OAIV0_0_39_job_desc_msg::setRequeue(const bool &requeue) {
    m_requeue = requeue;
    m_requeue_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_requeue_Set() const{
    return m_requeue_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_requeue_Valid() const{
    return m_requeue_isValid;
}

QString OAIV0_0_39_job_desc_msg::getReservation() const {
    return m_reservation;
}
void OAIV0_0_39_job_desc_msg::setReservation(const QString &reservation) {
    m_reservation = reservation;
    m_reservation_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_reservation_Set() const{
    return m_reservation_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_reservation_Valid() const{
    return m_reservation_isValid;
}

QString OAIV0_0_39_job_desc_msg::getScript() const {
    return m_script;
}
void OAIV0_0_39_job_desc_msg::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_script_Set() const{
    return m_script_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_script_Valid() const{
    return m_script_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getShared() const {
    return m_shared;
}
void OAIV0_0_39_job_desc_msg::setShared(const QList<QString> &shared) {
    m_shared = shared;
    m_shared_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_shared_Set() const{
    return m_shared_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_shared_Valid() const{
    return m_shared_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getExclusive() const {
    return m_exclusive;
}
void OAIV0_0_39_job_desc_msg::setExclusive(const QList<QString> &exclusive) {
    m_exclusive = exclusive;
    m_exclusive_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_exclusive_Set() const{
    return m_exclusive_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_exclusive_Valid() const{
    return m_exclusive_isValid;
}

bool OAIV0_0_39_job_desc_msg::isOversubscribe() const {
    return m_oversubscribe;
}
void OAIV0_0_39_job_desc_msg::setOversubscribe(const bool &oversubscribe) {
    m_oversubscribe = oversubscribe;
    m_oversubscribe_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_oversubscribe_Set() const{
    return m_oversubscribe_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_oversubscribe_Valid() const{
    return m_oversubscribe_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getSiteFactor() const {
    return m_site_factor;
}
void OAIV0_0_39_job_desc_msg::setSiteFactor(const qint32 &site_factor) {
    m_site_factor = site_factor;
    m_site_factor_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_site_factor_Set() const{
    return m_site_factor_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_site_factor_Valid() const{
    return m_site_factor_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getSpankEnvironment() const {
    return m_spank_environment;
}
void OAIV0_0_39_job_desc_msg::setSpankEnvironment(const QList<QString> &spank_environment) {
    m_spank_environment = spank_environment;
    m_spank_environment_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_spank_environment_Set() const{
    return m_spank_environment_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_spank_environment_Valid() const{
    return m_spank_environment_isValid;
}

QString OAIV0_0_39_job_desc_msg::getDistribution() const {
    return m_distribution;
}
void OAIV0_0_39_job_desc_msg::setDistribution(const QString &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_distribution_Valid() const{
    return m_distribution_isValid;
}

OAIV0_0_39_uint32_no_val OAIV0_0_39_job_desc_msg::getTimeLimit() const {
    return m_time_limit;
}
void OAIV0_0_39_job_desc_msg::setTimeLimit(const OAIV0_0_39_uint32_no_val &time_limit) {
    m_time_limit = time_limit;
    m_time_limit_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_time_limit_Set() const{
    return m_time_limit_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_time_limit_Valid() const{
    return m_time_limit_isValid;
}

OAIV0_0_39_uint32_no_val OAIV0_0_39_job_desc_msg::getTimeMinimum() const {
    return m_time_minimum;
}
void OAIV0_0_39_job_desc_msg::setTimeMinimum(const OAIV0_0_39_uint32_no_val &time_minimum) {
    m_time_minimum = time_minimum;
    m_time_minimum_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_time_minimum_Set() const{
    return m_time_minimum_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_time_minimum_Valid() const{
    return m_time_minimum_isValid;
}

QString OAIV0_0_39_job_desc_msg::getTresBind() const {
    return m_tres_bind;
}
void OAIV0_0_39_job_desc_msg::setTresBind(const QString &tres_bind) {
    m_tres_bind = tres_bind;
    m_tres_bind_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tres_bind_Set() const{
    return m_tres_bind_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tres_bind_Valid() const{
    return m_tres_bind_isValid;
}

QString OAIV0_0_39_job_desc_msg::getTresFreq() const {
    return m_tres_freq;
}
void OAIV0_0_39_job_desc_msg::setTresFreq(const QString &tres_freq) {
    m_tres_freq = tres_freq;
    m_tres_freq_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tres_freq_Set() const{
    return m_tres_freq_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tres_freq_Valid() const{
    return m_tres_freq_isValid;
}

QString OAIV0_0_39_job_desc_msg::getTresPerJob() const {
    return m_tres_per_job;
}
void OAIV0_0_39_job_desc_msg::setTresPerJob(const QString &tres_per_job) {
    m_tres_per_job = tres_per_job;
    m_tres_per_job_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tres_per_job_Set() const{
    return m_tres_per_job_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tres_per_job_Valid() const{
    return m_tres_per_job_isValid;
}

QString OAIV0_0_39_job_desc_msg::getTresPerNode() const {
    return m_tres_per_node;
}
void OAIV0_0_39_job_desc_msg::setTresPerNode(const QString &tres_per_node) {
    m_tres_per_node = tres_per_node;
    m_tres_per_node_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tres_per_node_Set() const{
    return m_tres_per_node_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tres_per_node_Valid() const{
    return m_tres_per_node_isValid;
}

QString OAIV0_0_39_job_desc_msg::getTresPerSocket() const {
    return m_tres_per_socket;
}
void OAIV0_0_39_job_desc_msg::setTresPerSocket(const QString &tres_per_socket) {
    m_tres_per_socket = tres_per_socket;
    m_tres_per_socket_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tres_per_socket_Set() const{
    return m_tres_per_socket_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tres_per_socket_Valid() const{
    return m_tres_per_socket_isValid;
}

QString OAIV0_0_39_job_desc_msg::getTresPerTask() const {
    return m_tres_per_task;
}
void OAIV0_0_39_job_desc_msg::setTresPerTask(const QString &tres_per_task) {
    m_tres_per_task = tres_per_task;
    m_tres_per_task_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tres_per_task_Set() const{
    return m_tres_per_task_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tres_per_task_Valid() const{
    return m_tres_per_task_isValid;
}

QString OAIV0_0_39_job_desc_msg::getUserId() const {
    return m_user_id;
}
void OAIV0_0_39_job_desc_msg::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIV0_0_39_job_desc_msg::isWaitAllNodes() const {
    return m_wait_all_nodes;
}
void OAIV0_0_39_job_desc_msg::setWaitAllNodes(const bool &wait_all_nodes) {
    m_wait_all_nodes = wait_all_nodes;
    m_wait_all_nodes_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_wait_all_nodes_Set() const{
    return m_wait_all_nodes_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_wait_all_nodes_Valid() const{
    return m_wait_all_nodes_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getKillWarningFlags() const {
    return m_kill_warning_flags;
}
void OAIV0_0_39_job_desc_msg::setKillWarningFlags(const QList<QString> &kill_warning_flags) {
    m_kill_warning_flags = kill_warning_flags;
    m_kill_warning_flags_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_kill_warning_flags_Set() const{
    return m_kill_warning_flags_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_kill_warning_flags_Valid() const{
    return m_kill_warning_flags_isValid;
}

QString OAIV0_0_39_job_desc_msg::getKillWarningSignal() const {
    return m_kill_warning_signal;
}
void OAIV0_0_39_job_desc_msg::setKillWarningSignal(const QString &kill_warning_signal) {
    m_kill_warning_signal = kill_warning_signal;
    m_kill_warning_signal_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_kill_warning_signal_Set() const{
    return m_kill_warning_signal_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_kill_warning_signal_Valid() const{
    return m_kill_warning_signal_isValid;
}

OAIV0_0_39_uint16_no_val OAIV0_0_39_job_desc_msg::getKillWarningDelay() const {
    return m_kill_warning_delay;
}
void OAIV0_0_39_job_desc_msg::setKillWarningDelay(const OAIV0_0_39_uint16_no_val &kill_warning_delay) {
    m_kill_warning_delay = kill_warning_delay;
    m_kill_warning_delay_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_kill_warning_delay_Set() const{
    return m_kill_warning_delay_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_kill_warning_delay_Valid() const{
    return m_kill_warning_delay_isValid;
}

QString OAIV0_0_39_job_desc_msg::getCurrentWorkingDirectory() const {
    return m_current_working_directory;
}
void OAIV0_0_39_job_desc_msg::setCurrentWorkingDirectory(const QString &current_working_directory) {
    m_current_working_directory = current_working_directory;
    m_current_working_directory_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_current_working_directory_Set() const{
    return m_current_working_directory_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_current_working_directory_Valid() const{
    return m_current_working_directory_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getCpusPerTask() const {
    return m_cpus_per_task;
}
void OAIV0_0_39_job_desc_msg::setCpusPerTask(const qint32 &cpus_per_task) {
    m_cpus_per_task = cpus_per_task;
    m_cpus_per_task_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_cpus_per_task_Set() const{
    return m_cpus_per_task_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_cpus_per_task_Valid() const{
    return m_cpus_per_task_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getMinimumCpus() const {
    return m_minimum_cpus;
}
void OAIV0_0_39_job_desc_msg::setMinimumCpus(const qint32 &minimum_cpus) {
    m_minimum_cpus = minimum_cpus;
    m_minimum_cpus_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_cpus_Set() const{
    return m_minimum_cpus_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_cpus_Valid() const{
    return m_minimum_cpus_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getMaximumCpus() const {
    return m_maximum_cpus;
}
void OAIV0_0_39_job_desc_msg::setMaximumCpus(const qint32 &maximum_cpus) {
    m_maximum_cpus = maximum_cpus;
    m_maximum_cpus_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_maximum_cpus_Set() const{
    return m_maximum_cpus_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_maximum_cpus_Valid() const{
    return m_maximum_cpus_isValid;
}

QString OAIV0_0_39_job_desc_msg::getNodes() const {
    return m_nodes;
}
void OAIV0_0_39_job_desc_msg::setNodes(const QString &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_nodes_Valid() const{
    return m_nodes_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getMinimumNodes() const {
    return m_minimum_nodes;
}
void OAIV0_0_39_job_desc_msg::setMinimumNodes(const qint32 &minimum_nodes) {
    m_minimum_nodes = minimum_nodes;
    m_minimum_nodes_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_nodes_Set() const{
    return m_minimum_nodes_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_nodes_Valid() const{
    return m_minimum_nodes_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getMaximumNodes() const {
    return m_maximum_nodes;
}
void OAIV0_0_39_job_desc_msg::setMaximumNodes(const qint32 &maximum_nodes) {
    m_maximum_nodes = maximum_nodes;
    m_maximum_nodes_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_maximum_nodes_Set() const{
    return m_maximum_nodes_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_maximum_nodes_Valid() const{
    return m_maximum_nodes_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getMinimumBoardsPerNode() const {
    return m_minimum_boards_per_node;
}
void OAIV0_0_39_job_desc_msg::setMinimumBoardsPerNode(const qint32 &minimum_boards_per_node) {
    m_minimum_boards_per_node = minimum_boards_per_node;
    m_minimum_boards_per_node_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_boards_per_node_Set() const{
    return m_minimum_boards_per_node_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_boards_per_node_Valid() const{
    return m_minimum_boards_per_node_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getMinimumSocketsPerBoard() const {
    return m_minimum_sockets_per_board;
}
void OAIV0_0_39_job_desc_msg::setMinimumSocketsPerBoard(const qint32 &minimum_sockets_per_board) {
    m_minimum_sockets_per_board = minimum_sockets_per_board;
    m_minimum_sockets_per_board_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_sockets_per_board_Set() const{
    return m_minimum_sockets_per_board_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_sockets_per_board_Valid() const{
    return m_minimum_sockets_per_board_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getSocketsPerNode() const {
    return m_sockets_per_node;
}
void OAIV0_0_39_job_desc_msg::setSocketsPerNode(const qint32 &sockets_per_node) {
    m_sockets_per_node = sockets_per_node;
    m_sockets_per_node_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_sockets_per_node_Set() const{
    return m_sockets_per_node_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_sockets_per_node_Valid() const{
    return m_sockets_per_node_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getThreadsPerCore() const {
    return m_threads_per_core;
}
void OAIV0_0_39_job_desc_msg::setThreadsPerCore(const qint32 &threads_per_core) {
    m_threads_per_core = threads_per_core;
    m_threads_per_core_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_threads_per_core_Set() const{
    return m_threads_per_core_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_threads_per_core_Valid() const{
    return m_threads_per_core_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getTasksPerNode() const {
    return m_tasks_per_node;
}
void OAIV0_0_39_job_desc_msg::setTasksPerNode(const qint32 &tasks_per_node) {
    m_tasks_per_node = tasks_per_node;
    m_tasks_per_node_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_per_node_Set() const{
    return m_tasks_per_node_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_per_node_Valid() const{
    return m_tasks_per_node_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getTasksPerSocket() const {
    return m_tasks_per_socket;
}
void OAIV0_0_39_job_desc_msg::setTasksPerSocket(const qint32 &tasks_per_socket) {
    m_tasks_per_socket = tasks_per_socket;
    m_tasks_per_socket_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_per_socket_Set() const{
    return m_tasks_per_socket_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_per_socket_Valid() const{
    return m_tasks_per_socket_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getTasksPerCore() const {
    return m_tasks_per_core;
}
void OAIV0_0_39_job_desc_msg::setTasksPerCore(const qint32 &tasks_per_core) {
    m_tasks_per_core = tasks_per_core;
    m_tasks_per_core_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_per_core_Set() const{
    return m_tasks_per_core_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_per_core_Valid() const{
    return m_tasks_per_core_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getTasksPerBoard() const {
    return m_tasks_per_board;
}
void OAIV0_0_39_job_desc_msg::setTasksPerBoard(const qint32 &tasks_per_board) {
    m_tasks_per_board = tasks_per_board;
    m_tasks_per_board_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_per_board_Set() const{
    return m_tasks_per_board_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_tasks_per_board_Valid() const{
    return m_tasks_per_board_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getNtasksPerTres() const {
    return m_ntasks_per_tres;
}
void OAIV0_0_39_job_desc_msg::setNtasksPerTres(const qint32 &ntasks_per_tres) {
    m_ntasks_per_tres = ntasks_per_tres;
    m_ntasks_per_tres_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_ntasks_per_tres_Set() const{
    return m_ntasks_per_tres_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_ntasks_per_tres_Valid() const{
    return m_ntasks_per_tres_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getMinimumCpusPerNode() const {
    return m_minimum_cpus_per_node;
}
void OAIV0_0_39_job_desc_msg::setMinimumCpusPerNode(const qint32 &minimum_cpus_per_node) {
    m_minimum_cpus_per_node = minimum_cpus_per_node;
    m_minimum_cpus_per_node_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_cpus_per_node_Set() const{
    return m_minimum_cpus_per_node_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_minimum_cpus_per_node_Valid() const{
    return m_minimum_cpus_per_node_isValid;
}

OAIV0_0_39_uint64_no_val OAIV0_0_39_job_desc_msg::getMemoryPerCpu() const {
    return m_memory_per_cpu;
}
void OAIV0_0_39_job_desc_msg::setMemoryPerCpu(const OAIV0_0_39_uint64_no_val &memory_per_cpu) {
    m_memory_per_cpu = memory_per_cpu;
    m_memory_per_cpu_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_memory_per_cpu_Set() const{
    return m_memory_per_cpu_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_memory_per_cpu_Valid() const{
    return m_memory_per_cpu_isValid;
}

OAIV0_0_39_uint64_no_val OAIV0_0_39_job_desc_msg::getMemoryPerNode() const {
    return m_memory_per_node;
}
void OAIV0_0_39_job_desc_msg::setMemoryPerNode(const OAIV0_0_39_uint64_no_val &memory_per_node) {
    m_memory_per_node = memory_per_node;
    m_memory_per_node_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_memory_per_node_Set() const{
    return m_memory_per_node_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_memory_per_node_Valid() const{
    return m_memory_per_node_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getTemporaryDiskPerNode() const {
    return m_temporary_disk_per_node;
}
void OAIV0_0_39_job_desc_msg::setTemporaryDiskPerNode(const qint32 &temporary_disk_per_node) {
    m_temporary_disk_per_node = temporary_disk_per_node;
    m_temporary_disk_per_node_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_temporary_disk_per_node_Set() const{
    return m_temporary_disk_per_node_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_temporary_disk_per_node_Valid() const{
    return m_temporary_disk_per_node_isValid;
}

QString OAIV0_0_39_job_desc_msg::getSelinuxContext() const {
    return m_selinux_context;
}
void OAIV0_0_39_job_desc_msg::setSelinuxContext(const QString &selinux_context) {
    m_selinux_context = selinux_context;
    m_selinux_context_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_selinux_context_Set() const{
    return m_selinux_context_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_selinux_context_Valid() const{
    return m_selinux_context_isValid;
}

OAIV0_0_39_uint32_no_val OAIV0_0_39_job_desc_msg::getRequiredSwitches() const {
    return m_required_switches;
}
void OAIV0_0_39_job_desc_msg::setRequiredSwitches(const OAIV0_0_39_uint32_no_val &required_switches) {
    m_required_switches = required_switches;
    m_required_switches_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_required_switches_Set() const{
    return m_required_switches_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_required_switches_Valid() const{
    return m_required_switches_isValid;
}

QString OAIV0_0_39_job_desc_msg::getStandardError() const {
    return m_standard_error;
}
void OAIV0_0_39_job_desc_msg::setStandardError(const QString &standard_error) {
    m_standard_error = standard_error;
    m_standard_error_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_standard_error_Set() const{
    return m_standard_error_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_standard_error_Valid() const{
    return m_standard_error_isValid;
}

QString OAIV0_0_39_job_desc_msg::getStandardInput() const {
    return m_standard_input;
}
void OAIV0_0_39_job_desc_msg::setStandardInput(const QString &standard_input) {
    m_standard_input = standard_input;
    m_standard_input_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_standard_input_Set() const{
    return m_standard_input_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_standard_input_Valid() const{
    return m_standard_input_isValid;
}

QString OAIV0_0_39_job_desc_msg::getStandardOutput() const {
    return m_standard_output;
}
void OAIV0_0_39_job_desc_msg::setStandardOutput(const QString &standard_output) {
    m_standard_output = standard_output;
    m_standard_output_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_standard_output_Set() const{
    return m_standard_output_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_standard_output_Valid() const{
    return m_standard_output_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getWaitForSwitch() const {
    return m_wait_for_switch;
}
void OAIV0_0_39_job_desc_msg::setWaitForSwitch(const qint32 &wait_for_switch) {
    m_wait_for_switch = wait_for_switch;
    m_wait_for_switch_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_wait_for_switch_Set() const{
    return m_wait_for_switch_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_wait_for_switch_Valid() const{
    return m_wait_for_switch_isValid;
}

QString OAIV0_0_39_job_desc_msg::getWckey() const {
    return m_wckey;
}
void OAIV0_0_39_job_desc_msg::setWckey(const QString &wckey) {
    m_wckey = wckey;
    m_wckey_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_wckey_Set() const{
    return m_wckey_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_wckey_Valid() const{
    return m_wckey_isValid;
}

QList<QString> OAIV0_0_39_job_desc_msg::getX11() const {
    return m_x11;
}
void OAIV0_0_39_job_desc_msg::setX11(const QList<QString> &x11) {
    m_x11 = x11;
    m_x11_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_x11_Set() const{
    return m_x11_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_x11_Valid() const{
    return m_x11_isValid;
}

QString OAIV0_0_39_job_desc_msg::getX11MagicCookie() const {
    return m_x11_magic_cookie;
}
void OAIV0_0_39_job_desc_msg::setX11MagicCookie(const QString &x11_magic_cookie) {
    m_x11_magic_cookie = x11_magic_cookie;
    m_x11_magic_cookie_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_x11_magic_cookie_Set() const{
    return m_x11_magic_cookie_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_x11_magic_cookie_Valid() const{
    return m_x11_magic_cookie_isValid;
}

QString OAIV0_0_39_job_desc_msg::getX11TargetHost() const {
    return m_x11_target_host;
}
void OAIV0_0_39_job_desc_msg::setX11TargetHost(const QString &x11_target_host) {
    m_x11_target_host = x11_target_host;
    m_x11_target_host_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_x11_target_host_Set() const{
    return m_x11_target_host_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_x11_target_host_Valid() const{
    return m_x11_target_host_isValid;
}

qint32 OAIV0_0_39_job_desc_msg::getX11TargetPort() const {
    return m_x11_target_port;
}
void OAIV0_0_39_job_desc_msg::setX11TargetPort(const qint32 &x11_target_port) {
    m_x11_target_port = x11_target_port;
    m_x11_target_port_isSet = true;
}

bool OAIV0_0_39_job_desc_msg::is_x11_target_port_Set() const{
    return m_x11_target_port_isSet;
}

bool OAIV0_0_39_job_desc_msg::is_x11_target_port_Valid() const{
    return m_x11_target_port_isValid;
}

bool OAIV0_0_39_job_desc_msg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_gather_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocation_node_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocation_node_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_argv.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_array_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_burst_buffer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clusters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contiguous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_specification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_specification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_binding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_binding_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus_per_tres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crontab.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_boot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hetjob_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kill_on_node_fail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcs_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_binding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_binding_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_per_tres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_mode.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserve_ports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overcommit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_plane_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_qos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requeue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_oversubscribe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spank_environment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_minimum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_bind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_freq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_per_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_per_socket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_per_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_all_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kill_warning_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kill_warning_signal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kill_warning_delay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_working_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus_per_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_boards_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_sockets_per_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sockets_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threads_per_core_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_per_socket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_per_core_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_per_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ntasks_per_tres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_cpus_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_per_cpu.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_per_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_disk_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selinux_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_switches.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_for_switch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wckey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x11.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_x11_magic_cookie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x11_target_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x11_target_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_39_job_desc_msg::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_environment_isValid && true;
}

} // namespace OpenAPI
