/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV0_0_39_power_mgmt_data.h
 *
 * 
 */

#ifndef OAIV0_0_39_power_mgmt_data_H
#define OAIV0_0_39_power_mgmt_data_H

#include <QJsonObject>

#include "OAIV0_0_39_uint32_no_val.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV0_0_39_uint32_no_val;

class OAIV0_0_39_power_mgmt_data : public OAIObject {
public:
    OAIV0_0_39_power_mgmt_data();
    OAIV0_0_39_power_mgmt_data(QString json);
    ~OAIV0_0_39_power_mgmt_data() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIV0_0_39_uint32_no_val getMaximumWatts() const;
    void setMaximumWatts(const OAIV0_0_39_uint32_no_val &maximum_watts);
    bool is_maximum_watts_Set() const;
    bool is_maximum_watts_Valid() const;

    qint32 getCurrentWatts() const;
    void setCurrentWatts(const qint32 &current_watts);
    bool is_current_watts_Set() const;
    bool is_current_watts_Valid() const;

    qint64 getTotalEnergy() const;
    void setTotalEnergy(const qint64 &total_energy);
    bool is_total_energy_Set() const;
    bool is_total_energy_Valid() const;

    qint32 getNewMaximumWatts() const;
    void setNewMaximumWatts(const qint32 &new_maximum_watts);
    bool is_new_maximum_watts_Set() const;
    bool is_new_maximum_watts_Valid() const;

    qint32 getPeakWatts() const;
    void setPeakWatts(const qint32 &peak_watts);
    bool is_peak_watts_Set() const;
    bool is_peak_watts_Valid() const;

    qint32 getLowestWatts() const;
    void setLowestWatts(const qint32 &lowest_watts);
    bool is_lowest_watts_Set() const;
    bool is_lowest_watts_Valid() const;

    qint64 getNewJobTime() const;
    void setNewJobTime(const qint64 &new_job_time);
    bool is_new_job_time_Set() const;
    bool is_new_job_time_Valid() const;

    qint32 getState() const;
    void setState(const qint32 &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint64 getTimeStartDay() const;
    void setTimeStartDay(const qint64 &time_start_day);
    bool is_time_start_day_Set() const;
    bool is_time_start_day_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIV0_0_39_uint32_no_val m_maximum_watts;
    bool m_maximum_watts_isSet;
    bool m_maximum_watts_isValid;

    qint32 m_current_watts;
    bool m_current_watts_isSet;
    bool m_current_watts_isValid;

    qint64 m_total_energy;
    bool m_total_energy_isSet;
    bool m_total_energy_isValid;

    qint32 m_new_maximum_watts;
    bool m_new_maximum_watts_isSet;
    bool m_new_maximum_watts_isValid;

    qint32 m_peak_watts;
    bool m_peak_watts_isSet;
    bool m_peak_watts_isValid;

    qint32 m_lowest_watts;
    bool m_lowest_watts_isSet;
    bool m_lowest_watts_isValid;

    qint64 m_new_job_time;
    bool m_new_job_time_isSet;
    bool m_new_job_time_isValid;

    qint32 m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint64 m_time_start_day;
    bool m_time_start_day_isSet;
    bool m_time_start_day_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV0_0_39_power_mgmt_data)

#endif // OAIV0_0_39_power_mgmt_data_H
