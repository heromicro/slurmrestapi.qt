/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace hm:slurm:client {

OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults() {
    this->initializeModel();
}

OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::~OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults() {}

void OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::initializeModel() {

    m_memory_per_cpu_isSet = false;
    m_memory_per_cpu_isValid = false;

    m_partition_memory_per_cpu_isSet = false;
    m_partition_memory_per_cpu_isValid = false;

    m_partition_memory_per_node_isSet = false;
    m_partition_memory_per_node_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_job_isSet = false;
    m_job_isValid = false;
}

void OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::fromJsonObject(QJsonObject json) {

    m_memory_per_cpu_isValid = ::hm:slurm:client::fromJsonValue(m_memory_per_cpu, json[QString("memory_per_cpu")]);
    m_memory_per_cpu_isSet = !json[QString("memory_per_cpu")].isNull() && m_memory_per_cpu_isValid;

    m_partition_memory_per_cpu_isValid = ::hm:slurm:client::fromJsonValue(m_partition_memory_per_cpu, json[QString("partition_memory_per_cpu")]);
    m_partition_memory_per_cpu_isSet = !json[QString("partition_memory_per_cpu")].isNull() && m_partition_memory_per_cpu_isValid;

    m_partition_memory_per_node_isValid = ::hm:slurm:client::fromJsonValue(m_partition_memory_per_node, json[QString("partition_memory_per_node")]);
    m_partition_memory_per_node_isSet = !json[QString("partition_memory_per_node")].isNull() && m_partition_memory_per_node_isValid;

    m_time_isValid = ::hm:slurm:client::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_job_isValid = ::hm:slurm:client::fromJsonValue(m_job, json[QString("job")]);
    m_job_isSet = !json[QString("job")].isNull() && m_job_isValid;
}

QString OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::asJsonObject() const {
    QJsonObject obj;
    if (m_memory_per_cpu_isSet) {
        obj.insert(QString("memory_per_cpu"), ::hm:slurm:client::toJsonValue(m_memory_per_cpu));
    }
    if (m_partition_memory_per_cpu.isSet()) {
        obj.insert(QString("partition_memory_per_cpu"), ::hm:slurm:client::toJsonValue(m_partition_memory_per_cpu));
    }
    if (m_partition_memory_per_node.isSet()) {
        obj.insert(QString("partition_memory_per_node"), ::hm:slurm:client::toJsonValue(m_partition_memory_per_node));
    }
    if (m_time.isSet()) {
        obj.insert(QString("time"), ::hm:slurm:client::toJsonValue(m_time));
    }
    if (m_job_isSet) {
        obj.insert(QString("job"), ::hm:slurm:client::toJsonValue(m_job));
    }
    return obj;
}

qint64 OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::getMemoryPerCpu() const {
    return m_memory_per_cpu;
}
void OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::setMemoryPerCpu(const qint64 &memory_per_cpu) {
    m_memory_per_cpu = memory_per_cpu;
    m_memory_per_cpu_isSet = true;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_memory_per_cpu_Set() const{
    return m_memory_per_cpu_isSet;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_memory_per_cpu_Valid() const{
    return m_memory_per_cpu_isValid;
}

OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_cpu OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::getPartitionMemoryPerCpu() const {
    return m_partition_memory_per_cpu;
}
void OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::setPartitionMemoryPerCpu(const OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_cpu &partition_memory_per_cpu) {
    m_partition_memory_per_cpu = partition_memory_per_cpu;
    m_partition_memory_per_cpu_isSet = true;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_partition_memory_per_cpu_Set() const{
    return m_partition_memory_per_cpu_isSet;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_partition_memory_per_cpu_Valid() const{
    return m_partition_memory_per_cpu_isValid;
}

OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_node OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::getPartitionMemoryPerNode() const {
    return m_partition_memory_per_node;
}
void OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::setPartitionMemoryPerNode(const OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_node &partition_memory_per_node) {
    m_partition_memory_per_node = partition_memory_per_node;
    m_partition_memory_per_node_isSet = true;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_partition_memory_per_node_Set() const{
    return m_partition_memory_per_node_isSet;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_partition_memory_per_node_Valid() const{
    return m_partition_memory_per_node_isValid;
}

OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults_time OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::getTime() const {
    return m_time;
}
void OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::setTime(const OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults_time &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_time_Set() const{
    return m_time_isSet;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::getJob() const {
    return m_job;
}
void OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::setJob(const QString &job) {
    m_job = job;
    m_job_isSet = true;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_job_Set() const{
    return m_job_isSet;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::is_job_Valid() const{
    return m_job_isValid;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_memory_per_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_memory_per_cpu.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_memory_per_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_41_openapi_partition_resp_partitions_inner_defaults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace hm:slurm:client
