/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_40_job_res.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_40_job_res::OAIV0_0_40_job_res(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_40_job_res::OAIV0_0_40_job_res() {
    this->initializeModel();
}

OAIV0_0_40_job_res::~OAIV0_0_40_job_res() {}

void OAIV0_0_40_job_res::initializeModel() {

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_allocated_cores_isSet = false;
    m_allocated_cores_isValid = false;

    m_allocated_cpus_isSet = false;
    m_allocated_cpus_isValid = false;

    m_allocated_hosts_isSet = false;
    m_allocated_hosts_isValid = false;

    m_allocated_nodes_isSet = false;
    m_allocated_nodes_isValid = false;
}

void OAIV0_0_40_job_res::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_40_job_res::fromJsonObject(QJsonObject json) {

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_allocated_cores_isValid = ::OpenAPI::fromJsonValue(m_allocated_cores, json[QString("allocated_cores")]);
    m_allocated_cores_isSet = !json[QString("allocated_cores")].isNull() && m_allocated_cores_isValid;

    m_allocated_cpus_isValid = ::OpenAPI::fromJsonValue(m_allocated_cpus, json[QString("allocated_cpus")]);
    m_allocated_cpus_isSet = !json[QString("allocated_cpus")].isNull() && m_allocated_cpus_isValid;

    m_allocated_hosts_isValid = ::OpenAPI::fromJsonValue(m_allocated_hosts, json[QString("allocated_hosts")]);
    m_allocated_hosts_isSet = !json[QString("allocated_hosts")].isNull() && m_allocated_hosts_isValid;

    m_allocated_nodes_isValid = ::OpenAPI::fromJsonValue(m_allocated_nodes, json[QString("allocated_nodes")]);
    m_allocated_nodes_isSet = !json[QString("allocated_nodes")].isNull() && m_allocated_nodes_isValid;
}

QString OAIV0_0_40_job_res::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_40_job_res::asJsonObject() const {
    QJsonObject obj;
    if (m_nodes_isSet) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_allocated_cores_isSet) {
        obj.insert(QString("allocated_cores"), ::OpenAPI::toJsonValue(m_allocated_cores));
    }
    if (m_allocated_cpus_isSet) {
        obj.insert(QString("allocated_cpus"), ::OpenAPI::toJsonValue(m_allocated_cpus));
    }
    if (m_allocated_hosts_isSet) {
        obj.insert(QString("allocated_hosts"), ::OpenAPI::toJsonValue(m_allocated_hosts));
    }
    if (m_allocated_nodes.size() > 0) {
        obj.insert(QString("allocated_nodes"), ::OpenAPI::toJsonValue(m_allocated_nodes));
    }
    return obj;
}

QString OAIV0_0_40_job_res::getNodes() const {
    return m_nodes;
}
void OAIV0_0_40_job_res::setNodes(const QString &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIV0_0_40_job_res::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIV0_0_40_job_res::is_nodes_Valid() const{
    return m_nodes_isValid;
}

qint32 OAIV0_0_40_job_res::getAllocatedCores() const {
    return m_allocated_cores;
}
void OAIV0_0_40_job_res::setAllocatedCores(const qint32 &allocated_cores) {
    m_allocated_cores = allocated_cores;
    m_allocated_cores_isSet = true;
}

bool OAIV0_0_40_job_res::is_allocated_cores_Set() const{
    return m_allocated_cores_isSet;
}

bool OAIV0_0_40_job_res::is_allocated_cores_Valid() const{
    return m_allocated_cores_isValid;
}

qint32 OAIV0_0_40_job_res::getAllocatedCpus() const {
    return m_allocated_cpus;
}
void OAIV0_0_40_job_res::setAllocatedCpus(const qint32 &allocated_cpus) {
    m_allocated_cpus = allocated_cpus;
    m_allocated_cpus_isSet = true;
}

bool OAIV0_0_40_job_res::is_allocated_cpus_Set() const{
    return m_allocated_cpus_isSet;
}

bool OAIV0_0_40_job_res::is_allocated_cpus_Valid() const{
    return m_allocated_cpus_isValid;
}

qint32 OAIV0_0_40_job_res::getAllocatedHosts() const {
    return m_allocated_hosts;
}
void OAIV0_0_40_job_res::setAllocatedHosts(const qint32 &allocated_hosts) {
    m_allocated_hosts = allocated_hosts;
    m_allocated_hosts_isSet = true;
}

bool OAIV0_0_40_job_res::is_allocated_hosts_Set() const{
    return m_allocated_hosts_isSet;
}

bool OAIV0_0_40_job_res::is_allocated_hosts_Valid() const{
    return m_allocated_hosts_isValid;
}

QList<QJsonValue> OAIV0_0_40_job_res::getAllocatedNodes() const {
    return m_allocated_nodes;
}
void OAIV0_0_40_job_res::setAllocatedNodes(const QList<QJsonValue> &allocated_nodes) {
    m_allocated_nodes = allocated_nodes;
    m_allocated_nodes_isSet = true;
}

bool OAIV0_0_40_job_res::is_allocated_nodes_Set() const{
    return m_allocated_nodes_isSet;
}

bool OAIV0_0_40_job_res::is_allocated_nodes_Valid() const{
    return m_allocated_nodes_isValid;
}

bool OAIV0_0_40_job_res::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_hosts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_40_job_res::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
