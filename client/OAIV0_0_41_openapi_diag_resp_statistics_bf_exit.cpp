/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_41_openapi_diag_resp_statistics_bf_exit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::OAIV0_0_41_openapi_diag_resp_statistics_bf_exit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::OAIV0_0_41_openapi_diag_resp_statistics_bf_exit() {
    this->initializeModel();
}

OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::~OAIV0_0_41_openapi_diag_resp_statistics_bf_exit() {}

void OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::initializeModel() {

    m_end_job_queue_isSet = false;
    m_end_job_queue_isValid = false;

    m_bf_max_job_start_isSet = false;
    m_bf_max_job_start_isValid = false;

    m_bf_max_job_test_isSet = false;
    m_bf_max_job_test_isValid = false;

    m_bf_max_time_isSet = false;
    m_bf_max_time_isValid = false;

    m_bf_node_space_size_isSet = false;
    m_bf_node_space_size_isValid = false;

    m_state_changed_isSet = false;
    m_state_changed_isValid = false;
}

void OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::fromJsonObject(QJsonObject json) {

    m_end_job_queue_isValid = ::OpenAPI::fromJsonValue(m_end_job_queue, json[QString("end_job_queue")]);
    m_end_job_queue_isSet = !json[QString("end_job_queue")].isNull() && m_end_job_queue_isValid;

    m_bf_max_job_start_isValid = ::OpenAPI::fromJsonValue(m_bf_max_job_start, json[QString("bf_max_job_start")]);
    m_bf_max_job_start_isSet = !json[QString("bf_max_job_start")].isNull() && m_bf_max_job_start_isValid;

    m_bf_max_job_test_isValid = ::OpenAPI::fromJsonValue(m_bf_max_job_test, json[QString("bf_max_job_test")]);
    m_bf_max_job_test_isSet = !json[QString("bf_max_job_test")].isNull() && m_bf_max_job_test_isValid;

    m_bf_max_time_isValid = ::OpenAPI::fromJsonValue(m_bf_max_time, json[QString("bf_max_time")]);
    m_bf_max_time_isSet = !json[QString("bf_max_time")].isNull() && m_bf_max_time_isValid;

    m_bf_node_space_size_isValid = ::OpenAPI::fromJsonValue(m_bf_node_space_size, json[QString("bf_node_space_size")]);
    m_bf_node_space_size_isSet = !json[QString("bf_node_space_size")].isNull() && m_bf_node_space_size_isValid;

    m_state_changed_isValid = ::OpenAPI::fromJsonValue(m_state_changed, json[QString("state_changed")]);
    m_state_changed_isSet = !json[QString("state_changed")].isNull() && m_state_changed_isValid;
}

QString OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::asJsonObject() const {
    QJsonObject obj;
    if (m_end_job_queue_isSet) {
        obj.insert(QString("end_job_queue"), ::OpenAPI::toJsonValue(m_end_job_queue));
    }
    if (m_bf_max_job_start_isSet) {
        obj.insert(QString("bf_max_job_start"), ::OpenAPI::toJsonValue(m_bf_max_job_start));
    }
    if (m_bf_max_job_test_isSet) {
        obj.insert(QString("bf_max_job_test"), ::OpenAPI::toJsonValue(m_bf_max_job_test));
    }
    if (m_bf_max_time_isSet) {
        obj.insert(QString("bf_max_time"), ::OpenAPI::toJsonValue(m_bf_max_time));
    }
    if (m_bf_node_space_size_isSet) {
        obj.insert(QString("bf_node_space_size"), ::OpenAPI::toJsonValue(m_bf_node_space_size));
    }
    if (m_state_changed_isSet) {
        obj.insert(QString("state_changed"), ::OpenAPI::toJsonValue(m_state_changed));
    }
    return obj;
}

qint32 OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::getEndJobQueue() const {
    return m_end_job_queue;
}
void OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::setEndJobQueue(const qint32 &end_job_queue) {
    m_end_job_queue = end_job_queue;
    m_end_job_queue_isSet = true;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_end_job_queue_Set() const{
    return m_end_job_queue_isSet;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_end_job_queue_Valid() const{
    return m_end_job_queue_isValid;
}

qint32 OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::getBfMaxJobStart() const {
    return m_bf_max_job_start;
}
void OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::setBfMaxJobStart(const qint32 &bf_max_job_start) {
    m_bf_max_job_start = bf_max_job_start;
    m_bf_max_job_start_isSet = true;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_bf_max_job_start_Set() const{
    return m_bf_max_job_start_isSet;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_bf_max_job_start_Valid() const{
    return m_bf_max_job_start_isValid;
}

qint32 OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::getBfMaxJobTest() const {
    return m_bf_max_job_test;
}
void OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::setBfMaxJobTest(const qint32 &bf_max_job_test) {
    m_bf_max_job_test = bf_max_job_test;
    m_bf_max_job_test_isSet = true;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_bf_max_job_test_Set() const{
    return m_bf_max_job_test_isSet;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_bf_max_job_test_Valid() const{
    return m_bf_max_job_test_isValid;
}

qint32 OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::getBfMaxTime() const {
    return m_bf_max_time;
}
void OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::setBfMaxTime(const qint32 &bf_max_time) {
    m_bf_max_time = bf_max_time;
    m_bf_max_time_isSet = true;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_bf_max_time_Set() const{
    return m_bf_max_time_isSet;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_bf_max_time_Valid() const{
    return m_bf_max_time_isValid;
}

qint32 OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::getBfNodeSpaceSize() const {
    return m_bf_node_space_size;
}
void OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::setBfNodeSpaceSize(const qint32 &bf_node_space_size) {
    m_bf_node_space_size = bf_node_space_size;
    m_bf_node_space_size_isSet = true;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_bf_node_space_size_Set() const{
    return m_bf_node_space_size_isSet;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_bf_node_space_size_Valid() const{
    return m_bf_node_space_size_isValid;
}

qint32 OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::getStateChanged() const {
    return m_state_changed;
}
void OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::setStateChanged(const qint32 &state_changed) {
    m_state_changed = state_changed;
    m_state_changed_isSet = true;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_state_changed_Set() const{
    return m_state_changed_isSet;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::is_state_changed_Valid() const{
    return m_state_changed_isValid;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_job_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_max_job_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_max_job_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_max_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_node_space_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_changed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_41_openapi_diag_resp_statistics_bf_exit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
