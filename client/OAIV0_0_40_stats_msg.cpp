/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_40_stats_msg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace hm:slurm:client {

OAIV0_0_40_stats_msg::OAIV0_0_40_stats_msg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_40_stats_msg::OAIV0_0_40_stats_msg() {
    this->initializeModel();
}

OAIV0_0_40_stats_msg::~OAIV0_0_40_stats_msg() {}

void OAIV0_0_40_stats_msg::initializeModel() {

    m_parts_packed_isSet = false;
    m_parts_packed_isValid = false;

    m_req_time_isSet = false;
    m_req_time_isValid = false;

    m_req_time_start_isSet = false;
    m_req_time_start_isValid = false;

    m_server_thread_count_isSet = false;
    m_server_thread_count_isValid = false;

    m_agent_queue_size_isSet = false;
    m_agent_queue_size_isValid = false;

    m_agent_count_isSet = false;
    m_agent_count_isValid = false;

    m_agent_thread_count_isSet = false;
    m_agent_thread_count_isValid = false;

    m_dbd_agent_queue_size_isSet = false;
    m_dbd_agent_queue_size_isValid = false;

    m_gettimeofday_latency_isSet = false;
    m_gettimeofday_latency_isValid = false;

    m_schedule_cycle_max_isSet = false;
    m_schedule_cycle_max_isValid = false;

    m_schedule_cycle_last_isSet = false;
    m_schedule_cycle_last_isValid = false;

    m_schedule_cycle_total_isSet = false;
    m_schedule_cycle_total_isValid = false;

    m_schedule_cycle_mean_isSet = false;
    m_schedule_cycle_mean_isValid = false;

    m_schedule_cycle_mean_depth_isSet = false;
    m_schedule_cycle_mean_depth_isValid = false;

    m_schedule_cycle_per_minute_isSet = false;
    m_schedule_cycle_per_minute_isValid = false;

    m_schedule_queue_length_isSet = false;
    m_schedule_queue_length_isValid = false;

    m_schedule_exit_isSet = false;
    m_schedule_exit_isValid = false;

    m_jobs_submitted_isSet = false;
    m_jobs_submitted_isValid = false;

    m_jobs_started_isSet = false;
    m_jobs_started_isValid = false;

    m_jobs_completed_isSet = false;
    m_jobs_completed_isValid = false;

    m_jobs_canceled_isSet = false;
    m_jobs_canceled_isValid = false;

    m_jobs_failed_isSet = false;
    m_jobs_failed_isValid = false;

    m_jobs_pending_isSet = false;
    m_jobs_pending_isValid = false;

    m_jobs_running_isSet = false;
    m_jobs_running_isValid = false;

    m_job_states_ts_isSet = false;
    m_job_states_ts_isValid = false;

    m_bf_backfilled_jobs_isSet = false;
    m_bf_backfilled_jobs_isValid = false;

    m_bf_last_backfilled_jobs_isSet = false;
    m_bf_last_backfilled_jobs_isValid = false;

    m_bf_backfilled_het_jobs_isSet = false;
    m_bf_backfilled_het_jobs_isValid = false;

    m_bf_cycle_counter_isSet = false;
    m_bf_cycle_counter_isValid = false;

    m_bf_cycle_mean_isSet = false;
    m_bf_cycle_mean_isValid = false;

    m_bf_depth_mean_isSet = false;
    m_bf_depth_mean_isValid = false;

    m_bf_depth_mean_try_isSet = false;
    m_bf_depth_mean_try_isValid = false;

    m_bf_cycle_sum_isSet = false;
    m_bf_cycle_sum_isValid = false;

    m_bf_cycle_last_isSet = false;
    m_bf_cycle_last_isValid = false;

    m_bf_last_depth_isSet = false;
    m_bf_last_depth_isValid = false;

    m_bf_last_depth_try_isSet = false;
    m_bf_last_depth_try_isValid = false;

    m_bf_depth_sum_isSet = false;
    m_bf_depth_sum_isValid = false;

    m_bf_depth_try_sum_isSet = false;
    m_bf_depth_try_sum_isValid = false;

    m_bf_queue_len_isSet = false;
    m_bf_queue_len_isValid = false;

    m_bf_queue_len_mean_isSet = false;
    m_bf_queue_len_mean_isValid = false;

    m_bf_queue_len_sum_isSet = false;
    m_bf_queue_len_sum_isValid = false;

    m_bf_table_size_isSet = false;
    m_bf_table_size_isValid = false;

    m_bf_table_size_mean_isSet = false;
    m_bf_table_size_mean_isValid = false;

    m_bf_when_last_cycle_isSet = false;
    m_bf_when_last_cycle_isValid = false;

    m_bf_active_isSet = false;
    m_bf_active_isValid = false;

    m_bf_exit_isSet = false;
    m_bf_exit_isValid = false;

    m_rpcs_by_message_type_isSet = false;
    m_rpcs_by_message_type_isValid = false;

    m_rpcs_by_user_isSet = false;
    m_rpcs_by_user_isValid = false;
}

void OAIV0_0_40_stats_msg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_40_stats_msg::fromJsonObject(QJsonObject json) {

    m_parts_packed_isValid = ::hm:slurm:client::fromJsonValue(m_parts_packed, json[QString("parts_packed")]);
    m_parts_packed_isSet = !json[QString("parts_packed")].isNull() && m_parts_packed_isValid;

    m_req_time_isValid = ::hm:slurm:client::fromJsonValue(m_req_time, json[QString("req_time")]);
    m_req_time_isSet = !json[QString("req_time")].isNull() && m_req_time_isValid;

    m_req_time_start_isValid = ::hm:slurm:client::fromJsonValue(m_req_time_start, json[QString("req_time_start")]);
    m_req_time_start_isSet = !json[QString("req_time_start")].isNull() && m_req_time_start_isValid;

    m_server_thread_count_isValid = ::hm:slurm:client::fromJsonValue(m_server_thread_count, json[QString("server_thread_count")]);
    m_server_thread_count_isSet = !json[QString("server_thread_count")].isNull() && m_server_thread_count_isValid;

    m_agent_queue_size_isValid = ::hm:slurm:client::fromJsonValue(m_agent_queue_size, json[QString("agent_queue_size")]);
    m_agent_queue_size_isSet = !json[QString("agent_queue_size")].isNull() && m_agent_queue_size_isValid;

    m_agent_count_isValid = ::hm:slurm:client::fromJsonValue(m_agent_count, json[QString("agent_count")]);
    m_agent_count_isSet = !json[QString("agent_count")].isNull() && m_agent_count_isValid;

    m_agent_thread_count_isValid = ::hm:slurm:client::fromJsonValue(m_agent_thread_count, json[QString("agent_thread_count")]);
    m_agent_thread_count_isSet = !json[QString("agent_thread_count")].isNull() && m_agent_thread_count_isValid;

    m_dbd_agent_queue_size_isValid = ::hm:slurm:client::fromJsonValue(m_dbd_agent_queue_size, json[QString("dbd_agent_queue_size")]);
    m_dbd_agent_queue_size_isSet = !json[QString("dbd_agent_queue_size")].isNull() && m_dbd_agent_queue_size_isValid;

    m_gettimeofday_latency_isValid = ::hm:slurm:client::fromJsonValue(m_gettimeofday_latency, json[QString("gettimeofday_latency")]);
    m_gettimeofday_latency_isSet = !json[QString("gettimeofday_latency")].isNull() && m_gettimeofday_latency_isValid;

    m_schedule_cycle_max_isValid = ::hm:slurm:client::fromJsonValue(m_schedule_cycle_max, json[QString("schedule_cycle_max")]);
    m_schedule_cycle_max_isSet = !json[QString("schedule_cycle_max")].isNull() && m_schedule_cycle_max_isValid;

    m_schedule_cycle_last_isValid = ::hm:slurm:client::fromJsonValue(m_schedule_cycle_last, json[QString("schedule_cycle_last")]);
    m_schedule_cycle_last_isSet = !json[QString("schedule_cycle_last")].isNull() && m_schedule_cycle_last_isValid;

    m_schedule_cycle_total_isValid = ::hm:slurm:client::fromJsonValue(m_schedule_cycle_total, json[QString("schedule_cycle_total")]);
    m_schedule_cycle_total_isSet = !json[QString("schedule_cycle_total")].isNull() && m_schedule_cycle_total_isValid;

    m_schedule_cycle_mean_isValid = ::hm:slurm:client::fromJsonValue(m_schedule_cycle_mean, json[QString("schedule_cycle_mean")]);
    m_schedule_cycle_mean_isSet = !json[QString("schedule_cycle_mean")].isNull() && m_schedule_cycle_mean_isValid;

    m_schedule_cycle_mean_depth_isValid = ::hm:slurm:client::fromJsonValue(m_schedule_cycle_mean_depth, json[QString("schedule_cycle_mean_depth")]);
    m_schedule_cycle_mean_depth_isSet = !json[QString("schedule_cycle_mean_depth")].isNull() && m_schedule_cycle_mean_depth_isValid;

    m_schedule_cycle_per_minute_isValid = ::hm:slurm:client::fromJsonValue(m_schedule_cycle_per_minute, json[QString("schedule_cycle_per_minute")]);
    m_schedule_cycle_per_minute_isSet = !json[QString("schedule_cycle_per_minute")].isNull() && m_schedule_cycle_per_minute_isValid;

    m_schedule_queue_length_isValid = ::hm:slurm:client::fromJsonValue(m_schedule_queue_length, json[QString("schedule_queue_length")]);
    m_schedule_queue_length_isSet = !json[QString("schedule_queue_length")].isNull() && m_schedule_queue_length_isValid;

    m_schedule_exit_isValid = ::hm:slurm:client::fromJsonValue(m_schedule_exit, json[QString("schedule_exit")]);
    m_schedule_exit_isSet = !json[QString("schedule_exit")].isNull() && m_schedule_exit_isValid;

    m_jobs_submitted_isValid = ::hm:slurm:client::fromJsonValue(m_jobs_submitted, json[QString("jobs_submitted")]);
    m_jobs_submitted_isSet = !json[QString("jobs_submitted")].isNull() && m_jobs_submitted_isValid;

    m_jobs_started_isValid = ::hm:slurm:client::fromJsonValue(m_jobs_started, json[QString("jobs_started")]);
    m_jobs_started_isSet = !json[QString("jobs_started")].isNull() && m_jobs_started_isValid;

    m_jobs_completed_isValid = ::hm:slurm:client::fromJsonValue(m_jobs_completed, json[QString("jobs_completed")]);
    m_jobs_completed_isSet = !json[QString("jobs_completed")].isNull() && m_jobs_completed_isValid;

    m_jobs_canceled_isValid = ::hm:slurm:client::fromJsonValue(m_jobs_canceled, json[QString("jobs_canceled")]);
    m_jobs_canceled_isSet = !json[QString("jobs_canceled")].isNull() && m_jobs_canceled_isValid;

    m_jobs_failed_isValid = ::hm:slurm:client::fromJsonValue(m_jobs_failed, json[QString("jobs_failed")]);
    m_jobs_failed_isSet = !json[QString("jobs_failed")].isNull() && m_jobs_failed_isValid;

    m_jobs_pending_isValid = ::hm:slurm:client::fromJsonValue(m_jobs_pending, json[QString("jobs_pending")]);
    m_jobs_pending_isSet = !json[QString("jobs_pending")].isNull() && m_jobs_pending_isValid;

    m_jobs_running_isValid = ::hm:slurm:client::fromJsonValue(m_jobs_running, json[QString("jobs_running")]);
    m_jobs_running_isSet = !json[QString("jobs_running")].isNull() && m_jobs_running_isValid;

    m_job_states_ts_isValid = ::hm:slurm:client::fromJsonValue(m_job_states_ts, json[QString("job_states_ts")]);
    m_job_states_ts_isSet = !json[QString("job_states_ts")].isNull() && m_job_states_ts_isValid;

    m_bf_backfilled_jobs_isValid = ::hm:slurm:client::fromJsonValue(m_bf_backfilled_jobs, json[QString("bf_backfilled_jobs")]);
    m_bf_backfilled_jobs_isSet = !json[QString("bf_backfilled_jobs")].isNull() && m_bf_backfilled_jobs_isValid;

    m_bf_last_backfilled_jobs_isValid = ::hm:slurm:client::fromJsonValue(m_bf_last_backfilled_jobs, json[QString("bf_last_backfilled_jobs")]);
    m_bf_last_backfilled_jobs_isSet = !json[QString("bf_last_backfilled_jobs")].isNull() && m_bf_last_backfilled_jobs_isValid;

    m_bf_backfilled_het_jobs_isValid = ::hm:slurm:client::fromJsonValue(m_bf_backfilled_het_jobs, json[QString("bf_backfilled_het_jobs")]);
    m_bf_backfilled_het_jobs_isSet = !json[QString("bf_backfilled_het_jobs")].isNull() && m_bf_backfilled_het_jobs_isValid;

    m_bf_cycle_counter_isValid = ::hm:slurm:client::fromJsonValue(m_bf_cycle_counter, json[QString("bf_cycle_counter")]);
    m_bf_cycle_counter_isSet = !json[QString("bf_cycle_counter")].isNull() && m_bf_cycle_counter_isValid;

    m_bf_cycle_mean_isValid = ::hm:slurm:client::fromJsonValue(m_bf_cycle_mean, json[QString("bf_cycle_mean")]);
    m_bf_cycle_mean_isSet = !json[QString("bf_cycle_mean")].isNull() && m_bf_cycle_mean_isValid;

    m_bf_depth_mean_isValid = ::hm:slurm:client::fromJsonValue(m_bf_depth_mean, json[QString("bf_depth_mean")]);
    m_bf_depth_mean_isSet = !json[QString("bf_depth_mean")].isNull() && m_bf_depth_mean_isValid;

    m_bf_depth_mean_try_isValid = ::hm:slurm:client::fromJsonValue(m_bf_depth_mean_try, json[QString("bf_depth_mean_try")]);
    m_bf_depth_mean_try_isSet = !json[QString("bf_depth_mean_try")].isNull() && m_bf_depth_mean_try_isValid;

    m_bf_cycle_sum_isValid = ::hm:slurm:client::fromJsonValue(m_bf_cycle_sum, json[QString("bf_cycle_sum")]);
    m_bf_cycle_sum_isSet = !json[QString("bf_cycle_sum")].isNull() && m_bf_cycle_sum_isValid;

    m_bf_cycle_last_isValid = ::hm:slurm:client::fromJsonValue(m_bf_cycle_last, json[QString("bf_cycle_last")]);
    m_bf_cycle_last_isSet = !json[QString("bf_cycle_last")].isNull() && m_bf_cycle_last_isValid;

    m_bf_last_depth_isValid = ::hm:slurm:client::fromJsonValue(m_bf_last_depth, json[QString("bf_last_depth")]);
    m_bf_last_depth_isSet = !json[QString("bf_last_depth")].isNull() && m_bf_last_depth_isValid;

    m_bf_last_depth_try_isValid = ::hm:slurm:client::fromJsonValue(m_bf_last_depth_try, json[QString("bf_last_depth_try")]);
    m_bf_last_depth_try_isSet = !json[QString("bf_last_depth_try")].isNull() && m_bf_last_depth_try_isValid;

    m_bf_depth_sum_isValid = ::hm:slurm:client::fromJsonValue(m_bf_depth_sum, json[QString("bf_depth_sum")]);
    m_bf_depth_sum_isSet = !json[QString("bf_depth_sum")].isNull() && m_bf_depth_sum_isValid;

    m_bf_depth_try_sum_isValid = ::hm:slurm:client::fromJsonValue(m_bf_depth_try_sum, json[QString("bf_depth_try_sum")]);
    m_bf_depth_try_sum_isSet = !json[QString("bf_depth_try_sum")].isNull() && m_bf_depth_try_sum_isValid;

    m_bf_queue_len_isValid = ::hm:slurm:client::fromJsonValue(m_bf_queue_len, json[QString("bf_queue_len")]);
    m_bf_queue_len_isSet = !json[QString("bf_queue_len")].isNull() && m_bf_queue_len_isValid;

    m_bf_queue_len_mean_isValid = ::hm:slurm:client::fromJsonValue(m_bf_queue_len_mean, json[QString("bf_queue_len_mean")]);
    m_bf_queue_len_mean_isSet = !json[QString("bf_queue_len_mean")].isNull() && m_bf_queue_len_mean_isValid;

    m_bf_queue_len_sum_isValid = ::hm:slurm:client::fromJsonValue(m_bf_queue_len_sum, json[QString("bf_queue_len_sum")]);
    m_bf_queue_len_sum_isSet = !json[QString("bf_queue_len_sum")].isNull() && m_bf_queue_len_sum_isValid;

    m_bf_table_size_isValid = ::hm:slurm:client::fromJsonValue(m_bf_table_size, json[QString("bf_table_size")]);
    m_bf_table_size_isSet = !json[QString("bf_table_size")].isNull() && m_bf_table_size_isValid;

    m_bf_table_size_mean_isValid = ::hm:slurm:client::fromJsonValue(m_bf_table_size_mean, json[QString("bf_table_size_mean")]);
    m_bf_table_size_mean_isSet = !json[QString("bf_table_size_mean")].isNull() && m_bf_table_size_mean_isValid;

    m_bf_when_last_cycle_isValid = ::hm:slurm:client::fromJsonValue(m_bf_when_last_cycle, json[QString("bf_when_last_cycle")]);
    m_bf_when_last_cycle_isSet = !json[QString("bf_when_last_cycle")].isNull() && m_bf_when_last_cycle_isValid;

    m_bf_active_isValid = ::hm:slurm:client::fromJsonValue(m_bf_active, json[QString("bf_active")]);
    m_bf_active_isSet = !json[QString("bf_active")].isNull() && m_bf_active_isValid;

    m_bf_exit_isValid = ::hm:slurm:client::fromJsonValue(m_bf_exit, json[QString("bf_exit")]);
    m_bf_exit_isSet = !json[QString("bf_exit")].isNull() && m_bf_exit_isValid;

    m_rpcs_by_message_type_isValid = ::hm:slurm:client::fromJsonValue(m_rpcs_by_message_type, json[QString("rpcs_by_message_type")]);
    m_rpcs_by_message_type_isSet = !json[QString("rpcs_by_message_type")].isNull() && m_rpcs_by_message_type_isValid;

    m_rpcs_by_user_isValid = ::hm:slurm:client::fromJsonValue(m_rpcs_by_user, json[QString("rpcs_by_user")]);
    m_rpcs_by_user_isSet = !json[QString("rpcs_by_user")].isNull() && m_rpcs_by_user_isValid;
}

QString OAIV0_0_40_stats_msg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_40_stats_msg::asJsonObject() const {
    QJsonObject obj;
    if (m_parts_packed_isSet) {
        obj.insert(QString("parts_packed"), ::hm:slurm:client::toJsonValue(m_parts_packed));
    }
    if (m_req_time.isSet()) {
        obj.insert(QString("req_time"), ::hm:slurm:client::toJsonValue(m_req_time));
    }
    if (m_req_time_start.isSet()) {
        obj.insert(QString("req_time_start"), ::hm:slurm:client::toJsonValue(m_req_time_start));
    }
    if (m_server_thread_count_isSet) {
        obj.insert(QString("server_thread_count"), ::hm:slurm:client::toJsonValue(m_server_thread_count));
    }
    if (m_agent_queue_size_isSet) {
        obj.insert(QString("agent_queue_size"), ::hm:slurm:client::toJsonValue(m_agent_queue_size));
    }
    if (m_agent_count_isSet) {
        obj.insert(QString("agent_count"), ::hm:slurm:client::toJsonValue(m_agent_count));
    }
    if (m_agent_thread_count_isSet) {
        obj.insert(QString("agent_thread_count"), ::hm:slurm:client::toJsonValue(m_agent_thread_count));
    }
    if (m_dbd_agent_queue_size_isSet) {
        obj.insert(QString("dbd_agent_queue_size"), ::hm:slurm:client::toJsonValue(m_dbd_agent_queue_size));
    }
    if (m_gettimeofday_latency_isSet) {
        obj.insert(QString("gettimeofday_latency"), ::hm:slurm:client::toJsonValue(m_gettimeofday_latency));
    }
    if (m_schedule_cycle_max_isSet) {
        obj.insert(QString("schedule_cycle_max"), ::hm:slurm:client::toJsonValue(m_schedule_cycle_max));
    }
    if (m_schedule_cycle_last_isSet) {
        obj.insert(QString("schedule_cycle_last"), ::hm:slurm:client::toJsonValue(m_schedule_cycle_last));
    }
    if (m_schedule_cycle_total_isSet) {
        obj.insert(QString("schedule_cycle_total"), ::hm:slurm:client::toJsonValue(m_schedule_cycle_total));
    }
    if (m_schedule_cycle_mean_isSet) {
        obj.insert(QString("schedule_cycle_mean"), ::hm:slurm:client::toJsonValue(m_schedule_cycle_mean));
    }
    if (m_schedule_cycle_mean_depth_isSet) {
        obj.insert(QString("schedule_cycle_mean_depth"), ::hm:slurm:client::toJsonValue(m_schedule_cycle_mean_depth));
    }
    if (m_schedule_cycle_per_minute_isSet) {
        obj.insert(QString("schedule_cycle_per_minute"), ::hm:slurm:client::toJsonValue(m_schedule_cycle_per_minute));
    }
    if (m_schedule_queue_length_isSet) {
        obj.insert(QString("schedule_queue_length"), ::hm:slurm:client::toJsonValue(m_schedule_queue_length));
    }
    if (m_schedule_exit.isSet()) {
        obj.insert(QString("schedule_exit"), ::hm:slurm:client::toJsonValue(m_schedule_exit));
    }
    if (m_jobs_submitted_isSet) {
        obj.insert(QString("jobs_submitted"), ::hm:slurm:client::toJsonValue(m_jobs_submitted));
    }
    if (m_jobs_started_isSet) {
        obj.insert(QString("jobs_started"), ::hm:slurm:client::toJsonValue(m_jobs_started));
    }
    if (m_jobs_completed_isSet) {
        obj.insert(QString("jobs_completed"), ::hm:slurm:client::toJsonValue(m_jobs_completed));
    }
    if (m_jobs_canceled_isSet) {
        obj.insert(QString("jobs_canceled"), ::hm:slurm:client::toJsonValue(m_jobs_canceled));
    }
    if (m_jobs_failed_isSet) {
        obj.insert(QString("jobs_failed"), ::hm:slurm:client::toJsonValue(m_jobs_failed));
    }
    if (m_jobs_pending_isSet) {
        obj.insert(QString("jobs_pending"), ::hm:slurm:client::toJsonValue(m_jobs_pending));
    }
    if (m_jobs_running_isSet) {
        obj.insert(QString("jobs_running"), ::hm:slurm:client::toJsonValue(m_jobs_running));
    }
    if (m_job_states_ts.isSet()) {
        obj.insert(QString("job_states_ts"), ::hm:slurm:client::toJsonValue(m_job_states_ts));
    }
    if (m_bf_backfilled_jobs_isSet) {
        obj.insert(QString("bf_backfilled_jobs"), ::hm:slurm:client::toJsonValue(m_bf_backfilled_jobs));
    }
    if (m_bf_last_backfilled_jobs_isSet) {
        obj.insert(QString("bf_last_backfilled_jobs"), ::hm:slurm:client::toJsonValue(m_bf_last_backfilled_jobs));
    }
    if (m_bf_backfilled_het_jobs_isSet) {
        obj.insert(QString("bf_backfilled_het_jobs"), ::hm:slurm:client::toJsonValue(m_bf_backfilled_het_jobs));
    }
    if (m_bf_cycle_counter_isSet) {
        obj.insert(QString("bf_cycle_counter"), ::hm:slurm:client::toJsonValue(m_bf_cycle_counter));
    }
    if (m_bf_cycle_mean_isSet) {
        obj.insert(QString("bf_cycle_mean"), ::hm:slurm:client::toJsonValue(m_bf_cycle_mean));
    }
    if (m_bf_depth_mean_isSet) {
        obj.insert(QString("bf_depth_mean"), ::hm:slurm:client::toJsonValue(m_bf_depth_mean));
    }
    if (m_bf_depth_mean_try_isSet) {
        obj.insert(QString("bf_depth_mean_try"), ::hm:slurm:client::toJsonValue(m_bf_depth_mean_try));
    }
    if (m_bf_cycle_sum_isSet) {
        obj.insert(QString("bf_cycle_sum"), ::hm:slurm:client::toJsonValue(m_bf_cycle_sum));
    }
    if (m_bf_cycle_last_isSet) {
        obj.insert(QString("bf_cycle_last"), ::hm:slurm:client::toJsonValue(m_bf_cycle_last));
    }
    if (m_bf_last_depth_isSet) {
        obj.insert(QString("bf_last_depth"), ::hm:slurm:client::toJsonValue(m_bf_last_depth));
    }
    if (m_bf_last_depth_try_isSet) {
        obj.insert(QString("bf_last_depth_try"), ::hm:slurm:client::toJsonValue(m_bf_last_depth_try));
    }
    if (m_bf_depth_sum_isSet) {
        obj.insert(QString("bf_depth_sum"), ::hm:slurm:client::toJsonValue(m_bf_depth_sum));
    }
    if (m_bf_depth_try_sum_isSet) {
        obj.insert(QString("bf_depth_try_sum"), ::hm:slurm:client::toJsonValue(m_bf_depth_try_sum));
    }
    if (m_bf_queue_len_isSet) {
        obj.insert(QString("bf_queue_len"), ::hm:slurm:client::toJsonValue(m_bf_queue_len));
    }
    if (m_bf_queue_len_mean_isSet) {
        obj.insert(QString("bf_queue_len_mean"), ::hm:slurm:client::toJsonValue(m_bf_queue_len_mean));
    }
    if (m_bf_queue_len_sum_isSet) {
        obj.insert(QString("bf_queue_len_sum"), ::hm:slurm:client::toJsonValue(m_bf_queue_len_sum));
    }
    if (m_bf_table_size_isSet) {
        obj.insert(QString("bf_table_size"), ::hm:slurm:client::toJsonValue(m_bf_table_size));
    }
    if (m_bf_table_size_mean_isSet) {
        obj.insert(QString("bf_table_size_mean"), ::hm:slurm:client::toJsonValue(m_bf_table_size_mean));
    }
    if (m_bf_when_last_cycle.isSet()) {
        obj.insert(QString("bf_when_last_cycle"), ::hm:slurm:client::toJsonValue(m_bf_when_last_cycle));
    }
    if (m_bf_active_isSet) {
        obj.insert(QString("bf_active"), ::hm:slurm:client::toJsonValue(m_bf_active));
    }
    if (m_bf_exit.isSet()) {
        obj.insert(QString("bf_exit"), ::hm:slurm:client::toJsonValue(m_bf_exit));
    }
    if (m_rpcs_by_message_type.size() > 0) {
        obj.insert(QString("rpcs_by_message_type"), ::hm:slurm:client::toJsonValue(m_rpcs_by_message_type));
    }
    if (m_rpcs_by_user.size() > 0) {
        obj.insert(QString("rpcs_by_user"), ::hm:slurm:client::toJsonValue(m_rpcs_by_user));
    }
    return obj;
}

qint32 OAIV0_0_40_stats_msg::getPartsPacked() const {
    return m_parts_packed;
}
void OAIV0_0_40_stats_msg::setPartsPacked(const qint32 &parts_packed) {
    m_parts_packed = parts_packed;
    m_parts_packed_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_parts_packed_Set() const{
    return m_parts_packed_isSet;
}

bool OAIV0_0_40_stats_msg::is_parts_packed_Valid() const{
    return m_parts_packed_isValid;
}

OAIV0_0_40_uint64_no_val OAIV0_0_40_stats_msg::getReqTime() const {
    return m_req_time;
}
void OAIV0_0_40_stats_msg::setReqTime(const OAIV0_0_40_uint64_no_val &req_time) {
    m_req_time = req_time;
    m_req_time_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_req_time_Set() const{
    return m_req_time_isSet;
}

bool OAIV0_0_40_stats_msg::is_req_time_Valid() const{
    return m_req_time_isValid;
}

OAIV0_0_40_uint64_no_val OAIV0_0_40_stats_msg::getReqTimeStart() const {
    return m_req_time_start;
}
void OAIV0_0_40_stats_msg::setReqTimeStart(const OAIV0_0_40_uint64_no_val &req_time_start) {
    m_req_time_start = req_time_start;
    m_req_time_start_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_req_time_start_Set() const{
    return m_req_time_start_isSet;
}

bool OAIV0_0_40_stats_msg::is_req_time_start_Valid() const{
    return m_req_time_start_isValid;
}

qint32 OAIV0_0_40_stats_msg::getServerThreadCount() const {
    return m_server_thread_count;
}
void OAIV0_0_40_stats_msg::setServerThreadCount(const qint32 &server_thread_count) {
    m_server_thread_count = server_thread_count;
    m_server_thread_count_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_server_thread_count_Set() const{
    return m_server_thread_count_isSet;
}

bool OAIV0_0_40_stats_msg::is_server_thread_count_Valid() const{
    return m_server_thread_count_isValid;
}

qint32 OAIV0_0_40_stats_msg::getAgentQueueSize() const {
    return m_agent_queue_size;
}
void OAIV0_0_40_stats_msg::setAgentQueueSize(const qint32 &agent_queue_size) {
    m_agent_queue_size = agent_queue_size;
    m_agent_queue_size_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_agent_queue_size_Set() const{
    return m_agent_queue_size_isSet;
}

bool OAIV0_0_40_stats_msg::is_agent_queue_size_Valid() const{
    return m_agent_queue_size_isValid;
}

qint32 OAIV0_0_40_stats_msg::getAgentCount() const {
    return m_agent_count;
}
void OAIV0_0_40_stats_msg::setAgentCount(const qint32 &agent_count) {
    m_agent_count = agent_count;
    m_agent_count_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_agent_count_Set() const{
    return m_agent_count_isSet;
}

bool OAIV0_0_40_stats_msg::is_agent_count_Valid() const{
    return m_agent_count_isValid;
}

qint32 OAIV0_0_40_stats_msg::getAgentThreadCount() const {
    return m_agent_thread_count;
}
void OAIV0_0_40_stats_msg::setAgentThreadCount(const qint32 &agent_thread_count) {
    m_agent_thread_count = agent_thread_count;
    m_agent_thread_count_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_agent_thread_count_Set() const{
    return m_agent_thread_count_isSet;
}

bool OAIV0_0_40_stats_msg::is_agent_thread_count_Valid() const{
    return m_agent_thread_count_isValid;
}

qint32 OAIV0_0_40_stats_msg::getDbdAgentQueueSize() const {
    return m_dbd_agent_queue_size;
}
void OAIV0_0_40_stats_msg::setDbdAgentQueueSize(const qint32 &dbd_agent_queue_size) {
    m_dbd_agent_queue_size = dbd_agent_queue_size;
    m_dbd_agent_queue_size_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_dbd_agent_queue_size_Set() const{
    return m_dbd_agent_queue_size_isSet;
}

bool OAIV0_0_40_stats_msg::is_dbd_agent_queue_size_Valid() const{
    return m_dbd_agent_queue_size_isValid;
}

qint32 OAIV0_0_40_stats_msg::getGettimeofdayLatency() const {
    return m_gettimeofday_latency;
}
void OAIV0_0_40_stats_msg::setGettimeofdayLatency(const qint32 &gettimeofday_latency) {
    m_gettimeofday_latency = gettimeofday_latency;
    m_gettimeofday_latency_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_gettimeofday_latency_Set() const{
    return m_gettimeofday_latency_isSet;
}

bool OAIV0_0_40_stats_msg::is_gettimeofday_latency_Valid() const{
    return m_gettimeofday_latency_isValid;
}

qint32 OAIV0_0_40_stats_msg::getScheduleCycleMax() const {
    return m_schedule_cycle_max;
}
void OAIV0_0_40_stats_msg::setScheduleCycleMax(const qint32 &schedule_cycle_max) {
    m_schedule_cycle_max = schedule_cycle_max;
    m_schedule_cycle_max_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_max_Set() const{
    return m_schedule_cycle_max_isSet;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_max_Valid() const{
    return m_schedule_cycle_max_isValid;
}

qint32 OAIV0_0_40_stats_msg::getScheduleCycleLast() const {
    return m_schedule_cycle_last;
}
void OAIV0_0_40_stats_msg::setScheduleCycleLast(const qint32 &schedule_cycle_last) {
    m_schedule_cycle_last = schedule_cycle_last;
    m_schedule_cycle_last_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_last_Set() const{
    return m_schedule_cycle_last_isSet;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_last_Valid() const{
    return m_schedule_cycle_last_isValid;
}

qint32 OAIV0_0_40_stats_msg::getScheduleCycleTotal() const {
    return m_schedule_cycle_total;
}
void OAIV0_0_40_stats_msg::setScheduleCycleTotal(const qint32 &schedule_cycle_total) {
    m_schedule_cycle_total = schedule_cycle_total;
    m_schedule_cycle_total_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_total_Set() const{
    return m_schedule_cycle_total_isSet;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_total_Valid() const{
    return m_schedule_cycle_total_isValid;
}

qint64 OAIV0_0_40_stats_msg::getScheduleCycleMean() const {
    return m_schedule_cycle_mean;
}
void OAIV0_0_40_stats_msg::setScheduleCycleMean(const qint64 &schedule_cycle_mean) {
    m_schedule_cycle_mean = schedule_cycle_mean;
    m_schedule_cycle_mean_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_mean_Set() const{
    return m_schedule_cycle_mean_isSet;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_mean_Valid() const{
    return m_schedule_cycle_mean_isValid;
}

qint64 OAIV0_0_40_stats_msg::getScheduleCycleMeanDepth() const {
    return m_schedule_cycle_mean_depth;
}
void OAIV0_0_40_stats_msg::setScheduleCycleMeanDepth(const qint64 &schedule_cycle_mean_depth) {
    m_schedule_cycle_mean_depth = schedule_cycle_mean_depth;
    m_schedule_cycle_mean_depth_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_mean_depth_Set() const{
    return m_schedule_cycle_mean_depth_isSet;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_mean_depth_Valid() const{
    return m_schedule_cycle_mean_depth_isValid;
}

qint64 OAIV0_0_40_stats_msg::getScheduleCyclePerMinute() const {
    return m_schedule_cycle_per_minute;
}
void OAIV0_0_40_stats_msg::setScheduleCyclePerMinute(const qint64 &schedule_cycle_per_minute) {
    m_schedule_cycle_per_minute = schedule_cycle_per_minute;
    m_schedule_cycle_per_minute_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_per_minute_Set() const{
    return m_schedule_cycle_per_minute_isSet;
}

bool OAIV0_0_40_stats_msg::is_schedule_cycle_per_minute_Valid() const{
    return m_schedule_cycle_per_minute_isValid;
}

qint32 OAIV0_0_40_stats_msg::getScheduleQueueLength() const {
    return m_schedule_queue_length;
}
void OAIV0_0_40_stats_msg::setScheduleQueueLength(const qint32 &schedule_queue_length) {
    m_schedule_queue_length = schedule_queue_length;
    m_schedule_queue_length_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_schedule_queue_length_Set() const{
    return m_schedule_queue_length_isSet;
}

bool OAIV0_0_40_stats_msg::is_schedule_queue_length_Valid() const{
    return m_schedule_queue_length_isValid;
}

OAIV0_0_40_schedule_exit_fields OAIV0_0_40_stats_msg::getScheduleExit() const {
    return m_schedule_exit;
}
void OAIV0_0_40_stats_msg::setScheduleExit(const OAIV0_0_40_schedule_exit_fields &schedule_exit) {
    m_schedule_exit = schedule_exit;
    m_schedule_exit_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_schedule_exit_Set() const{
    return m_schedule_exit_isSet;
}

bool OAIV0_0_40_stats_msg::is_schedule_exit_Valid() const{
    return m_schedule_exit_isValid;
}

qint32 OAIV0_0_40_stats_msg::getJobsSubmitted() const {
    return m_jobs_submitted;
}
void OAIV0_0_40_stats_msg::setJobsSubmitted(const qint32 &jobs_submitted) {
    m_jobs_submitted = jobs_submitted;
    m_jobs_submitted_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_jobs_submitted_Set() const{
    return m_jobs_submitted_isSet;
}

bool OAIV0_0_40_stats_msg::is_jobs_submitted_Valid() const{
    return m_jobs_submitted_isValid;
}

qint32 OAIV0_0_40_stats_msg::getJobsStarted() const {
    return m_jobs_started;
}
void OAIV0_0_40_stats_msg::setJobsStarted(const qint32 &jobs_started) {
    m_jobs_started = jobs_started;
    m_jobs_started_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_jobs_started_Set() const{
    return m_jobs_started_isSet;
}

bool OAIV0_0_40_stats_msg::is_jobs_started_Valid() const{
    return m_jobs_started_isValid;
}

qint32 OAIV0_0_40_stats_msg::getJobsCompleted() const {
    return m_jobs_completed;
}
void OAIV0_0_40_stats_msg::setJobsCompleted(const qint32 &jobs_completed) {
    m_jobs_completed = jobs_completed;
    m_jobs_completed_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_jobs_completed_Set() const{
    return m_jobs_completed_isSet;
}

bool OAIV0_0_40_stats_msg::is_jobs_completed_Valid() const{
    return m_jobs_completed_isValid;
}

qint32 OAIV0_0_40_stats_msg::getJobsCanceled() const {
    return m_jobs_canceled;
}
void OAIV0_0_40_stats_msg::setJobsCanceled(const qint32 &jobs_canceled) {
    m_jobs_canceled = jobs_canceled;
    m_jobs_canceled_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_jobs_canceled_Set() const{
    return m_jobs_canceled_isSet;
}

bool OAIV0_0_40_stats_msg::is_jobs_canceled_Valid() const{
    return m_jobs_canceled_isValid;
}

qint32 OAIV0_0_40_stats_msg::getJobsFailed() const {
    return m_jobs_failed;
}
void OAIV0_0_40_stats_msg::setJobsFailed(const qint32 &jobs_failed) {
    m_jobs_failed = jobs_failed;
    m_jobs_failed_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_jobs_failed_Set() const{
    return m_jobs_failed_isSet;
}

bool OAIV0_0_40_stats_msg::is_jobs_failed_Valid() const{
    return m_jobs_failed_isValid;
}

qint32 OAIV0_0_40_stats_msg::getJobsPending() const {
    return m_jobs_pending;
}
void OAIV0_0_40_stats_msg::setJobsPending(const qint32 &jobs_pending) {
    m_jobs_pending = jobs_pending;
    m_jobs_pending_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_jobs_pending_Set() const{
    return m_jobs_pending_isSet;
}

bool OAIV0_0_40_stats_msg::is_jobs_pending_Valid() const{
    return m_jobs_pending_isValid;
}

qint32 OAIV0_0_40_stats_msg::getJobsRunning() const {
    return m_jobs_running;
}
void OAIV0_0_40_stats_msg::setJobsRunning(const qint32 &jobs_running) {
    m_jobs_running = jobs_running;
    m_jobs_running_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_jobs_running_Set() const{
    return m_jobs_running_isSet;
}

bool OAIV0_0_40_stats_msg::is_jobs_running_Valid() const{
    return m_jobs_running_isValid;
}

OAIV0_0_40_uint64_no_val OAIV0_0_40_stats_msg::getJobStatesTs() const {
    return m_job_states_ts;
}
void OAIV0_0_40_stats_msg::setJobStatesTs(const OAIV0_0_40_uint64_no_val &job_states_ts) {
    m_job_states_ts = job_states_ts;
    m_job_states_ts_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_job_states_ts_Set() const{
    return m_job_states_ts_isSet;
}

bool OAIV0_0_40_stats_msg::is_job_states_ts_Valid() const{
    return m_job_states_ts_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfBackfilledJobs() const {
    return m_bf_backfilled_jobs;
}
void OAIV0_0_40_stats_msg::setBfBackfilledJobs(const qint32 &bf_backfilled_jobs) {
    m_bf_backfilled_jobs = bf_backfilled_jobs;
    m_bf_backfilled_jobs_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_backfilled_jobs_Set() const{
    return m_bf_backfilled_jobs_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_backfilled_jobs_Valid() const{
    return m_bf_backfilled_jobs_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfLastBackfilledJobs() const {
    return m_bf_last_backfilled_jobs;
}
void OAIV0_0_40_stats_msg::setBfLastBackfilledJobs(const qint32 &bf_last_backfilled_jobs) {
    m_bf_last_backfilled_jobs = bf_last_backfilled_jobs;
    m_bf_last_backfilled_jobs_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_last_backfilled_jobs_Set() const{
    return m_bf_last_backfilled_jobs_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_last_backfilled_jobs_Valid() const{
    return m_bf_last_backfilled_jobs_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfBackfilledHetJobs() const {
    return m_bf_backfilled_het_jobs;
}
void OAIV0_0_40_stats_msg::setBfBackfilledHetJobs(const qint32 &bf_backfilled_het_jobs) {
    m_bf_backfilled_het_jobs = bf_backfilled_het_jobs;
    m_bf_backfilled_het_jobs_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_backfilled_het_jobs_Set() const{
    return m_bf_backfilled_het_jobs_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_backfilled_het_jobs_Valid() const{
    return m_bf_backfilled_het_jobs_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfCycleCounter() const {
    return m_bf_cycle_counter;
}
void OAIV0_0_40_stats_msg::setBfCycleCounter(const qint32 &bf_cycle_counter) {
    m_bf_cycle_counter = bf_cycle_counter;
    m_bf_cycle_counter_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_cycle_counter_Set() const{
    return m_bf_cycle_counter_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_cycle_counter_Valid() const{
    return m_bf_cycle_counter_isValid;
}

qint64 OAIV0_0_40_stats_msg::getBfCycleMean() const {
    return m_bf_cycle_mean;
}
void OAIV0_0_40_stats_msg::setBfCycleMean(const qint64 &bf_cycle_mean) {
    m_bf_cycle_mean = bf_cycle_mean;
    m_bf_cycle_mean_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_cycle_mean_Set() const{
    return m_bf_cycle_mean_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_cycle_mean_Valid() const{
    return m_bf_cycle_mean_isValid;
}

qint64 OAIV0_0_40_stats_msg::getBfDepthMean() const {
    return m_bf_depth_mean;
}
void OAIV0_0_40_stats_msg::setBfDepthMean(const qint64 &bf_depth_mean) {
    m_bf_depth_mean = bf_depth_mean;
    m_bf_depth_mean_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_depth_mean_Set() const{
    return m_bf_depth_mean_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_depth_mean_Valid() const{
    return m_bf_depth_mean_isValid;
}

qint64 OAIV0_0_40_stats_msg::getBfDepthMeanTry() const {
    return m_bf_depth_mean_try;
}
void OAIV0_0_40_stats_msg::setBfDepthMeanTry(const qint64 &bf_depth_mean_try) {
    m_bf_depth_mean_try = bf_depth_mean_try;
    m_bf_depth_mean_try_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_depth_mean_try_Set() const{
    return m_bf_depth_mean_try_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_depth_mean_try_Valid() const{
    return m_bf_depth_mean_try_isValid;
}

qint64 OAIV0_0_40_stats_msg::getBfCycleSum() const {
    return m_bf_cycle_sum;
}
void OAIV0_0_40_stats_msg::setBfCycleSum(const qint64 &bf_cycle_sum) {
    m_bf_cycle_sum = bf_cycle_sum;
    m_bf_cycle_sum_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_cycle_sum_Set() const{
    return m_bf_cycle_sum_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_cycle_sum_Valid() const{
    return m_bf_cycle_sum_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfCycleLast() const {
    return m_bf_cycle_last;
}
void OAIV0_0_40_stats_msg::setBfCycleLast(const qint32 &bf_cycle_last) {
    m_bf_cycle_last = bf_cycle_last;
    m_bf_cycle_last_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_cycle_last_Set() const{
    return m_bf_cycle_last_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_cycle_last_Valid() const{
    return m_bf_cycle_last_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfLastDepth() const {
    return m_bf_last_depth;
}
void OAIV0_0_40_stats_msg::setBfLastDepth(const qint32 &bf_last_depth) {
    m_bf_last_depth = bf_last_depth;
    m_bf_last_depth_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_last_depth_Set() const{
    return m_bf_last_depth_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_last_depth_Valid() const{
    return m_bf_last_depth_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfLastDepthTry() const {
    return m_bf_last_depth_try;
}
void OAIV0_0_40_stats_msg::setBfLastDepthTry(const qint32 &bf_last_depth_try) {
    m_bf_last_depth_try = bf_last_depth_try;
    m_bf_last_depth_try_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_last_depth_try_Set() const{
    return m_bf_last_depth_try_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_last_depth_try_Valid() const{
    return m_bf_last_depth_try_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfDepthSum() const {
    return m_bf_depth_sum;
}
void OAIV0_0_40_stats_msg::setBfDepthSum(const qint32 &bf_depth_sum) {
    m_bf_depth_sum = bf_depth_sum;
    m_bf_depth_sum_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_depth_sum_Set() const{
    return m_bf_depth_sum_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_depth_sum_Valid() const{
    return m_bf_depth_sum_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfDepthTrySum() const {
    return m_bf_depth_try_sum;
}
void OAIV0_0_40_stats_msg::setBfDepthTrySum(const qint32 &bf_depth_try_sum) {
    m_bf_depth_try_sum = bf_depth_try_sum;
    m_bf_depth_try_sum_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_depth_try_sum_Set() const{
    return m_bf_depth_try_sum_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_depth_try_sum_Valid() const{
    return m_bf_depth_try_sum_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfQueueLen() const {
    return m_bf_queue_len;
}
void OAIV0_0_40_stats_msg::setBfQueueLen(const qint32 &bf_queue_len) {
    m_bf_queue_len = bf_queue_len;
    m_bf_queue_len_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_queue_len_Set() const{
    return m_bf_queue_len_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_queue_len_Valid() const{
    return m_bf_queue_len_isValid;
}

qint64 OAIV0_0_40_stats_msg::getBfQueueLenMean() const {
    return m_bf_queue_len_mean;
}
void OAIV0_0_40_stats_msg::setBfQueueLenMean(const qint64 &bf_queue_len_mean) {
    m_bf_queue_len_mean = bf_queue_len_mean;
    m_bf_queue_len_mean_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_queue_len_mean_Set() const{
    return m_bf_queue_len_mean_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_queue_len_mean_Valid() const{
    return m_bf_queue_len_mean_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfQueueLenSum() const {
    return m_bf_queue_len_sum;
}
void OAIV0_0_40_stats_msg::setBfQueueLenSum(const qint32 &bf_queue_len_sum) {
    m_bf_queue_len_sum = bf_queue_len_sum;
    m_bf_queue_len_sum_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_queue_len_sum_Set() const{
    return m_bf_queue_len_sum_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_queue_len_sum_Valid() const{
    return m_bf_queue_len_sum_isValid;
}

qint32 OAIV0_0_40_stats_msg::getBfTableSize() const {
    return m_bf_table_size;
}
void OAIV0_0_40_stats_msg::setBfTableSize(const qint32 &bf_table_size) {
    m_bf_table_size = bf_table_size;
    m_bf_table_size_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_table_size_Set() const{
    return m_bf_table_size_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_table_size_Valid() const{
    return m_bf_table_size_isValid;
}

qint64 OAIV0_0_40_stats_msg::getBfTableSizeMean() const {
    return m_bf_table_size_mean;
}
void OAIV0_0_40_stats_msg::setBfTableSizeMean(const qint64 &bf_table_size_mean) {
    m_bf_table_size_mean = bf_table_size_mean;
    m_bf_table_size_mean_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_table_size_mean_Set() const{
    return m_bf_table_size_mean_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_table_size_mean_Valid() const{
    return m_bf_table_size_mean_isValid;
}

OAIV0_0_40_uint64_no_val OAIV0_0_40_stats_msg::getBfWhenLastCycle() const {
    return m_bf_when_last_cycle;
}
void OAIV0_0_40_stats_msg::setBfWhenLastCycle(const OAIV0_0_40_uint64_no_val &bf_when_last_cycle) {
    m_bf_when_last_cycle = bf_when_last_cycle;
    m_bf_when_last_cycle_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_when_last_cycle_Set() const{
    return m_bf_when_last_cycle_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_when_last_cycle_Valid() const{
    return m_bf_when_last_cycle_isValid;
}

bool OAIV0_0_40_stats_msg::isBfActive() const {
    return m_bf_active;
}
void OAIV0_0_40_stats_msg::setBfActive(const bool &bf_active) {
    m_bf_active = bf_active;
    m_bf_active_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_active_Set() const{
    return m_bf_active_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_active_Valid() const{
    return m_bf_active_isValid;
}

OAIV0_0_40_bf_exit_fields OAIV0_0_40_stats_msg::getBfExit() const {
    return m_bf_exit;
}
void OAIV0_0_40_stats_msg::setBfExit(const OAIV0_0_40_bf_exit_fields &bf_exit) {
    m_bf_exit = bf_exit;
    m_bf_exit_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_bf_exit_Set() const{
    return m_bf_exit_isSet;
}

bool OAIV0_0_40_stats_msg::is_bf_exit_Valid() const{
    return m_bf_exit_isValid;
}

QList<OAIV0_0_40_stats_msg_rpcs_by_type_inner> OAIV0_0_40_stats_msg::getRpcsByMessageType() const {
    return m_rpcs_by_message_type;
}
void OAIV0_0_40_stats_msg::setRpcsByMessageType(const QList<OAIV0_0_40_stats_msg_rpcs_by_type_inner> &rpcs_by_message_type) {
    m_rpcs_by_message_type = rpcs_by_message_type;
    m_rpcs_by_message_type_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_rpcs_by_message_type_Set() const{
    return m_rpcs_by_message_type_isSet;
}

bool OAIV0_0_40_stats_msg::is_rpcs_by_message_type_Valid() const{
    return m_rpcs_by_message_type_isValid;
}

QList<OAIV0_0_40_stats_msg_rpcs_by_user_inner> OAIV0_0_40_stats_msg::getRpcsByUser() const {
    return m_rpcs_by_user;
}
void OAIV0_0_40_stats_msg::setRpcsByUser(const QList<OAIV0_0_40_stats_msg_rpcs_by_user_inner> &rpcs_by_user) {
    m_rpcs_by_user = rpcs_by_user;
    m_rpcs_by_user_isSet = true;
}

bool OAIV0_0_40_stats_msg::is_rpcs_by_user_Set() const{
    return m_rpcs_by_user_isSet;
}

bool OAIV0_0_40_stats_msg::is_rpcs_by_user_Valid() const{
    return m_rpcs_by_user_isValid;
}

bool OAIV0_0_40_stats_msg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parts_packed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_req_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_req_time_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_thread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_queue_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_thread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dbd_agent_queue_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gettimeofday_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_cycle_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_cycle_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_cycle_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_cycle_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_cycle_mean_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_cycle_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_queue_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_exit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs_submitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs_running_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_states_ts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_backfilled_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_last_backfilled_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_backfilled_het_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_cycle_counter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_cycle_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_depth_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_depth_mean_try_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_cycle_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_cycle_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_last_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_last_depth_try_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_depth_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_depth_try_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_queue_len_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_queue_len_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_queue_len_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_table_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_table_size_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_when_last_cycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bf_exit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpcs_by_message_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpcs_by_user.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_40_stats_msg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace hm:slurm:client
