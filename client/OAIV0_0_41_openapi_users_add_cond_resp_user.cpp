/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_41_openapi_users_add_cond_resp_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_41_openapi_users_add_cond_resp_user::OAIV0_0_41_openapi_users_add_cond_resp_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_41_openapi_users_add_cond_resp_user::OAIV0_0_41_openapi_users_add_cond_resp_user() {
    this->initializeModel();
}

OAIV0_0_41_openapi_users_add_cond_resp_user::~OAIV0_0_41_openapi_users_add_cond_resp_user() {}

void OAIV0_0_41_openapi_users_add_cond_resp_user::initializeModel() {

    m_adminlevel_isSet = false;
    m_adminlevel_isValid = false;

    m_defaultaccount_isSet = false;
    m_defaultaccount_isValid = false;

    m_defaultwckey_isSet = false;
    m_defaultwckey_isValid = false;
}

void OAIV0_0_41_openapi_users_add_cond_resp_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_41_openapi_users_add_cond_resp_user::fromJsonObject(QJsonObject json) {

    m_adminlevel_isValid = ::OpenAPI::fromJsonValue(m_adminlevel, json[QString("adminlevel")]);
    m_adminlevel_isSet = !json[QString("adminlevel")].isNull() && m_adminlevel_isValid;

    m_defaultaccount_isValid = ::OpenAPI::fromJsonValue(m_defaultaccount, json[QString("defaultaccount")]);
    m_defaultaccount_isSet = !json[QString("defaultaccount")].isNull() && m_defaultaccount_isValid;

    m_defaultwckey_isValid = ::OpenAPI::fromJsonValue(m_defaultwckey, json[QString("defaultwckey")]);
    m_defaultwckey_isSet = !json[QString("defaultwckey")].isNull() && m_defaultwckey_isValid;
}

QString OAIV0_0_41_openapi_users_add_cond_resp_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_41_openapi_users_add_cond_resp_user::asJsonObject() const {
    QJsonObject obj;
    if (m_adminlevel.size() > 0) {
        obj.insert(QString("adminlevel"), ::OpenAPI::toJsonValue(m_adminlevel));
    }
    if (m_defaultaccount_isSet) {
        obj.insert(QString("defaultaccount"), ::OpenAPI::toJsonValue(m_defaultaccount));
    }
    if (m_defaultwckey_isSet) {
        obj.insert(QString("defaultwckey"), ::OpenAPI::toJsonValue(m_defaultwckey));
    }
    return obj;
}

QList<QString> OAIV0_0_41_openapi_users_add_cond_resp_user::getAdminlevel() const {
    return m_adminlevel;
}
void OAIV0_0_41_openapi_users_add_cond_resp_user::setAdminlevel(const QList<QString> &adminlevel) {
    m_adminlevel = adminlevel;
    m_adminlevel_isSet = true;
}

bool OAIV0_0_41_openapi_users_add_cond_resp_user::is_adminlevel_Set() const{
    return m_adminlevel_isSet;
}

bool OAIV0_0_41_openapi_users_add_cond_resp_user::is_adminlevel_Valid() const{
    return m_adminlevel_isValid;
}

QString OAIV0_0_41_openapi_users_add_cond_resp_user::getDefaultaccount() const {
    return m_defaultaccount;
}
void OAIV0_0_41_openapi_users_add_cond_resp_user::setDefaultaccount(const QString &defaultaccount) {
    m_defaultaccount = defaultaccount;
    m_defaultaccount_isSet = true;
}

bool OAIV0_0_41_openapi_users_add_cond_resp_user::is_defaultaccount_Set() const{
    return m_defaultaccount_isSet;
}

bool OAIV0_0_41_openapi_users_add_cond_resp_user::is_defaultaccount_Valid() const{
    return m_defaultaccount_isValid;
}

QString OAIV0_0_41_openapi_users_add_cond_resp_user::getDefaultwckey() const {
    return m_defaultwckey;
}
void OAIV0_0_41_openapi_users_add_cond_resp_user::setDefaultwckey(const QString &defaultwckey) {
    m_defaultwckey = defaultwckey;
    m_defaultwckey_isSet = true;
}

bool OAIV0_0_41_openapi_users_add_cond_resp_user::is_defaultwckey_Set() const{
    return m_defaultwckey_isSet;
}

bool OAIV0_0_41_openapi_users_add_cond_resp_user::is_defaultwckey_Valid() const{
    return m_defaultwckey_isValid;
}

bool OAIV0_0_41_openapi_users_add_cond_resp_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adminlevel.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_defaultaccount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defaultwckey_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_41_openapi_users_add_cond_resp_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
