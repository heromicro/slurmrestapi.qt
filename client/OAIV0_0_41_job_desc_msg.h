/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV0_0_41_job_desc_msg.h
 *
 * 
 */

#ifndef OAIV0_0_41_job_desc_msg_H
#define OAIV0_0_41_job_desc_msg_H

#include <QJsonObject>

#include "OAIV0_0_41_job_desc_msg_begin_time.h"
#include "OAIV0_0_41_job_desc_msg_crontab.h"
#include "OAIV0_0_41_job_desc_msg_distribution_plane_size.h"
#include "OAIV0_0_41_job_desc_msg_kill_warning_delay.h"
#include "OAIV0_0_41_job_desc_msg_memory_per_cpu.h"
#include "OAIV0_0_41_job_desc_msg_priority.h"
#include "OAIV0_0_41_job_desc_msg_required_switches.h"
#include "OAIV0_0_41_job_desc_msg_rlimits.h"
#include "OAIV0_0_41_job_desc_msg_segment_size.h"
#include "OAIV0_0_41_job_desc_msg_time_limit.h"
#include "OAIV0_0_41_job_desc_msg_time_minimum.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV0_0_41_job_desc_msg_begin_time;
class OAIV0_0_41_job_desc_msg_crontab;
class OAIV0_0_41_job_desc_msg_rlimits;
class OAIV0_0_41_job_desc_msg_distribution_plane_size;
class OAIV0_0_41_job_desc_msg_priority;
class OAIV0_0_41_job_desc_msg_time_limit;
class OAIV0_0_41_job_desc_msg_time_minimum;
class OAIV0_0_41_job_desc_msg_kill_warning_delay;
class OAIV0_0_41_job_desc_msg_memory_per_cpu;
class OAIV0_0_41_job_desc_msg_required_switches;
class OAIV0_0_41_job_desc_msg_segment_size;

class OAIV0_0_41_job_desc_msg : public OAIObject {
public:
    OAIV0_0_41_job_desc_msg();
    OAIV0_0_41_job_desc_msg(QString json);
    ~OAIV0_0_41_job_desc_msg() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccount() const;
    void setAccount(const QString &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    QString getAccountGatherFrequency() const;
    void setAccountGatherFrequency(const QString &account_gather_frequency);
    bool is_account_gather_frequency_Set() const;
    bool is_account_gather_frequency_Valid() const;

    QString getAdminComment() const;
    void setAdminComment(const QString &admin_comment);
    bool is_admin_comment_Set() const;
    bool is_admin_comment_Valid() const;

    QString getAllocationNodeList() const;
    void setAllocationNodeList(const QString &allocation_node_list);
    bool is_allocation_node_list_Set() const;
    bool is_allocation_node_list_Valid() const;

    qint32 getAllocationNodePort() const;
    void setAllocationNodePort(const qint32 &allocation_node_port);
    bool is_allocation_node_port_Set() const;
    bool is_allocation_node_port_Valid() const;

    QList<QString> getArgv() const;
    void setArgv(const QList<QString> &argv);
    bool is_argv_Set() const;
    bool is_argv_Valid() const;

    QString getArray() const;
    void setArray(const QString &array);
    bool is_array_Set() const;
    bool is_array_Valid() const;

    QString getBatchFeatures() const;
    void setBatchFeatures(const QString &batch_features);
    bool is_batch_features_Set() const;
    bool is_batch_features_Valid() const;

    OAIV0_0_41_job_desc_msg_begin_time getBeginTime() const;
    void setBeginTime(const OAIV0_0_41_job_desc_msg_begin_time &begin_time);
    bool is_begin_time_Set() const;
    bool is_begin_time_Valid() const;

    QList<QString> getFlags() const;
    void setFlags(const QList<QString> &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    QString getBurstBuffer() const;
    void setBurstBuffer(const QString &burst_buffer);
    bool is_burst_buffer_Set() const;
    bool is_burst_buffer_Valid() const;

    QString getClusters() const;
    void setClusters(const QString &clusters);
    bool is_clusters_Set() const;
    bool is_clusters_Valid() const;

    QString getClusterConstraint() const;
    void setClusterConstraint(const QString &cluster_constraint);
    bool is_cluster_constraint_Set() const;
    bool is_cluster_constraint_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    bool isContiguous() const;
    void setContiguous(const bool &contiguous);
    bool is_contiguous_Set() const;
    bool is_contiguous_Valid() const;

    QString getContainer() const;
    void setContainer(const QString &container);
    bool is_container_Set() const;
    bool is_container_Valid() const;

    QString getContainerId() const;
    void setContainerId(const QString &container_id);
    bool is_container_id_Set() const;
    bool is_container_id_Valid() const;

    qint32 getCoreSpecification() const;
    void setCoreSpecification(const qint32 &core_specification);
    bool is_core_specification_Set() const;
    bool is_core_specification_Valid() const;

    qint32 getThreadSpecification() const;
    void setThreadSpecification(const qint32 &thread_specification);
    bool is_thread_specification_Set() const;
    bool is_thread_specification_Valid() const;

    QString getCpuBinding() const;
    void setCpuBinding(const QString &cpu_binding);
    bool is_cpu_binding_Set() const;
    bool is_cpu_binding_Valid() const;

    QList<QString> getCpuBindingFlags() const;
    void setCpuBindingFlags(const QList<QString> &cpu_binding_flags);
    bool is_cpu_binding_flags_Set() const;
    bool is_cpu_binding_flags_Valid() const;

    QString getCpuFrequency() const;
    void setCpuFrequency(const QString &cpu_frequency);
    bool is_cpu_frequency_Set() const;
    bool is_cpu_frequency_Valid() const;

    QString getCpusPerTres() const;
    void setCpusPerTres(const QString &cpus_per_tres);
    bool is_cpus_per_tres_Set() const;
    bool is_cpus_per_tres_Valid() const;

    OAIV0_0_41_job_desc_msg_crontab getCrontab() const;
    void setCrontab(const OAIV0_0_41_job_desc_msg_crontab &crontab);
    bool is_crontab_Set() const;
    bool is_crontab_Valid() const;

    qint64 getDeadline() const;
    void setDeadline(const qint64 &deadline);
    bool is_deadline_Set() const;
    bool is_deadline_Valid() const;

    qint32 getDelayBoot() const;
    void setDelayBoot(const qint32 &delay_boot);
    bool is_delay_boot_Set() const;
    bool is_delay_boot_Valid() const;

    QString getDependency() const;
    void setDependency(const QString &dependency);
    bool is_dependency_Set() const;
    bool is_dependency_Valid() const;

    qint64 getEndTime() const;
    void setEndTime(const qint64 &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QList<QString> getEnvironment() const;
    void setEnvironment(const QList<QString> &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    OAIV0_0_41_job_desc_msg_rlimits getRlimits() const;
    void setRlimits(const OAIV0_0_41_job_desc_msg_rlimits &rlimits);
    bool is_rlimits_Set() const;
    bool is_rlimits_Valid() const;

    QList<QString> getExcludedNodes() const;
    void setExcludedNodes(const QList<QString> &excluded_nodes);
    bool is_excluded_nodes_Set() const;
    bool is_excluded_nodes_Valid() const;

    QString getExtra() const;
    void setExtra(const QString &extra);
    bool is_extra_Set() const;
    bool is_extra_Valid() const;

    QString getConstraints() const;
    void setConstraints(const QString &constraints);
    bool is_constraints_Set() const;
    bool is_constraints_Valid() const;

    QString getGroupId() const;
    void setGroupId(const QString &group_id);
    bool is_group_id_Set() const;
    bool is_group_id_Valid() const;

    qint32 getHetjobGroup() const;
    void setHetjobGroup(const qint32 &hetjob_group);
    bool is_hetjob_group_Set() const;
    bool is_hetjob_group_Valid() const;

    bool isImmediate() const;
    void setImmediate(const bool &immediate);
    bool is_immediate_Set() const;
    bool is_immediate_Valid() const;

    qint32 getJobId() const;
    void setJobId(const qint32 &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    bool isKillOnNodeFail() const;
    void setKillOnNodeFail(const bool &kill_on_node_fail);
    bool is_kill_on_node_fail_Set() const;
    bool is_kill_on_node_fail_Valid() const;

    QString getLicenses() const;
    void setLicenses(const QString &licenses);
    bool is_licenses_Set() const;
    bool is_licenses_Valid() const;

    QList<QString> getMailType() const;
    void setMailType(const QList<QString> &mail_type);
    bool is_mail_type_Set() const;
    bool is_mail_type_Valid() const;

    QString getMailUser() const;
    void setMailUser(const QString &mail_user);
    bool is_mail_user_Set() const;
    bool is_mail_user_Valid() const;

    QString getMcsLabel() const;
    void setMcsLabel(const QString &mcs_label);
    bool is_mcs_label_Set() const;
    bool is_mcs_label_Valid() const;

    QString getMemoryBinding() const;
    void setMemoryBinding(const QString &memory_binding);
    bool is_memory_binding_Set() const;
    bool is_memory_binding_Valid() const;

    QList<QString> getMemoryBindingType() const;
    void setMemoryBindingType(const QList<QString> &memory_binding_type);
    bool is_memory_binding_type_Set() const;
    bool is_memory_binding_type_Valid() const;

    QString getMemoryPerTres() const;
    void setMemoryPerTres(const QString &memory_per_tres);
    bool is_memory_per_tres_Set() const;
    bool is_memory_per_tres_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    qint32 getNice() const;
    void setNice(const qint32 &nice);
    bool is_nice_Set() const;
    bool is_nice_Valid() const;

    qint32 getTasks() const;
    void setTasks(const qint32 &tasks);
    bool is_tasks_Set() const;
    bool is_tasks_Valid() const;

    QList<QString> getOpenMode() const;
    void setOpenMode(const QList<QString> &open_mode);
    bool is_open_mode_Set() const;
    bool is_open_mode_Valid() const;

    qint32 getReservePorts() const;
    void setReservePorts(const qint32 &reserve_ports);
    bool is_reserve_ports_Set() const;
    bool is_reserve_ports_Valid() const;

    bool isOvercommit() const;
    void setOvercommit(const bool &overcommit);
    bool is_overcommit_Set() const;
    bool is_overcommit_Valid() const;

    QString getPartition() const;
    void setPartition(const QString &partition);
    bool is_partition_Set() const;
    bool is_partition_Valid() const;

    OAIV0_0_41_job_desc_msg_distribution_plane_size getDistributionPlaneSize() const;
    void setDistributionPlaneSize(const OAIV0_0_41_job_desc_msg_distribution_plane_size &distribution_plane_size);
    bool is_distribution_plane_size_Set() const;
    bool is_distribution_plane_size_Valid() const;

    Q_DECL_DEPRECATED QList<QJsonValue> getPowerFlags() const;
    Q_DECL_DEPRECATED void setPowerFlags(const QList<QJsonValue> &power_flags);
    Q_DECL_DEPRECATED bool is_power_flags_Set() const;
    Q_DECL_DEPRECATED bool is_power_flags_Valid() const;

    QString getPrefer() const;
    void setPrefer(const QString &prefer);
    bool is_prefer_Set() const;
    bool is_prefer_Valid() const;

    bool isHold() const;
    void setHold(const bool &hold);
    bool is_hold_Set() const;
    bool is_hold_Valid() const;

    OAIV0_0_41_job_desc_msg_priority getPriority() const;
    void setPriority(const OAIV0_0_41_job_desc_msg_priority &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QList<QString> getProfile() const;
    void setProfile(const QList<QString> &profile);
    bool is_profile_Set() const;
    bool is_profile_Valid() const;

    QString getQos() const;
    void setQos(const QString &qos);
    bool is_qos_Set() const;
    bool is_qos_Valid() const;

    bool isReboot() const;
    void setReboot(const bool &reboot);
    bool is_reboot_Set() const;
    bool is_reboot_Valid() const;

    QList<QString> getRequiredNodes() const;
    void setRequiredNodes(const QList<QString> &required_nodes);
    bool is_required_nodes_Set() const;
    bool is_required_nodes_Valid() const;

    bool isRequeue() const;
    void setRequeue(const bool &requeue);
    bool is_requeue_Set() const;
    bool is_requeue_Valid() const;

    QString getReservation() const;
    void setReservation(const QString &reservation);
    bool is_reservation_Set() const;
    bool is_reservation_Valid() const;

    qint32 getResvMpiPorts() const;
    void setResvMpiPorts(const qint32 &resv_mpi_ports);
    bool is_resv_mpi_ports_Set() const;
    bool is_resv_mpi_ports_Valid() const;

    QString getScript() const;
    void setScript(const QString &script);
    bool is_script_Set() const;
    bool is_script_Valid() const;

    QList<QString> getShared() const;
    void setShared(const QList<QString> &shared);
    bool is_shared_Set() const;
    bool is_shared_Valid() const;

    Q_DECL_DEPRECATED QList<QString> getExclusive() const;
    Q_DECL_DEPRECATED void setExclusive(const QList<QString> &exclusive);
    Q_DECL_DEPRECATED bool is_exclusive_Set() const;
    Q_DECL_DEPRECATED bool is_exclusive_Valid() const;

    Q_DECL_DEPRECATED bool isOversubscribe() const;
    Q_DECL_DEPRECATED void setOversubscribe(const bool &oversubscribe);
    Q_DECL_DEPRECATED bool is_oversubscribe_Set() const;
    Q_DECL_DEPRECATED bool is_oversubscribe_Valid() const;

    qint32 getSiteFactor() const;
    void setSiteFactor(const qint32 &site_factor);
    bool is_site_factor_Set() const;
    bool is_site_factor_Valid() const;

    QList<QString> getSpankEnvironment() const;
    void setSpankEnvironment(const QList<QString> &spank_environment);
    bool is_spank_environment_Set() const;
    bool is_spank_environment_Valid() const;

    QString getDistribution() const;
    void setDistribution(const QString &distribution);
    bool is_distribution_Set() const;
    bool is_distribution_Valid() const;

    OAIV0_0_41_job_desc_msg_time_limit getTimeLimit() const;
    void setTimeLimit(const OAIV0_0_41_job_desc_msg_time_limit &time_limit);
    bool is_time_limit_Set() const;
    bool is_time_limit_Valid() const;

    OAIV0_0_41_job_desc_msg_time_minimum getTimeMinimum() const;
    void setTimeMinimum(const OAIV0_0_41_job_desc_msg_time_minimum &time_minimum);
    bool is_time_minimum_Set() const;
    bool is_time_minimum_Valid() const;

    QString getTresBind() const;
    void setTresBind(const QString &tres_bind);
    bool is_tres_bind_Set() const;
    bool is_tres_bind_Valid() const;

    QString getTresFreq() const;
    void setTresFreq(const QString &tres_freq);
    bool is_tres_freq_Set() const;
    bool is_tres_freq_Valid() const;

    QString getTresPerJob() const;
    void setTresPerJob(const QString &tres_per_job);
    bool is_tres_per_job_Set() const;
    bool is_tres_per_job_Valid() const;

    QString getTresPerNode() const;
    void setTresPerNode(const QString &tres_per_node);
    bool is_tres_per_node_Set() const;
    bool is_tres_per_node_Valid() const;

    QString getTresPerSocket() const;
    void setTresPerSocket(const QString &tres_per_socket);
    bool is_tres_per_socket_Set() const;
    bool is_tres_per_socket_Valid() const;

    QString getTresPerTask() const;
    void setTresPerTask(const QString &tres_per_task);
    bool is_tres_per_task_Set() const;
    bool is_tres_per_task_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    bool isWaitAllNodes() const;
    void setWaitAllNodes(const bool &wait_all_nodes);
    bool is_wait_all_nodes_Set() const;
    bool is_wait_all_nodes_Valid() const;

    QList<QString> getKillWarningFlags() const;
    void setKillWarningFlags(const QList<QString> &kill_warning_flags);
    bool is_kill_warning_flags_Set() const;
    bool is_kill_warning_flags_Valid() const;

    QString getKillWarningSignal() const;
    void setKillWarningSignal(const QString &kill_warning_signal);
    bool is_kill_warning_signal_Set() const;
    bool is_kill_warning_signal_Valid() const;

    OAIV0_0_41_job_desc_msg_kill_warning_delay getKillWarningDelay() const;
    void setKillWarningDelay(const OAIV0_0_41_job_desc_msg_kill_warning_delay &kill_warning_delay);
    bool is_kill_warning_delay_Set() const;
    bool is_kill_warning_delay_Valid() const;

    QString getCurrentWorkingDirectory() const;
    void setCurrentWorkingDirectory(const QString &current_working_directory);
    bool is_current_working_directory_Set() const;
    bool is_current_working_directory_Valid() const;

    qint32 getCpusPerTask() const;
    void setCpusPerTask(const qint32 &cpus_per_task);
    bool is_cpus_per_task_Set() const;
    bool is_cpus_per_task_Valid() const;

    qint32 getMinimumCpus() const;
    void setMinimumCpus(const qint32 &minimum_cpus);
    bool is_minimum_cpus_Set() const;
    bool is_minimum_cpus_Valid() const;

    qint32 getMaximumCpus() const;
    void setMaximumCpus(const qint32 &maximum_cpus);
    bool is_maximum_cpus_Set() const;
    bool is_maximum_cpus_Valid() const;

    QString getNodes() const;
    void setNodes(const QString &nodes);
    bool is_nodes_Set() const;
    bool is_nodes_Valid() const;

    qint32 getMinimumNodes() const;
    void setMinimumNodes(const qint32 &minimum_nodes);
    bool is_minimum_nodes_Set() const;
    bool is_minimum_nodes_Valid() const;

    qint32 getMaximumNodes() const;
    void setMaximumNodes(const qint32 &maximum_nodes);
    bool is_maximum_nodes_Set() const;
    bool is_maximum_nodes_Valid() const;

    qint32 getMinimumBoardsPerNode() const;
    void setMinimumBoardsPerNode(const qint32 &minimum_boards_per_node);
    bool is_minimum_boards_per_node_Set() const;
    bool is_minimum_boards_per_node_Valid() const;

    qint32 getMinimumSocketsPerBoard() const;
    void setMinimumSocketsPerBoard(const qint32 &minimum_sockets_per_board);
    bool is_minimum_sockets_per_board_Set() const;
    bool is_minimum_sockets_per_board_Valid() const;

    qint32 getSocketsPerNode() const;
    void setSocketsPerNode(const qint32 &sockets_per_node);
    bool is_sockets_per_node_Set() const;
    bool is_sockets_per_node_Valid() const;

    qint32 getThreadsPerCore() const;
    void setThreadsPerCore(const qint32 &threads_per_core);
    bool is_threads_per_core_Set() const;
    bool is_threads_per_core_Valid() const;

    qint32 getTasksPerNode() const;
    void setTasksPerNode(const qint32 &tasks_per_node);
    bool is_tasks_per_node_Set() const;
    bool is_tasks_per_node_Valid() const;

    qint32 getTasksPerSocket() const;
    void setTasksPerSocket(const qint32 &tasks_per_socket);
    bool is_tasks_per_socket_Set() const;
    bool is_tasks_per_socket_Valid() const;

    qint32 getTasksPerCore() const;
    void setTasksPerCore(const qint32 &tasks_per_core);
    bool is_tasks_per_core_Set() const;
    bool is_tasks_per_core_Valid() const;

    qint32 getTasksPerBoard() const;
    void setTasksPerBoard(const qint32 &tasks_per_board);
    bool is_tasks_per_board_Set() const;
    bool is_tasks_per_board_Valid() const;

    qint32 getNtasksPerTres() const;
    void setNtasksPerTres(const qint32 &ntasks_per_tres);
    bool is_ntasks_per_tres_Set() const;
    bool is_ntasks_per_tres_Valid() const;

    qint32 getMinimumCpusPerNode() const;
    void setMinimumCpusPerNode(const qint32 &minimum_cpus_per_node);
    bool is_minimum_cpus_per_node_Set() const;
    bool is_minimum_cpus_per_node_Valid() const;

    OAIV0_0_41_job_desc_msg_memory_per_cpu getMemoryPerCpu() const;
    void setMemoryPerCpu(const OAIV0_0_41_job_desc_msg_memory_per_cpu &memory_per_cpu);
    bool is_memory_per_cpu_Set() const;
    bool is_memory_per_cpu_Valid() const;

    OAIV0_0_41_job_desc_msg_memory_per_cpu getMemoryPerNode() const;
    void setMemoryPerNode(const OAIV0_0_41_job_desc_msg_memory_per_cpu &memory_per_node);
    bool is_memory_per_node_Set() const;
    bool is_memory_per_node_Valid() const;

    qint32 getTemporaryDiskPerNode() const;
    void setTemporaryDiskPerNode(const qint32 &temporary_disk_per_node);
    bool is_temporary_disk_per_node_Set() const;
    bool is_temporary_disk_per_node_Valid() const;

    QString getSelinuxContext() const;
    void setSelinuxContext(const QString &selinux_context);
    bool is_selinux_context_Set() const;
    bool is_selinux_context_Valid() const;

    OAIV0_0_41_job_desc_msg_required_switches getRequiredSwitches() const;
    void setRequiredSwitches(const OAIV0_0_41_job_desc_msg_required_switches &required_switches);
    bool is_required_switches_Set() const;
    bool is_required_switches_Valid() const;

    OAIV0_0_41_job_desc_msg_segment_size getSegmentSize() const;
    void setSegmentSize(const OAIV0_0_41_job_desc_msg_segment_size &segment_size);
    bool is_segment_size_Set() const;
    bool is_segment_size_Valid() const;

    QString getStandardError() const;
    void setStandardError(const QString &standard_error);
    bool is_standard_error_Set() const;
    bool is_standard_error_Valid() const;

    QString getStandardInput() const;
    void setStandardInput(const QString &standard_input);
    bool is_standard_input_Set() const;
    bool is_standard_input_Valid() const;

    QString getStandardOutput() const;
    void setStandardOutput(const QString &standard_output);
    bool is_standard_output_Set() const;
    bool is_standard_output_Valid() const;

    qint32 getWaitForSwitch() const;
    void setWaitForSwitch(const qint32 &wait_for_switch);
    bool is_wait_for_switch_Set() const;
    bool is_wait_for_switch_Valid() const;

    QString getWckey() const;
    void setWckey(const QString &wckey);
    bool is_wckey_Set() const;
    bool is_wckey_Valid() const;

    QList<QString> getX11() const;
    void setX11(const QList<QString> &x11);
    bool is_x11_Set() const;
    bool is_x11_Valid() const;

    QString getX11MagicCookie() const;
    void setX11MagicCookie(const QString &x11_magic_cookie);
    bool is_x11_magic_cookie_Set() const;
    bool is_x11_magic_cookie_Valid() const;

    QString getX11TargetHost() const;
    void setX11TargetHost(const QString &x11_target_host);
    bool is_x11_target_host_Set() const;
    bool is_x11_target_host_Valid() const;

    qint32 getX11TargetPort() const;
    void setX11TargetPort(const qint32 &x11_target_port);
    bool is_x11_target_port_Set() const;
    bool is_x11_target_port_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    QString m_account_gather_frequency;
    bool m_account_gather_frequency_isSet;
    bool m_account_gather_frequency_isValid;

    QString m_admin_comment;
    bool m_admin_comment_isSet;
    bool m_admin_comment_isValid;

    QString m_allocation_node_list;
    bool m_allocation_node_list_isSet;
    bool m_allocation_node_list_isValid;

    qint32 m_allocation_node_port;
    bool m_allocation_node_port_isSet;
    bool m_allocation_node_port_isValid;

    QList<QString> m_argv;
    bool m_argv_isSet;
    bool m_argv_isValid;

    QString m_array;
    bool m_array_isSet;
    bool m_array_isValid;

    QString m_batch_features;
    bool m_batch_features_isSet;
    bool m_batch_features_isValid;

    OAIV0_0_41_job_desc_msg_begin_time m_begin_time;
    bool m_begin_time_isSet;
    bool m_begin_time_isValid;

    QList<QString> m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    QString m_burst_buffer;
    bool m_burst_buffer_isSet;
    bool m_burst_buffer_isValid;

    QString m_clusters;
    bool m_clusters_isSet;
    bool m_clusters_isValid;

    QString m_cluster_constraint;
    bool m_cluster_constraint_isSet;
    bool m_cluster_constraint_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    bool m_contiguous;
    bool m_contiguous_isSet;
    bool m_contiguous_isValid;

    QString m_container;
    bool m_container_isSet;
    bool m_container_isValid;

    QString m_container_id;
    bool m_container_id_isSet;
    bool m_container_id_isValid;

    qint32 m_core_specification;
    bool m_core_specification_isSet;
    bool m_core_specification_isValid;

    qint32 m_thread_specification;
    bool m_thread_specification_isSet;
    bool m_thread_specification_isValid;

    QString m_cpu_binding;
    bool m_cpu_binding_isSet;
    bool m_cpu_binding_isValid;

    QList<QString> m_cpu_binding_flags;
    bool m_cpu_binding_flags_isSet;
    bool m_cpu_binding_flags_isValid;

    QString m_cpu_frequency;
    bool m_cpu_frequency_isSet;
    bool m_cpu_frequency_isValid;

    QString m_cpus_per_tres;
    bool m_cpus_per_tres_isSet;
    bool m_cpus_per_tres_isValid;

    OAIV0_0_41_job_desc_msg_crontab m_crontab;
    bool m_crontab_isSet;
    bool m_crontab_isValid;

    qint64 m_deadline;
    bool m_deadline_isSet;
    bool m_deadline_isValid;

    qint32 m_delay_boot;
    bool m_delay_boot_isSet;
    bool m_delay_boot_isValid;

    QString m_dependency;
    bool m_dependency_isSet;
    bool m_dependency_isValid;

    qint64 m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QList<QString> m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    OAIV0_0_41_job_desc_msg_rlimits m_rlimits;
    bool m_rlimits_isSet;
    bool m_rlimits_isValid;

    QList<QString> m_excluded_nodes;
    bool m_excluded_nodes_isSet;
    bool m_excluded_nodes_isValid;

    QString m_extra;
    bool m_extra_isSet;
    bool m_extra_isValid;

    QString m_constraints;
    bool m_constraints_isSet;
    bool m_constraints_isValid;

    QString m_group_id;
    bool m_group_id_isSet;
    bool m_group_id_isValid;

    qint32 m_hetjob_group;
    bool m_hetjob_group_isSet;
    bool m_hetjob_group_isValid;

    bool m_immediate;
    bool m_immediate_isSet;
    bool m_immediate_isValid;

    qint32 m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    bool m_kill_on_node_fail;
    bool m_kill_on_node_fail_isSet;
    bool m_kill_on_node_fail_isValid;

    QString m_licenses;
    bool m_licenses_isSet;
    bool m_licenses_isValid;

    QList<QString> m_mail_type;
    bool m_mail_type_isSet;
    bool m_mail_type_isValid;

    QString m_mail_user;
    bool m_mail_user_isSet;
    bool m_mail_user_isValid;

    QString m_mcs_label;
    bool m_mcs_label_isSet;
    bool m_mcs_label_isValid;

    QString m_memory_binding;
    bool m_memory_binding_isSet;
    bool m_memory_binding_isValid;

    QList<QString> m_memory_binding_type;
    bool m_memory_binding_type_isSet;
    bool m_memory_binding_type_isValid;

    QString m_memory_per_tres;
    bool m_memory_per_tres_isSet;
    bool m_memory_per_tres_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    qint32 m_nice;
    bool m_nice_isSet;
    bool m_nice_isValid;

    qint32 m_tasks;
    bool m_tasks_isSet;
    bool m_tasks_isValid;

    QList<QString> m_open_mode;
    bool m_open_mode_isSet;
    bool m_open_mode_isValid;

    qint32 m_reserve_ports;
    bool m_reserve_ports_isSet;
    bool m_reserve_ports_isValid;

    bool m_overcommit;
    bool m_overcommit_isSet;
    bool m_overcommit_isValid;

    QString m_partition;
    bool m_partition_isSet;
    bool m_partition_isValid;

    OAIV0_0_41_job_desc_msg_distribution_plane_size m_distribution_plane_size;
    bool m_distribution_plane_size_isSet;
    bool m_distribution_plane_size_isValid;

    QList<QJsonValue> m_power_flags;
    bool m_power_flags_isSet;
    bool m_power_flags_isValid;

    QString m_prefer;
    bool m_prefer_isSet;
    bool m_prefer_isValid;

    bool m_hold;
    bool m_hold_isSet;
    bool m_hold_isValid;

    OAIV0_0_41_job_desc_msg_priority m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QList<QString> m_profile;
    bool m_profile_isSet;
    bool m_profile_isValid;

    QString m_qos;
    bool m_qos_isSet;
    bool m_qos_isValid;

    bool m_reboot;
    bool m_reboot_isSet;
    bool m_reboot_isValid;

    QList<QString> m_required_nodes;
    bool m_required_nodes_isSet;
    bool m_required_nodes_isValid;

    bool m_requeue;
    bool m_requeue_isSet;
    bool m_requeue_isValid;

    QString m_reservation;
    bool m_reservation_isSet;
    bool m_reservation_isValid;

    qint32 m_resv_mpi_ports;
    bool m_resv_mpi_ports_isSet;
    bool m_resv_mpi_ports_isValid;

    QString m_script;
    bool m_script_isSet;
    bool m_script_isValid;

    QList<QString> m_shared;
    bool m_shared_isSet;
    bool m_shared_isValid;

    QList<QString> m_exclusive;
    bool m_exclusive_isSet;
    bool m_exclusive_isValid;

    bool m_oversubscribe;
    bool m_oversubscribe_isSet;
    bool m_oversubscribe_isValid;

    qint32 m_site_factor;
    bool m_site_factor_isSet;
    bool m_site_factor_isValid;

    QList<QString> m_spank_environment;
    bool m_spank_environment_isSet;
    bool m_spank_environment_isValid;

    QString m_distribution;
    bool m_distribution_isSet;
    bool m_distribution_isValid;

    OAIV0_0_41_job_desc_msg_time_limit m_time_limit;
    bool m_time_limit_isSet;
    bool m_time_limit_isValid;

    OAIV0_0_41_job_desc_msg_time_minimum m_time_minimum;
    bool m_time_minimum_isSet;
    bool m_time_minimum_isValid;

    QString m_tres_bind;
    bool m_tres_bind_isSet;
    bool m_tres_bind_isValid;

    QString m_tres_freq;
    bool m_tres_freq_isSet;
    bool m_tres_freq_isValid;

    QString m_tres_per_job;
    bool m_tres_per_job_isSet;
    bool m_tres_per_job_isValid;

    QString m_tres_per_node;
    bool m_tres_per_node_isSet;
    bool m_tres_per_node_isValid;

    QString m_tres_per_socket;
    bool m_tres_per_socket_isSet;
    bool m_tres_per_socket_isValid;

    QString m_tres_per_task;
    bool m_tres_per_task_isSet;
    bool m_tres_per_task_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    bool m_wait_all_nodes;
    bool m_wait_all_nodes_isSet;
    bool m_wait_all_nodes_isValid;

    QList<QString> m_kill_warning_flags;
    bool m_kill_warning_flags_isSet;
    bool m_kill_warning_flags_isValid;

    QString m_kill_warning_signal;
    bool m_kill_warning_signal_isSet;
    bool m_kill_warning_signal_isValid;

    OAIV0_0_41_job_desc_msg_kill_warning_delay m_kill_warning_delay;
    bool m_kill_warning_delay_isSet;
    bool m_kill_warning_delay_isValid;

    QString m_current_working_directory;
    bool m_current_working_directory_isSet;
    bool m_current_working_directory_isValid;

    qint32 m_cpus_per_task;
    bool m_cpus_per_task_isSet;
    bool m_cpus_per_task_isValid;

    qint32 m_minimum_cpus;
    bool m_minimum_cpus_isSet;
    bool m_minimum_cpus_isValid;

    qint32 m_maximum_cpus;
    bool m_maximum_cpus_isSet;
    bool m_maximum_cpus_isValid;

    QString m_nodes;
    bool m_nodes_isSet;
    bool m_nodes_isValid;

    qint32 m_minimum_nodes;
    bool m_minimum_nodes_isSet;
    bool m_minimum_nodes_isValid;

    qint32 m_maximum_nodes;
    bool m_maximum_nodes_isSet;
    bool m_maximum_nodes_isValid;

    qint32 m_minimum_boards_per_node;
    bool m_minimum_boards_per_node_isSet;
    bool m_minimum_boards_per_node_isValid;

    qint32 m_minimum_sockets_per_board;
    bool m_minimum_sockets_per_board_isSet;
    bool m_minimum_sockets_per_board_isValid;

    qint32 m_sockets_per_node;
    bool m_sockets_per_node_isSet;
    bool m_sockets_per_node_isValid;

    qint32 m_threads_per_core;
    bool m_threads_per_core_isSet;
    bool m_threads_per_core_isValid;

    qint32 m_tasks_per_node;
    bool m_tasks_per_node_isSet;
    bool m_tasks_per_node_isValid;

    qint32 m_tasks_per_socket;
    bool m_tasks_per_socket_isSet;
    bool m_tasks_per_socket_isValid;

    qint32 m_tasks_per_core;
    bool m_tasks_per_core_isSet;
    bool m_tasks_per_core_isValid;

    qint32 m_tasks_per_board;
    bool m_tasks_per_board_isSet;
    bool m_tasks_per_board_isValid;

    qint32 m_ntasks_per_tres;
    bool m_ntasks_per_tres_isSet;
    bool m_ntasks_per_tres_isValid;

    qint32 m_minimum_cpus_per_node;
    bool m_minimum_cpus_per_node_isSet;
    bool m_minimum_cpus_per_node_isValid;

    OAIV0_0_41_job_desc_msg_memory_per_cpu m_memory_per_cpu;
    bool m_memory_per_cpu_isSet;
    bool m_memory_per_cpu_isValid;

    OAIV0_0_41_job_desc_msg_memory_per_cpu m_memory_per_node;
    bool m_memory_per_node_isSet;
    bool m_memory_per_node_isValid;

    qint32 m_temporary_disk_per_node;
    bool m_temporary_disk_per_node_isSet;
    bool m_temporary_disk_per_node_isValid;

    QString m_selinux_context;
    bool m_selinux_context_isSet;
    bool m_selinux_context_isValid;

    OAIV0_0_41_job_desc_msg_required_switches m_required_switches;
    bool m_required_switches_isSet;
    bool m_required_switches_isValid;

    OAIV0_0_41_job_desc_msg_segment_size m_segment_size;
    bool m_segment_size_isSet;
    bool m_segment_size_isValid;

    QString m_standard_error;
    bool m_standard_error_isSet;
    bool m_standard_error_isValid;

    QString m_standard_input;
    bool m_standard_input_isSet;
    bool m_standard_input_isValid;

    QString m_standard_output;
    bool m_standard_output_isSet;
    bool m_standard_output_isValid;

    qint32 m_wait_for_switch;
    bool m_wait_for_switch_isSet;
    bool m_wait_for_switch_isValid;

    QString m_wckey;
    bool m_wckey_isSet;
    bool m_wckey_isValid;

    QList<QString> m_x11;
    bool m_x11_isSet;
    bool m_x11_isValid;

    QString m_x11_magic_cookie;
    bool m_x11_magic_cookie_isSet;
    bool m_x11_magic_cookie_isValid;

    QString m_x11_target_host;
    bool m_x11_target_host_isSet;
    bool m_x11_target_host_isValid;

    qint32 m_x11_target_port;
    bool m_x11_target_port_isSet;
    bool m_x11_target_port_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV0_0_41_job_desc_msg)

#endif // OAIV0_0_41_job_desc_msg_H
