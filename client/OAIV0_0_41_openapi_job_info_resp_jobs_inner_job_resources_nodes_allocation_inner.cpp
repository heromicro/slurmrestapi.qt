/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace hm:slurm:client {

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner() {
    this->initializeModel();
}

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::~OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner() {}

void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_cpus_isSet = false;
    m_cpus_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_sockets_isSet = false;
    m_sockets_isValid = false;
}

void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::hm:slurm:client::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_name_isValid = ::hm:slurm:client::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_cpus_isValid = ::hm:slurm:client::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;

    m_memory_isValid = ::hm:slurm:client::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_sockets_isValid = ::hm:slurm:client::fromJsonValue(m_sockets, json[QString("sockets")]);
    m_sockets_isSet = !json[QString("sockets")].isNull() && m_sockets_isValid;
}

QString OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::hm:slurm:client::toJsonValue(m_index));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::hm:slurm:client::toJsonValue(m_name));
    }
    if (m_cpus.isSet()) {
        obj.insert(QString("cpus"), ::hm:slurm:client::toJsonValue(m_cpus));
    }
    if (m_memory.isSet()) {
        obj.insert(QString("memory"), ::hm:slurm:client::toJsonValue(m_memory));
    }
    if (m_sockets.size() > 0) {
        obj.insert(QString("sockets"), ::hm:slurm:client::toJsonValue(m_sockets));
    }
    return obj;
}

qint32 OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getIndex() const {
    return m_index;
}
void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_index_Set() const{
    return m_index_isSet;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getName() const {
    return m_name;
}
void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_cpus OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getCpus() const {
    return m_cpus;
}
void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setCpus(const OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_cpus &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_cpus_Valid() const{
    return m_cpus_isValid;
}

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getMemory() const {
    return m_memory;
}
void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setMemory(const OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_memory_Valid() const{
    return m_memory_isValid;
}

QList<OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_sockets_inner> OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getSockets() const {
    return m_sockets;
}
void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setSockets(const QList<OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_sockets_inner> &sockets) {
    m_sockets = sockets;
    m_sockets_isSet = true;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_sockets_Set() const{
    return m_sockets_isSet;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::is_sockets_Valid() const{
    return m_sockets_isValid;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sockets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_isValid && m_name_isValid && m_sockets_isValid && true;
}

} // namespace hm:slurm:client
