/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_40_cluster_rec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_40_cluster_rec::OAIV0_0_40_cluster_rec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_40_cluster_rec::OAIV0_0_40_cluster_rec() {
    this->initializeModel();
}

OAIV0_0_40_cluster_rec::~OAIV0_0_40_cluster_rec() {}

void OAIV0_0_40_cluster_rec::initializeModel() {

    m_controller_isSet = false;
    m_controller_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_select_plugin_isSet = false;
    m_select_plugin_isValid = false;

    m_associations_isSet = false;
    m_associations_isValid = false;

    m_rpc_version_isSet = false;
    m_rpc_version_isValid = false;

    m_tres_isSet = false;
    m_tres_isValid = false;
}

void OAIV0_0_40_cluster_rec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_40_cluster_rec::fromJsonObject(QJsonObject json) {

    m_controller_isValid = ::OpenAPI::fromJsonValue(m_controller, json[QString("controller")]);
    m_controller_isSet = !json[QString("controller")].isNull() && m_controller_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_select_plugin_isValid = ::OpenAPI::fromJsonValue(m_select_plugin, json[QString("select_plugin")]);
    m_select_plugin_isSet = !json[QString("select_plugin")].isNull() && m_select_plugin_isValid;

    m_associations_isValid = ::OpenAPI::fromJsonValue(m_associations, json[QString("associations")]);
    m_associations_isSet = !json[QString("associations")].isNull() && m_associations_isValid;

    m_rpc_version_isValid = ::OpenAPI::fromJsonValue(m_rpc_version, json[QString("rpc_version")]);
    m_rpc_version_isSet = !json[QString("rpc_version")].isNull() && m_rpc_version_isValid;

    m_tres_isValid = ::OpenAPI::fromJsonValue(m_tres, json[QString("tres")]);
    m_tres_isSet = !json[QString("tres")].isNull() && m_tres_isValid;
}

QString OAIV0_0_40_cluster_rec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_40_cluster_rec::asJsonObject() const {
    QJsonObject obj;
    if (m_controller.isSet()) {
        obj.insert(QString("controller"), ::OpenAPI::toJsonValue(m_controller));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nodes_isSet) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_select_plugin_isSet) {
        obj.insert(QString("select_plugin"), ::OpenAPI::toJsonValue(m_select_plugin));
    }
    if (m_associations.isSet()) {
        obj.insert(QString("associations"), ::OpenAPI::toJsonValue(m_associations));
    }
    if (m_rpc_version_isSet) {
        obj.insert(QString("rpc_version"), ::OpenAPI::toJsonValue(m_rpc_version));
    }
    if (m_tres.size() > 0) {
        obj.insert(QString("tres"), ::OpenAPI::toJsonValue(m_tres));
    }
    return obj;
}

OAIV0_0_40_cluster_rec_controller OAIV0_0_40_cluster_rec::getController() const {
    return m_controller;
}
void OAIV0_0_40_cluster_rec::setController(const OAIV0_0_40_cluster_rec_controller &controller) {
    m_controller = controller;
    m_controller_isSet = true;
}

bool OAIV0_0_40_cluster_rec::is_controller_Set() const{
    return m_controller_isSet;
}

bool OAIV0_0_40_cluster_rec::is_controller_Valid() const{
    return m_controller_isValid;
}

QList<QString> OAIV0_0_40_cluster_rec::getFlags() const {
    return m_flags;
}
void OAIV0_0_40_cluster_rec::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIV0_0_40_cluster_rec::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIV0_0_40_cluster_rec::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIV0_0_40_cluster_rec::getName() const {
    return m_name;
}
void OAIV0_0_40_cluster_rec::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV0_0_40_cluster_rec::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV0_0_40_cluster_rec::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIV0_0_40_cluster_rec::getNodes() const {
    return m_nodes;
}
void OAIV0_0_40_cluster_rec::setNodes(const QString &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIV0_0_40_cluster_rec::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIV0_0_40_cluster_rec::is_nodes_Valid() const{
    return m_nodes_isValid;
}

QString OAIV0_0_40_cluster_rec::getSelectPlugin() const {
    return m_select_plugin;
}
void OAIV0_0_40_cluster_rec::setSelectPlugin(const QString &select_plugin) {
    m_select_plugin = select_plugin;
    m_select_plugin_isSet = true;
}

bool OAIV0_0_40_cluster_rec::is_select_plugin_Set() const{
    return m_select_plugin_isSet;
}

bool OAIV0_0_40_cluster_rec::is_select_plugin_Valid() const{
    return m_select_plugin_isValid;
}

OAIV0_0_40_cluster_rec_associations OAIV0_0_40_cluster_rec::getAssociations() const {
    return m_associations;
}
void OAIV0_0_40_cluster_rec::setAssociations(const OAIV0_0_40_cluster_rec_associations &associations) {
    m_associations = associations;
    m_associations_isSet = true;
}

bool OAIV0_0_40_cluster_rec::is_associations_Set() const{
    return m_associations_isSet;
}

bool OAIV0_0_40_cluster_rec::is_associations_Valid() const{
    return m_associations_isValid;
}

qint32 OAIV0_0_40_cluster_rec::getRpcVersion() const {
    return m_rpc_version;
}
void OAIV0_0_40_cluster_rec::setRpcVersion(const qint32 &rpc_version) {
    m_rpc_version = rpc_version;
    m_rpc_version_isSet = true;
}

bool OAIV0_0_40_cluster_rec::is_rpc_version_Set() const{
    return m_rpc_version_isSet;
}

bool OAIV0_0_40_cluster_rec::is_rpc_version_Valid() const{
    return m_rpc_version_isValid;
}

QList<OAIV0_0_40_tres> OAIV0_0_40_cluster_rec::getTres() const {
    return m_tres;
}
void OAIV0_0_40_cluster_rec::setTres(const QList<OAIV0_0_40_tres> &tres) {
    m_tres = tres;
    m_tres_isSet = true;
}

bool OAIV0_0_40_cluster_rec::is_tres_Set() const{
    return m_tres_isSet;
}

bool OAIV0_0_40_cluster_rec::is_tres_Valid() const{
    return m_tres_isValid;
}

bool OAIV0_0_40_cluster_rec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_controller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_plugin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpc_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_40_cluster_rec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
