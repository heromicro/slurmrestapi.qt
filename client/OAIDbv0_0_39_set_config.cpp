/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDbv0_0_39_set_config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDbv0_0_39_set_config::OAIDbv0_0_39_set_config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDbv0_0_39_set_config::OAIDbv0_0_39_set_config() {
    this->initializeModel();
}

OAIDbv0_0_39_set_config::~OAIDbv0_0_39_set_config() {}

void OAIDbv0_0_39_set_config::initializeModel() {

    m_clusters_isSet = false;
    m_clusters_isValid = false;

    m_tres_isSet = false;
    m_tres_isValid = false;

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_qos_isSet = false;
    m_qos_isValid = false;

    m_wckeys_isSet = false;
    m_wckeys_isValid = false;

    m_associations_isSet = false;
    m_associations_isValid = false;
}

void OAIDbv0_0_39_set_config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDbv0_0_39_set_config::fromJsonObject(QJsonObject json) {

    m_clusters_isValid = ::OpenAPI::fromJsonValue(m_clusters, json[QString("clusters")]);
    m_clusters_isSet = !json[QString("clusters")].isNull() && m_clusters_isValid;

    if(json["TRES"].isArray()){
        auto arr = json["TRES"].toArray();
        m_tres_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIV0_0_39_tres> item;
                m_tres_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_tres_isSet = !jval.isNull() && m_tres_isValid;
                m_tres.push_back(item);
            }
        }
    }

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;

    m_qos_isValid = ::OpenAPI::fromJsonValue(m_qos, json[QString("qos")]);
    m_qos_isSet = !json[QString("qos")].isNull() && m_qos_isValid;

    m_wckeys_isValid = ::OpenAPI::fromJsonValue(m_wckeys, json[QString("wckeys")]);
    m_wckeys_isSet = !json[QString("wckeys")].isNull() && m_wckeys_isValid;

    m_associations_isValid = ::OpenAPI::fromJsonValue(m_associations, json[QString("associations")]);
    m_associations_isSet = !json[QString("associations")].isNull() && m_associations_isValid;
}

QString OAIDbv0_0_39_set_config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDbv0_0_39_set_config::asJsonObject() const {
    QJsonObject obj;
    if (m_clusters.size() > 0) {
        obj.insert(QString("clusters"), ::OpenAPI::toJsonValue(m_clusters));
    }
    if (m_tres.size() > 0) {
        
        obj.insert(QString("TRES"), toJsonValue(m_tres));
    }
    if (m_accounts.size() > 0) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    if (m_qos.size() > 0) {
        obj.insert(QString("qos"), ::OpenAPI::toJsonValue(m_qos));
    }
    if (m_wckeys.size() > 0) {
        obj.insert(QString("wckeys"), ::OpenAPI::toJsonValue(m_wckeys));
    }
    if (m_associations.size() > 0) {
        obj.insert(QString("associations"), ::OpenAPI::toJsonValue(m_associations));
    }
    return obj;
}

QList<OAIV0_0_39_cluster_rec> OAIDbv0_0_39_set_config::getClusters() const {
    return m_clusters;
}
void OAIDbv0_0_39_set_config::setClusters(const QList<OAIV0_0_39_cluster_rec> &clusters) {
    m_clusters = clusters;
    m_clusters_isSet = true;
}

bool OAIDbv0_0_39_set_config::is_clusters_Set() const{
    return m_clusters_isSet;
}

bool OAIDbv0_0_39_set_config::is_clusters_Valid() const{
    return m_clusters_isValid;
}

QList<QList> OAIDbv0_0_39_set_config::getTres() const {
    return m_tres;
}
void OAIDbv0_0_39_set_config::setTres(const QList<QList> &tres) {
    m_tres = tres;
    m_tres_isSet = true;
}

bool OAIDbv0_0_39_set_config::is_tres_Set() const{
    return m_tres_isSet;
}

bool OAIDbv0_0_39_set_config::is_tres_Valid() const{
    return m_tres_isValid;
}

QList<OAIV0_0_39_account> OAIDbv0_0_39_set_config::getAccounts() const {
    return m_accounts;
}
void OAIDbv0_0_39_set_config::setAccounts(const QList<OAIV0_0_39_account> &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIDbv0_0_39_set_config::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIDbv0_0_39_set_config::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QList<OAIV0_0_39_user> OAIDbv0_0_39_set_config::getUsers() const {
    return m_users;
}
void OAIDbv0_0_39_set_config::setUsers(const QList<OAIV0_0_39_user> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIDbv0_0_39_set_config::is_users_Set() const{
    return m_users_isSet;
}

bool OAIDbv0_0_39_set_config::is_users_Valid() const{
    return m_users_isValid;
}

QList<OAIV0_0_39_qos> OAIDbv0_0_39_set_config::getQos() const {
    return m_qos;
}
void OAIDbv0_0_39_set_config::setQos(const QList<OAIV0_0_39_qos> &qos) {
    m_qos = qos;
    m_qos_isSet = true;
}

bool OAIDbv0_0_39_set_config::is_qos_Set() const{
    return m_qos_isSet;
}

bool OAIDbv0_0_39_set_config::is_qos_Valid() const{
    return m_qos_isValid;
}

QList<OAIV0_0_39_wckey> OAIDbv0_0_39_set_config::getWckeys() const {
    return m_wckeys;
}
void OAIDbv0_0_39_set_config::setWckeys(const QList<OAIV0_0_39_wckey> &wckeys) {
    m_wckeys = wckeys;
    m_wckeys_isSet = true;
}

bool OAIDbv0_0_39_set_config::is_wckeys_Set() const{
    return m_wckeys_isSet;
}

bool OAIDbv0_0_39_set_config::is_wckeys_Valid() const{
    return m_wckeys_isValid;
}

QList<OAIV0_0_39_assoc> OAIDbv0_0_39_set_config::getAssociations() const {
    return m_associations;
}
void OAIDbv0_0_39_set_config::setAssociations(const QList<OAIV0_0_39_assoc> &associations) {
    m_associations = associations;
    m_associations_isSet = true;
}

bool OAIDbv0_0_39_set_config::is_associations_Set() const{
    return m_associations_isSet;
}

bool OAIDbv0_0_39_set_config::is_associations_Valid() const{
    return m_associations_isValid;
}

bool OAIDbv0_0_39_set_config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clusters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_qos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wckeys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_associations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDbv0_0_39_set_config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
