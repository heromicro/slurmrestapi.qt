/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_39_reservation_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_39_reservation_info::OAIV0_0_39_reservation_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_39_reservation_info::OAIV0_0_39_reservation_info() {
    this->initializeModel();
}

OAIV0_0_39_reservation_info::~OAIV0_0_39_reservation_info() {}

void OAIV0_0_39_reservation_info::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_burst_buffer_isSet = false;
    m_burst_buffer_isValid = false;

    m_core_count_isSet = false;
    m_core_count_isValid = false;

    m_core_specializations_isSet = false;
    m_core_specializations_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_max_start_delay_isSet = false;
    m_max_start_delay_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_node_list_isSet = false;
    m_node_list_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_purge_completed_isSet = false;
    m_purge_completed_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_watts_isSet = false;
    m_watts_isValid = false;

    m_tres_isSet = false;
    m_tres_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIV0_0_39_reservation_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_39_reservation_info::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_burst_buffer_isValid = ::OpenAPI::fromJsonValue(m_burst_buffer, json[QString("burst_buffer")]);
    m_burst_buffer_isSet = !json[QString("burst_buffer")].isNull() && m_burst_buffer_isValid;

    m_core_count_isValid = ::OpenAPI::fromJsonValue(m_core_count, json[QString("core_count")]);
    m_core_count_isSet = !json[QString("core_count")].isNull() && m_core_count_isValid;

    m_core_specializations_isValid = ::OpenAPI::fromJsonValue(m_core_specializations, json[QString("core_specializations")]);
    m_core_specializations_isSet = !json[QString("core_specializations")].isNull() && m_core_specializations_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_max_start_delay_isValid = ::OpenAPI::fromJsonValue(m_max_start_delay, json[QString("max_start_delay")]);
    m_max_start_delay_isSet = !json[QString("max_start_delay")].isNull() && m_max_start_delay_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("node_count")]);
    m_node_count_isSet = !json[QString("node_count")].isNull() && m_node_count_isValid;

    m_node_list_isValid = ::OpenAPI::fromJsonValue(m_node_list, json[QString("node_list")]);
    m_node_list_isSet = !json[QString("node_list")].isNull() && m_node_list_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_purge_completed_isValid = ::OpenAPI::fromJsonValue(m_purge_completed, json[QString("purge_completed")]);
    m_purge_completed_isSet = !json[QString("purge_completed")].isNull() && m_purge_completed_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_watts_isValid = ::OpenAPI::fromJsonValue(m_watts, json[QString("watts")]);
    m_watts_isSet = !json[QString("watts")].isNull() && m_watts_isValid;

    m_tres_isValid = ::OpenAPI::fromJsonValue(m_tres, json[QString("tres")]);
    m_tres_isSet = !json[QString("tres")].isNull() && m_tres_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIV0_0_39_reservation_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_39_reservation_info::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts_isSet) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_burst_buffer_isSet) {
        obj.insert(QString("burst_buffer"), ::OpenAPI::toJsonValue(m_burst_buffer));
    }
    if (m_core_count_isSet) {
        obj.insert(QString("core_count"), ::OpenAPI::toJsonValue(m_core_count));
    }
    if (m_core_specializations.size() > 0) {
        obj.insert(QString("core_specializations"), ::OpenAPI::toJsonValue(m_core_specializations));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_features_isSet) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_groups_isSet) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_licenses_isSet) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_max_start_delay_isSet) {
        obj.insert(QString("max_start_delay"), ::OpenAPI::toJsonValue(m_max_start_delay));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("node_count"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_node_list_isSet) {
        obj.insert(QString("node_list"), ::OpenAPI::toJsonValue(m_node_list));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_purge_completed.isSet()) {
        obj.insert(QString("purge_completed"), ::OpenAPI::toJsonValue(m_purge_completed));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_watts.isSet()) {
        obj.insert(QString("watts"), ::OpenAPI::toJsonValue(m_watts));
    }
    if (m_tres_isSet) {
        obj.insert(QString("tres"), ::OpenAPI::toJsonValue(m_tres));
    }
    if (m_users_isSet) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QString OAIV0_0_39_reservation_info::getAccounts() const {
    return m_accounts;
}
void OAIV0_0_39_reservation_info::setAccounts(const QString &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIV0_0_39_reservation_info::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QString OAIV0_0_39_reservation_info::getBurstBuffer() const {
    return m_burst_buffer;
}
void OAIV0_0_39_reservation_info::setBurstBuffer(const QString &burst_buffer) {
    m_burst_buffer = burst_buffer;
    m_burst_buffer_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_burst_buffer_Set() const{
    return m_burst_buffer_isSet;
}

bool OAIV0_0_39_reservation_info::is_burst_buffer_Valid() const{
    return m_burst_buffer_isValid;
}

qint32 OAIV0_0_39_reservation_info::getCoreCount() const {
    return m_core_count;
}
void OAIV0_0_39_reservation_info::setCoreCount(const qint32 &core_count) {
    m_core_count = core_count;
    m_core_count_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_core_count_Set() const{
    return m_core_count_isSet;
}

bool OAIV0_0_39_reservation_info::is_core_count_Valid() const{
    return m_core_count_isValid;
}

QList<OAIV0_0_39_reservation_core_spec> OAIV0_0_39_reservation_info::getCoreSpecializations() const {
    return m_core_specializations;
}
void OAIV0_0_39_reservation_info::setCoreSpecializations(const QList<OAIV0_0_39_reservation_core_spec> &core_specializations) {
    m_core_specializations = core_specializations;
    m_core_specializations_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_core_specializations_Set() const{
    return m_core_specializations_isSet;
}

bool OAIV0_0_39_reservation_info::is_core_specializations_Valid() const{
    return m_core_specializations_isValid;
}

qint64 OAIV0_0_39_reservation_info::getEndTime() const {
    return m_end_time;
}
void OAIV0_0_39_reservation_info::setEndTime(const qint64 &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIV0_0_39_reservation_info::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIV0_0_39_reservation_info::getFeatures() const {
    return m_features;
}
void OAIV0_0_39_reservation_info::setFeatures(const QString &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_features_Set() const{
    return m_features_isSet;
}

bool OAIV0_0_39_reservation_info::is_features_Valid() const{
    return m_features_isValid;
}

QList<QString> OAIV0_0_39_reservation_info::getFlags() const {
    return m_flags;
}
void OAIV0_0_39_reservation_info::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIV0_0_39_reservation_info::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIV0_0_39_reservation_info::getGroups() const {
    return m_groups;
}
void OAIV0_0_39_reservation_info::setGroups(const QString &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIV0_0_39_reservation_info::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIV0_0_39_reservation_info::getLicenses() const {
    return m_licenses;
}
void OAIV0_0_39_reservation_info::setLicenses(const QString &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIV0_0_39_reservation_info::is_licenses_Valid() const{
    return m_licenses_isValid;
}

qint32 OAIV0_0_39_reservation_info::getMaxStartDelay() const {
    return m_max_start_delay;
}
void OAIV0_0_39_reservation_info::setMaxStartDelay(const qint32 &max_start_delay) {
    m_max_start_delay = max_start_delay;
    m_max_start_delay_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_max_start_delay_Set() const{
    return m_max_start_delay_isSet;
}

bool OAIV0_0_39_reservation_info::is_max_start_delay_Valid() const{
    return m_max_start_delay_isValid;
}

QString OAIV0_0_39_reservation_info::getName() const {
    return m_name;
}
void OAIV0_0_39_reservation_info::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV0_0_39_reservation_info::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIV0_0_39_reservation_info::getNodeCount() const {
    return m_node_count;
}
void OAIV0_0_39_reservation_info::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIV0_0_39_reservation_info::is_node_count_Valid() const{
    return m_node_count_isValid;
}

QString OAIV0_0_39_reservation_info::getNodeList() const {
    return m_node_list;
}
void OAIV0_0_39_reservation_info::setNodeList(const QString &node_list) {
    m_node_list = node_list;
    m_node_list_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_node_list_Set() const{
    return m_node_list_isSet;
}

bool OAIV0_0_39_reservation_info::is_node_list_Valid() const{
    return m_node_list_isValid;
}

QString OAIV0_0_39_reservation_info::getPartition() const {
    return m_partition;
}
void OAIV0_0_39_reservation_info::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIV0_0_39_reservation_info::is_partition_Valid() const{
    return m_partition_isValid;
}

OAIV0_0_39_reservation_info_purge_completed OAIV0_0_39_reservation_info::getPurgeCompleted() const {
    return m_purge_completed;
}
void OAIV0_0_39_reservation_info::setPurgeCompleted(const OAIV0_0_39_reservation_info_purge_completed &purge_completed) {
    m_purge_completed = purge_completed;
    m_purge_completed_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_purge_completed_Set() const{
    return m_purge_completed_isSet;
}

bool OAIV0_0_39_reservation_info::is_purge_completed_Valid() const{
    return m_purge_completed_isValid;
}

qint64 OAIV0_0_39_reservation_info::getStartTime() const {
    return m_start_time;
}
void OAIV0_0_39_reservation_info::setStartTime(const qint64 &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIV0_0_39_reservation_info::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIV0_0_39_uint32_no_val OAIV0_0_39_reservation_info::getWatts() const {
    return m_watts;
}
void OAIV0_0_39_reservation_info::setWatts(const OAIV0_0_39_uint32_no_val &watts) {
    m_watts = watts;
    m_watts_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_watts_Set() const{
    return m_watts_isSet;
}

bool OAIV0_0_39_reservation_info::is_watts_Valid() const{
    return m_watts_isValid;
}

QString OAIV0_0_39_reservation_info::getTres() const {
    return m_tres;
}
void OAIV0_0_39_reservation_info::setTres(const QString &tres) {
    m_tres = tres;
    m_tres_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_tres_Set() const{
    return m_tres_isSet;
}

bool OAIV0_0_39_reservation_info::is_tres_Valid() const{
    return m_tres_isValid;
}

QString OAIV0_0_39_reservation_info::getUsers() const {
    return m_users;
}
void OAIV0_0_39_reservation_info::setUsers(const QString &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIV0_0_39_reservation_info::is_users_Set() const{
    return m_users_isSet;
}

bool OAIV0_0_39_reservation_info::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIV0_0_39_reservation_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_burst_buffer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_specializations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_start_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purge_completed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_39_reservation_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
