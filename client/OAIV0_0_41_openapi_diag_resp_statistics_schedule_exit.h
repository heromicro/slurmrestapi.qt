/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV0_0_41_openapi_diag_resp_statistics_schedule_exit.h
 *
 * Reasons for which the scheduling cycle exited since last reset
 */

#ifndef OAIV0_0_41_openapi_diag_resp_statistics_schedule_exit_H
#define OAIV0_0_41_openapi_diag_resp_statistics_schedule_exit_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIV0_0_41_openapi_diag_resp_statistics_schedule_exit : public OAIObject {
public:
    OAIV0_0_41_openapi_diag_resp_statistics_schedule_exit();
    OAIV0_0_41_openapi_diag_resp_statistics_schedule_exit(QString json);
    ~OAIV0_0_41_openapi_diag_resp_statistics_schedule_exit() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getEndJobQueue() const;
    void setEndJobQueue(const qint32 &end_job_queue);
    bool is_end_job_queue_Set() const;
    bool is_end_job_queue_Valid() const;

    qint32 getDefaultQueueDepth() const;
    void setDefaultQueueDepth(const qint32 &default_queue_depth);
    bool is_default_queue_depth_Set() const;
    bool is_default_queue_depth_Valid() const;

    qint32 getMaxJobStart() const;
    void setMaxJobStart(const qint32 &max_job_start);
    bool is_max_job_start_Set() const;
    bool is_max_job_start_Valid() const;

    qint32 getMaxRpcCnt() const;
    void setMaxRpcCnt(const qint32 &max_rpc_cnt);
    bool is_max_rpc_cnt_Set() const;
    bool is_max_rpc_cnt_Valid() const;

    qint32 getMaxSchedTime() const;
    void setMaxSchedTime(const qint32 &max_sched_time);
    bool is_max_sched_time_Set() const;
    bool is_max_sched_time_Valid() const;

    qint32 getLicenses() const;
    void setLicenses(const qint32 &licenses);
    bool is_licenses_Set() const;
    bool is_licenses_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_end_job_queue;
    bool m_end_job_queue_isSet;
    bool m_end_job_queue_isValid;

    qint32 m_default_queue_depth;
    bool m_default_queue_depth_isSet;
    bool m_default_queue_depth_isValid;

    qint32 m_max_job_start;
    bool m_max_job_start_isSet;
    bool m_max_job_start_isValid;

    qint32 m_max_rpc_cnt;
    bool m_max_rpc_cnt_isSet;
    bool m_max_rpc_cnt_isValid;

    qint32 m_max_sched_time;
    bool m_max_sched_time_isSet;
    bool m_max_sched_time_isValid;

    qint32 m_licenses;
    bool m_licenses_isSet;
    bool m_licenses_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV0_0_41_openapi_diag_resp_statistics_schedule_exit)

#endif // OAIV0_0_41_openapi_diag_resp_statistics_schedule_exit_H
