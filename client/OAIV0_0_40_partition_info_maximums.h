/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV0_0_40_partition_info_maximums.h
 *
 * 
 */

#ifndef OAIV0_0_40_partition_info_maximums_H
#define OAIV0_0_40_partition_info_maximums_H

#include <QJsonObject>

#include "OAIV0_0_40_partition_info_maximums_oversubscribe.h"
#include "OAIV0_0_40_uint16_no_val.h"
#include "OAIV0_0_40_uint32_no_val.h"
#include "OAIV0_0_40_uint64_no_val.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV0_0_40_uint32_no_val;
class OAIV0_0_40_uint64_no_val;
class OAIV0_0_40_partition_info_maximums_oversubscribe;
class OAIV0_0_40_uint16_no_val;

class OAIV0_0_40_partition_info_maximums : public OAIObject {
public:
    OAIV0_0_40_partition_info_maximums();
    OAIV0_0_40_partition_info_maximums(QString json);
    ~OAIV0_0_40_partition_info_maximums() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIV0_0_40_uint32_no_val getCpusPerNode() const;
    void setCpusPerNode(const OAIV0_0_40_uint32_no_val &cpus_per_node);
    bool is_cpus_per_node_Set() const;
    bool is_cpus_per_node_Valid() const;

    OAIV0_0_40_uint32_no_val getCpusPerSocket() const;
    void setCpusPerSocket(const OAIV0_0_40_uint32_no_val &cpus_per_socket);
    bool is_cpus_per_socket_Set() const;
    bool is_cpus_per_socket_Valid() const;

    qint64 getMemoryPerCpu() const;
    void setMemoryPerCpu(const qint64 &memory_per_cpu);
    bool is_memory_per_cpu_Set() const;
    bool is_memory_per_cpu_Valid() const;

    OAIV0_0_40_uint64_no_val getPartitionMemoryPerCpu() const;
    void setPartitionMemoryPerCpu(const OAIV0_0_40_uint64_no_val &partition_memory_per_cpu);
    bool is_partition_memory_per_cpu_Set() const;
    bool is_partition_memory_per_cpu_Valid() const;

    OAIV0_0_40_uint64_no_val getPartitionMemoryPerNode() const;
    void setPartitionMemoryPerNode(const OAIV0_0_40_uint64_no_val &partition_memory_per_node);
    bool is_partition_memory_per_node_Set() const;
    bool is_partition_memory_per_node_Valid() const;

    OAIV0_0_40_uint32_no_val getNodes() const;
    void setNodes(const OAIV0_0_40_uint32_no_val &nodes);
    bool is_nodes_Set() const;
    bool is_nodes_Valid() const;

    qint32 getShares() const;
    void setShares(const qint32 &shares);
    bool is_shares_Set() const;
    bool is_shares_Valid() const;

    OAIV0_0_40_partition_info_maximums_oversubscribe getOversubscribe() const;
    void setOversubscribe(const OAIV0_0_40_partition_info_maximums_oversubscribe &oversubscribe);
    bool is_oversubscribe_Set() const;
    bool is_oversubscribe_Valid() const;

    OAIV0_0_40_uint32_no_val getTime() const;
    void setTime(const OAIV0_0_40_uint32_no_val &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    OAIV0_0_40_uint16_no_val getOverTimeLimit() const;
    void setOverTimeLimit(const OAIV0_0_40_uint16_no_val &over_time_limit);
    bool is_over_time_limit_Set() const;
    bool is_over_time_limit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIV0_0_40_uint32_no_val m_cpus_per_node;
    bool m_cpus_per_node_isSet;
    bool m_cpus_per_node_isValid;

    OAIV0_0_40_uint32_no_val m_cpus_per_socket;
    bool m_cpus_per_socket_isSet;
    bool m_cpus_per_socket_isValid;

    qint64 m_memory_per_cpu;
    bool m_memory_per_cpu_isSet;
    bool m_memory_per_cpu_isValid;

    OAIV0_0_40_uint64_no_val m_partition_memory_per_cpu;
    bool m_partition_memory_per_cpu_isSet;
    bool m_partition_memory_per_cpu_isValid;

    OAIV0_0_40_uint64_no_val m_partition_memory_per_node;
    bool m_partition_memory_per_node_isSet;
    bool m_partition_memory_per_node_isValid;

    OAIV0_0_40_uint32_no_val m_nodes;
    bool m_nodes_isSet;
    bool m_nodes_isValid;

    qint32 m_shares;
    bool m_shares_isSet;
    bool m_shares_isValid;

    OAIV0_0_40_partition_info_maximums_oversubscribe m_oversubscribe;
    bool m_oversubscribe_isSet;
    bool m_oversubscribe_isValid;

    OAIV0_0_40_uint32_no_val m_time;
    bool m_time_isSet;
    bool m_time_isValid;

    OAIV0_0_40_uint16_no_val m_over_time_limit;
    bool m_over_time_limit_isSet;
    bool m_over_time_limit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV0_0_40_partition_info_maximums)

#endif // OAIV0_0_40_partition_info_maximums_H
