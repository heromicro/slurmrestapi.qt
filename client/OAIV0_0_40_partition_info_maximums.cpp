/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_40_partition_info_maximums.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_40_partition_info_maximums::OAIV0_0_40_partition_info_maximums(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_40_partition_info_maximums::OAIV0_0_40_partition_info_maximums() {
    this->initializeModel();
}

OAIV0_0_40_partition_info_maximums::~OAIV0_0_40_partition_info_maximums() {}

void OAIV0_0_40_partition_info_maximums::initializeModel() {

    m_cpus_per_node_isSet = false;
    m_cpus_per_node_isValid = false;

    m_cpus_per_socket_isSet = false;
    m_cpus_per_socket_isValid = false;

    m_memory_per_cpu_isSet = false;
    m_memory_per_cpu_isValid = false;

    m_partition_memory_per_cpu_isSet = false;
    m_partition_memory_per_cpu_isValid = false;

    m_partition_memory_per_node_isSet = false;
    m_partition_memory_per_node_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_shares_isSet = false;
    m_shares_isValid = false;

    m_oversubscribe_isSet = false;
    m_oversubscribe_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_over_time_limit_isSet = false;
    m_over_time_limit_isValid = false;
}

void OAIV0_0_40_partition_info_maximums::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_40_partition_info_maximums::fromJsonObject(QJsonObject json) {

    m_cpus_per_node_isValid = ::OpenAPI::fromJsonValue(m_cpus_per_node, json[QString("cpus_per_node")]);
    m_cpus_per_node_isSet = !json[QString("cpus_per_node")].isNull() && m_cpus_per_node_isValid;

    m_cpus_per_socket_isValid = ::OpenAPI::fromJsonValue(m_cpus_per_socket, json[QString("cpus_per_socket")]);
    m_cpus_per_socket_isSet = !json[QString("cpus_per_socket")].isNull() && m_cpus_per_socket_isValid;

    m_memory_per_cpu_isValid = ::OpenAPI::fromJsonValue(m_memory_per_cpu, json[QString("memory_per_cpu")]);
    m_memory_per_cpu_isSet = !json[QString("memory_per_cpu")].isNull() && m_memory_per_cpu_isValid;

    m_partition_memory_per_cpu_isValid = ::OpenAPI::fromJsonValue(m_partition_memory_per_cpu, json[QString("partition_memory_per_cpu")]);
    m_partition_memory_per_cpu_isSet = !json[QString("partition_memory_per_cpu")].isNull() && m_partition_memory_per_cpu_isValid;

    m_partition_memory_per_node_isValid = ::OpenAPI::fromJsonValue(m_partition_memory_per_node, json[QString("partition_memory_per_node")]);
    m_partition_memory_per_node_isSet = !json[QString("partition_memory_per_node")].isNull() && m_partition_memory_per_node_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_shares_isValid = ::OpenAPI::fromJsonValue(m_shares, json[QString("shares")]);
    m_shares_isSet = !json[QString("shares")].isNull() && m_shares_isValid;

    m_oversubscribe_isValid = ::OpenAPI::fromJsonValue(m_oversubscribe, json[QString("oversubscribe")]);
    m_oversubscribe_isSet = !json[QString("oversubscribe")].isNull() && m_oversubscribe_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_over_time_limit_isValid = ::OpenAPI::fromJsonValue(m_over_time_limit, json[QString("over_time_limit")]);
    m_over_time_limit_isSet = !json[QString("over_time_limit")].isNull() && m_over_time_limit_isValid;
}

QString OAIV0_0_40_partition_info_maximums::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_40_partition_info_maximums::asJsonObject() const {
    QJsonObject obj;
    if (m_cpus_per_node.isSet()) {
        obj.insert(QString("cpus_per_node"), ::OpenAPI::toJsonValue(m_cpus_per_node));
    }
    if (m_cpus_per_socket.isSet()) {
        obj.insert(QString("cpus_per_socket"), ::OpenAPI::toJsonValue(m_cpus_per_socket));
    }
    if (m_memory_per_cpu_isSet) {
        obj.insert(QString("memory_per_cpu"), ::OpenAPI::toJsonValue(m_memory_per_cpu));
    }
    if (m_partition_memory_per_cpu.isSet()) {
        obj.insert(QString("partition_memory_per_cpu"), ::OpenAPI::toJsonValue(m_partition_memory_per_cpu));
    }
    if (m_partition_memory_per_node.isSet()) {
        obj.insert(QString("partition_memory_per_node"), ::OpenAPI::toJsonValue(m_partition_memory_per_node));
    }
    if (m_nodes.isSet()) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_shares_isSet) {
        obj.insert(QString("shares"), ::OpenAPI::toJsonValue(m_shares));
    }
    if (m_oversubscribe.isSet()) {
        obj.insert(QString("oversubscribe"), ::OpenAPI::toJsonValue(m_oversubscribe));
    }
    if (m_time.isSet()) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_over_time_limit.isSet()) {
        obj.insert(QString("over_time_limit"), ::OpenAPI::toJsonValue(m_over_time_limit));
    }
    return obj;
}

OAIV0_0_40_uint32_no_val OAIV0_0_40_partition_info_maximums::getCpusPerNode() const {
    return m_cpus_per_node;
}
void OAIV0_0_40_partition_info_maximums::setCpusPerNode(const OAIV0_0_40_uint32_no_val &cpus_per_node) {
    m_cpus_per_node = cpus_per_node;
    m_cpus_per_node_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_cpus_per_node_Set() const{
    return m_cpus_per_node_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_cpus_per_node_Valid() const{
    return m_cpus_per_node_isValid;
}

OAIV0_0_40_uint32_no_val OAIV0_0_40_partition_info_maximums::getCpusPerSocket() const {
    return m_cpus_per_socket;
}
void OAIV0_0_40_partition_info_maximums::setCpusPerSocket(const OAIV0_0_40_uint32_no_val &cpus_per_socket) {
    m_cpus_per_socket = cpus_per_socket;
    m_cpus_per_socket_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_cpus_per_socket_Set() const{
    return m_cpus_per_socket_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_cpus_per_socket_Valid() const{
    return m_cpus_per_socket_isValid;
}

qint64 OAIV0_0_40_partition_info_maximums::getMemoryPerCpu() const {
    return m_memory_per_cpu;
}
void OAIV0_0_40_partition_info_maximums::setMemoryPerCpu(const qint64 &memory_per_cpu) {
    m_memory_per_cpu = memory_per_cpu;
    m_memory_per_cpu_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_memory_per_cpu_Set() const{
    return m_memory_per_cpu_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_memory_per_cpu_Valid() const{
    return m_memory_per_cpu_isValid;
}

OAIV0_0_40_uint64_no_val OAIV0_0_40_partition_info_maximums::getPartitionMemoryPerCpu() const {
    return m_partition_memory_per_cpu;
}
void OAIV0_0_40_partition_info_maximums::setPartitionMemoryPerCpu(const OAIV0_0_40_uint64_no_val &partition_memory_per_cpu) {
    m_partition_memory_per_cpu = partition_memory_per_cpu;
    m_partition_memory_per_cpu_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_partition_memory_per_cpu_Set() const{
    return m_partition_memory_per_cpu_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_partition_memory_per_cpu_Valid() const{
    return m_partition_memory_per_cpu_isValid;
}

OAIV0_0_40_uint64_no_val OAIV0_0_40_partition_info_maximums::getPartitionMemoryPerNode() const {
    return m_partition_memory_per_node;
}
void OAIV0_0_40_partition_info_maximums::setPartitionMemoryPerNode(const OAIV0_0_40_uint64_no_val &partition_memory_per_node) {
    m_partition_memory_per_node = partition_memory_per_node;
    m_partition_memory_per_node_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_partition_memory_per_node_Set() const{
    return m_partition_memory_per_node_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_partition_memory_per_node_Valid() const{
    return m_partition_memory_per_node_isValid;
}

OAIV0_0_40_uint32_no_val OAIV0_0_40_partition_info_maximums::getNodes() const {
    return m_nodes;
}
void OAIV0_0_40_partition_info_maximums::setNodes(const OAIV0_0_40_uint32_no_val &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_nodes_Valid() const{
    return m_nodes_isValid;
}

qint32 OAIV0_0_40_partition_info_maximums::getShares() const {
    return m_shares;
}
void OAIV0_0_40_partition_info_maximums::setShares(const qint32 &shares) {
    m_shares = shares;
    m_shares_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_shares_Set() const{
    return m_shares_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_shares_Valid() const{
    return m_shares_isValid;
}

OAIV0_0_40_partition_info_maximums_oversubscribe OAIV0_0_40_partition_info_maximums::getOversubscribe() const {
    return m_oversubscribe;
}
void OAIV0_0_40_partition_info_maximums::setOversubscribe(const OAIV0_0_40_partition_info_maximums_oversubscribe &oversubscribe) {
    m_oversubscribe = oversubscribe;
    m_oversubscribe_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_oversubscribe_Set() const{
    return m_oversubscribe_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_oversubscribe_Valid() const{
    return m_oversubscribe_isValid;
}

OAIV0_0_40_uint32_no_val OAIV0_0_40_partition_info_maximums::getTime() const {
    return m_time;
}
void OAIV0_0_40_partition_info_maximums::setTime(const OAIV0_0_40_uint32_no_val &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_time_Set() const{
    return m_time_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_time_Valid() const{
    return m_time_isValid;
}

OAIV0_0_40_uint16_no_val OAIV0_0_40_partition_info_maximums::getOverTimeLimit() const {
    return m_over_time_limit;
}
void OAIV0_0_40_partition_info_maximums::setOverTimeLimit(const OAIV0_0_40_uint16_no_val &over_time_limit) {
    m_over_time_limit = over_time_limit;
    m_over_time_limit_isSet = true;
}

bool OAIV0_0_40_partition_info_maximums::is_over_time_limit_Set() const{
    return m_over_time_limit_isSet;
}

bool OAIV0_0_40_partition_info_maximums::is_over_time_limit_Valid() const{
    return m_over_time_limit_isValid;
}

bool OAIV0_0_40_partition_info_maximums::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpus_per_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus_per_socket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_per_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_memory_per_cpu.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_memory_per_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oversubscribe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_time_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_40_partition_info_maximums::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
