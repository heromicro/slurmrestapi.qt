/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISlurmApi_H
#define OAI_OAISlurmApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDbv0_0_39_account_info.h"
#include "OAIDbv0_0_39_associations_info.h"
#include "OAIDbv0_0_39_clusters_info.h"
#include "OAIDbv0_0_39_config_info.h"
#include "OAIDbv0_0_39_diag.h"
#include "OAIDbv0_0_39_job_info.h"
#include "OAIDbv0_0_39_qos_info.h"
#include "OAIDbv0_0_39_response_associations_delete.h"
#include "OAIDbv0_0_39_set_config.h"
#include "OAIDbv0_0_39_tres_info.h"
#include "OAIDbv0_0_39_tres_update.h"
#include "OAIDbv0_0_39_update_qos.h"
#include "OAIDbv0_0_39_update_users.h"
#include "OAIDbv0_0_39_user_info.h"
#include "OAIDbv0_0_39_wckey_info.h"
#include "OAIStatus.h"
#include "OAIV0_0_39_diag.h"
#include "OAIV0_0_39_job_desc_msg.h"
#include "OAIV0_0_39_job_submission.h"
#include "OAIV0_0_39_job_submission_response.h"
#include "OAIV0_0_39_job_update_response.h"
#include "OAIV0_0_39_jobs_response.h"
#include "OAIV0_0_39_licenses_info.h"
#include "OAIV0_0_39_nodes_response.h"
#include "OAIV0_0_39_partitions_response.h"
#include "OAIV0_0_39_pings.h"
#include "OAIV0_0_39_reservations_response.h"
#include "OAIV0_0_39_update_node_msg.h"
#include "OAIV0_0_40_job_desc_msg.h"
#include "OAIV0_0_40_job_submit_req.h"
#include "OAIV0_0_40_kill_jobs_msg.h"
#include "OAIV0_0_40_openapi_diag_resp.h"
#include "OAIV0_0_40_openapi_job_info_resp.h"
#include "OAIV0_0_40_openapi_job_post_response.h"
#include "OAIV0_0_40_openapi_job_submit_response.h"
#include "OAIV0_0_40_openapi_kill_jobs_resp.h"
#include "OAIV0_0_40_openapi_licenses_resp.h"
#include "OAIV0_0_40_openapi_nodes_resp.h"
#include "OAIV0_0_40_openapi_partition_resp.h"
#include "OAIV0_0_40_openapi_ping_array_resp.h"
#include "OAIV0_0_40_openapi_reservation_resp.h"
#include "OAIV0_0_40_openapi_resp.h"
#include "OAIV0_0_40_openapi_shares_resp.h"
#include "OAIV0_0_40_update_node_msg.h"
#include "OAIV0_0_41_job_alloc_req.h"
#include "OAIV0_0_41_job_desc_msg.h"
#include "OAIV0_0_41_job_submit_req.h"
#include "OAIV0_0_41_kill_jobs_msg.h"
#include "OAIV0_0_41_openapi_diag_resp.h"
#include "OAIV0_0_41_openapi_job_alloc_resp.h"
#include "OAIV0_0_41_openapi_job_info_resp.h"
#include "OAIV0_0_41_openapi_job_post_response.h"
#include "OAIV0_0_41_openapi_job_submit_response.h"
#include "OAIV0_0_41_openapi_kill_jobs_resp.h"
#include "OAIV0_0_41_openapi_licenses_resp.h"
#include "OAIV0_0_41_openapi_nodes_resp.h"
#include "OAIV0_0_41_openapi_partition_resp.h"
#include "OAIV0_0_41_openapi_ping_array_resp.h"
#include "OAIV0_0_41_openapi_reservation_resp.h"
#include "OAIV0_0_41_openapi_resp.h"
#include "OAIV0_0_41_openapi_shares_resp.h"
#include "OAIV0_0_41_update_node_msg.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace hm:slurm:client {

class OAISlurmApi : public QObject {
    Q_OBJECT

public:
    OAISlurmApi(const int timeOut = 0);
    ~OAISlurmApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  signal QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039CancelJob(const QString &job_id, const ::hm:slurm:client::OptionalParam<QString> &signal = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  node_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039DeleteNode(const QString &node_name);


    Q_DECL_DEPRECATED virtual void slurmV0039Diag();

    /**
    * @param[in]  job_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039GetJob(const QString &job_id);

    /**
    * @param[in]  update_time qint64 [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039GetJobs(const ::hm:slurm:client::OptionalParam<qint64> &update_time = ::hm:slurm:client::OptionalParam<qint64>());

    /**
    * @param[in]  node_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039GetNode(const QString &node_name);

    /**
    * @param[in]  update_time qint64 [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039GetNodes(const ::hm:slurm:client::OptionalParam<qint64> &update_time = ::hm:slurm:client::OptionalParam<qint64>());

    /**
    * @param[in]  partition_name QString [required]
    * @param[in]  update_time qint64 [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039GetPartition(const QString &partition_name, const ::hm:slurm:client::OptionalParam<qint64> &update_time = ::hm:slurm:client::OptionalParam<qint64>());

    /**
    * @param[in]  update_time qint64 [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039GetPartitions(const ::hm:slurm:client::OptionalParam<qint64> &update_time = ::hm:slurm:client::OptionalParam<qint64>());

    /**
    * @param[in]  reservation_name QString [required]
    * @param[in]  update_time qint64 [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039GetReservation(const QString &reservation_name, const ::hm:slurm:client::OptionalParam<qint64> &update_time = ::hm:slurm:client::OptionalParam<qint64>());

    /**
    * @param[in]  update_time qint64 [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039GetReservations(const ::hm:slurm:client::OptionalParam<qint64> &update_time = ::hm:slurm:client::OptionalParam<qint64>());


    Q_DECL_DEPRECATED virtual void slurmV0039Ping();


    Q_DECL_DEPRECATED virtual void slurmV0039SlurmctldGetLicenses();

    /**
    * @param[in]  oaiv0_0_39_job_submission OAIV0_0_39_job_submission [required]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039SubmitJob(const OAIV0_0_39_job_submission &oaiv0_0_39_job_submission);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oaiv0_0_39_job_desc_msg OAIV0_0_39_job_desc_msg [required]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039UpdateJob(const QString &job_id, const OAIV0_0_39_job_desc_msg &oaiv0_0_39_job_desc_msg);

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  oaiv0_0_39_update_node_msg OAIV0_0_39_update_node_msg [required]
    */
    Q_DECL_DEPRECATED virtual void slurmV0039UpdateNode(const QString &node_name, const OAIV0_0_39_update_node_msg &oaiv0_0_39_update_node_msg);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  signal QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0040DeleteJob(const QString &job_id, const ::hm:slurm:client::OptionalParam<QString> &signal = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  oaiv0_0_40_kill_jobs_msg OAIV0_0_40_kill_jobs_msg [optional]
    */
    virtual void slurmV0040DeleteJobs(const ::hm:slurm:client::OptionalParam<OAIV0_0_40_kill_jobs_msg> &oaiv0_0_40_kill_jobs_msg = ::hm:slurm:client::OptionalParam<OAIV0_0_40_kill_jobs_msg>());

    /**
    * @param[in]  node_name QString [required]
    */
    virtual void slurmV0040DeleteNode(const QString &node_name);


    virtual void slurmV0040GetDiag();

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0040GetJob(const QString &job_id, const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0040GetJobs(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0040GetJobsState(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());


    virtual void slurmV0040GetLicenses();

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0040GetNode(const QString &node_name, const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0040GetNodes(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  partition_name QString [required]
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0040GetPartition(const QString &partition_name, const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0040GetPartitions(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());


    virtual void slurmV0040GetPing();


    virtual void slurmV0040GetReconfigure();

    /**
    * @param[in]  reservation_name QString [required]
    * @param[in]  update_time QString [optional]
    */
    virtual void slurmV0040GetReservation(const QString &reservation_name, const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    */
    virtual void slurmV0040GetReservations(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  accounts QString [optional]
    * @param[in]  users QString [optional]
    */
    virtual void slurmV0040GetShares(const ::hm:slurm:client::OptionalParam<QString> &accounts = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &users = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oaiv0_0_40_job_desc_msg OAIV0_0_40_job_desc_msg [optional]
    */
    virtual void slurmV0040PostJob(const QString &job_id, const ::hm:slurm:client::OptionalParam<OAIV0_0_40_job_desc_msg> &oaiv0_0_40_job_desc_msg = ::hm:slurm:client::OptionalParam<OAIV0_0_40_job_desc_msg>());

    /**
    * @param[in]  oaiv0_0_40_job_submit_req OAIV0_0_40_job_submit_req [optional]
    */
    virtual void slurmV0040PostJobSubmit(const ::hm:slurm:client::OptionalParam<OAIV0_0_40_job_submit_req> &oaiv0_0_40_job_submit_req = ::hm:slurm:client::OptionalParam<OAIV0_0_40_job_submit_req>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  oaiv0_0_40_update_node_msg OAIV0_0_40_update_node_msg [optional]
    */
    virtual void slurmV0040PostNode(const QString &node_name, const ::hm:slurm:client::OptionalParam<OAIV0_0_40_update_node_msg> &oaiv0_0_40_update_node_msg = ::hm:slurm:client::OptionalParam<OAIV0_0_40_update_node_msg>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  signal QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0041DeleteJob(const QString &job_id, const ::hm:slurm:client::OptionalParam<QString> &signal = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  oaiv0_0_41_kill_jobs_msg OAIV0_0_41_kill_jobs_msg [optional]
    */
    virtual void slurmV0041DeleteJobs(const ::hm:slurm:client::OptionalParam<OAIV0_0_41_kill_jobs_msg> &oaiv0_0_41_kill_jobs_msg = ::hm:slurm:client::OptionalParam<OAIV0_0_41_kill_jobs_msg>());

    /**
    * @param[in]  node_name QString [required]
    */
    virtual void slurmV0041DeleteNode(const QString &node_name);


    virtual void slurmV0041GetDiag();

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0041GetJob(const QString &job_id, const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0041GetJobs(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0041GetJobsState(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());


    virtual void slurmV0041GetLicenses();

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0041GetNode(const QString &node_name, const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0041GetNodes(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  partition_name QString [required]
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0041GetPartition(const QString &partition_name, const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    */
    virtual void slurmV0041GetPartitions(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &flags = ::hm:slurm:client::OptionalParam<QString>());


    virtual void slurmV0041GetPing();


    virtual void slurmV0041GetReconfigure();

    /**
    * @param[in]  reservation_name QString [required]
    * @param[in]  update_time QString [optional]
    */
    virtual void slurmV0041GetReservation(const QString &reservation_name, const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    */
    virtual void slurmV0041GetReservations(const ::hm:slurm:client::OptionalParam<QString> &update_time = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  accounts QString [optional]
    * @param[in]  users QString [optional]
    */
    virtual void slurmV0041GetShares(const ::hm:slurm:client::OptionalParam<QString> &accounts = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &users = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oaiv0_0_41_job_desc_msg OAIV0_0_41_job_desc_msg [optional]
    */
    virtual void slurmV0041PostJob(const QString &job_id, const ::hm:slurm:client::OptionalParam<OAIV0_0_41_job_desc_msg> &oaiv0_0_41_job_desc_msg = ::hm:slurm:client::OptionalParam<OAIV0_0_41_job_desc_msg>());

    /**
    * @param[in]  oaiv0_0_41_job_alloc_req OAIV0_0_41_job_alloc_req [optional]
    */
    virtual void slurmV0041PostJobAllocate(const ::hm:slurm:client::OptionalParam<OAIV0_0_41_job_alloc_req> &oaiv0_0_41_job_alloc_req = ::hm:slurm:client::OptionalParam<OAIV0_0_41_job_alloc_req>());

    /**
    * @param[in]  oaiv0_0_41_job_submit_req OAIV0_0_41_job_submit_req [optional]
    */
    virtual void slurmV0041PostJobSubmit(const ::hm:slurm:client::OptionalParam<OAIV0_0_41_job_submit_req> &oaiv0_0_41_job_submit_req = ::hm:slurm:client::OptionalParam<OAIV0_0_41_job_submit_req>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  oaiv0_0_41_update_node_msg OAIV0_0_41_update_node_msg [optional]
    */
    virtual void slurmV0041PostNode(const QString &node_name, const ::hm:slurm:client::OptionalParam<OAIV0_0_41_update_node_msg> &oaiv0_0_41_update_node_msg = ::hm:slurm:client::OptionalParam<OAIV0_0_41_update_node_msg>());

    /**
    * @param[in]  oai_dbv0_0_39_clusters_info OAIDbv0_0_39_clusters_info [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039AddClusters(const OAIDbv0_0_39_clusters_info &oai_dbv0_0_39_clusters_info);

    /**
    * @param[in]  oai_dbv0_0_39_wckey_info OAIDbv0_0_39_wckey_info [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039AddWckeys(const ::hm:slurm:client::OptionalParam<OAIDbv0_0_39_wckey_info> &oai_dbv0_0_39_wckey_info = ::hm:slurm:client::OptionalParam<OAIDbv0_0_39_wckey_info>());

    /**
    * @param[in]  account_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039DeleteAccount(const QString &account_name);

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  account QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  partition QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039DeleteAssociation(const ::hm:slurm:client::OptionalParam<QString> &cluster = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &account = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &user = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &partition = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  account QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  partition QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039DeleteAssociations(const ::hm:slurm:client::OptionalParam<QString> &cluster = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &account = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &user = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &partition = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  cluster_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039DeleteCluster(const QString &cluster_name);

    /**
    * @param[in]  qos_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039DeleteQos(const QString &qos_name);

    /**
    * @param[in]  user_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039DeleteUser(const QString &user_name);

    /**
    * @param[in]  wckey QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039DeleteWckey(const QString &wckey);


    Q_DECL_DEPRECATED virtual void slurmdbV0039Diag();

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  with_deleted QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetAccount(const QString &account_name, const ::hm:slurm:client::OptionalParam<QString> &with_deleted = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  with_deleted QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetAccounts(const ::hm:slurm:client::OptionalParam<QString> &with_deleted = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  account QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  partition QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetAssociation(const ::hm:slurm:client::OptionalParam<QString> &cluster = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &account = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &user = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &partition = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  account QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  partition QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetAssociations(const ::hm:slurm:client::OptionalParam<QString> &cluster = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &account = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &user = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &partition = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  cluster_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetCluster(const QString &cluster_name);


    Q_DECL_DEPRECATED virtual void slurmdbV0039GetClusters();


    Q_DECL_DEPRECATED virtual void slurmdbV0039GetConfig();

    /**
    * @param[in]  job_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetJob(const QString &job_id);

    /**
    * @param[in]  users QString [optional]
    * @param[in]  submit_time QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  account QString [optional]
    * @param[in]  association QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  constraints QString [optional]
    * @param[in]  cpus_max QString [optional]
    * @param[in]  cpus_min QString [optional]
    * @param[in]  skip_steps QString [optional]
    * @param[in]  disable_wait_for_result QString [optional]
    * @param[in]  exit_code QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  job_name QString [optional]
    * @param[in]  nodes_max QString [optional]
    * @param[in]  nodes_min QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  reason QString [optional]
    * @param[in]  reservation QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  step QString [optional]
    * @param[in]  node QString [optional]
    * @param[in]  wckey QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetJobs(const ::hm:slurm:client::OptionalParam<QString> &users = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &submit_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &start_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &end_time = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &account = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &association = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &cluster = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &constraints = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &cpus_max = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &cpus_min = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &skip_steps = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &disable_wait_for_result = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &exit_code = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &format = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &group = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &job_name = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &nodes_max = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &nodes_min = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &partition = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &qos = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &reason = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &reservation = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &state = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &step = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &node = ::hm:slurm:client::OptionalParam<QString>(), const ::hm:slurm:client::OptionalParam<QString> &wckey = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  with_deleted QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetQos(const ::hm:slurm:client::OptionalParam<QString> &with_deleted = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  qos_name QString [required]
    * @param[in]  with_deleted QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetSingleQos(const QString &qos_name, const ::hm:slurm:client::OptionalParam<QString> &with_deleted = ::hm:slurm:client::OptionalParam<QString>());


    Q_DECL_DEPRECATED virtual void slurmdbV0039GetTres();

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  with_deleted QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetUser(const QString &user_name, const ::hm:slurm:client::OptionalParam<QString> &with_deleted = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  with_deleted QString [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetUsers(const ::hm:slurm:client::OptionalParam<QString> &with_deleted = ::hm:slurm:client::OptionalParam<QString>());

    /**
    * @param[in]  wckey QString [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039GetWckey(const QString &wckey);


    Q_DECL_DEPRECATED virtual void slurmdbV0039GetWckeys();

    /**
    * @param[in]  oai_dbv0_0_39_set_config OAIDbv0_0_39_set_config [optional]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039SetConfig(const ::hm:slurm:client::OptionalParam<OAIDbv0_0_39_set_config> &oai_dbv0_0_39_set_config = ::hm:slurm:client::OptionalParam<OAIDbv0_0_39_set_config>());

    /**
    * @param[in]  oai_dbv0_0_39_account_info OAIDbv0_0_39_account_info [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039UpdateAccounts(const OAIDbv0_0_39_account_info &oai_dbv0_0_39_account_info);

    /**
    * @param[in]  oai_dbv0_0_39_associations_info OAIDbv0_0_39_associations_info [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039UpdateAssociations(const OAIDbv0_0_39_associations_info &oai_dbv0_0_39_associations_info);

    /**
    * @param[in]  oai_dbv0_0_39_update_qos OAIDbv0_0_39_update_qos [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039UpdateQos(const OAIDbv0_0_39_update_qos &oai_dbv0_0_39_update_qos);

    /**
    * @param[in]  oai_dbv0_0_39_tres_update OAIDbv0_0_39_tres_update [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039UpdateTres(const OAIDbv0_0_39_tres_update &oai_dbv0_0_39_tres_update);

    /**
    * @param[in]  oai_dbv0_0_39_update_users OAIDbv0_0_39_update_users [required]
    */
    Q_DECL_DEPRECATED virtual void slurmdbV0039UpdateUsers(const OAIDbv0_0_39_update_users &oai_dbv0_0_39_update_users);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void slurmV0039CancelJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0039DeleteNodeCallback(OAIHttpRequestWorker *worker);
    void slurmV0039DiagCallback(OAIHttpRequestWorker *worker);
    void slurmV0039GetJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0039GetJobsCallback(OAIHttpRequestWorker *worker);
    void slurmV0039GetNodeCallback(OAIHttpRequestWorker *worker);
    void slurmV0039GetNodesCallback(OAIHttpRequestWorker *worker);
    void slurmV0039GetPartitionCallback(OAIHttpRequestWorker *worker);
    void slurmV0039GetPartitionsCallback(OAIHttpRequestWorker *worker);
    void slurmV0039GetReservationCallback(OAIHttpRequestWorker *worker);
    void slurmV0039GetReservationsCallback(OAIHttpRequestWorker *worker);
    void slurmV0039PingCallback(OAIHttpRequestWorker *worker);
    void slurmV0039SlurmctldGetLicensesCallback(OAIHttpRequestWorker *worker);
    void slurmV0039SubmitJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0039UpdateJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0039UpdateNodeCallback(OAIHttpRequestWorker *worker);
    void slurmV0040DeleteJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0040DeleteJobsCallback(OAIHttpRequestWorker *worker);
    void slurmV0040DeleteNodeCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetDiagCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetJobsCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetJobsStateCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetLicensesCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetNodeCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetNodesCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetPartitionCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetPartitionsCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetPingCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetReconfigureCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetReservationCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetReservationsCallback(OAIHttpRequestWorker *worker);
    void slurmV0040GetSharesCallback(OAIHttpRequestWorker *worker);
    void slurmV0040PostJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0040PostJobSubmitCallback(OAIHttpRequestWorker *worker);
    void slurmV0040PostNodeCallback(OAIHttpRequestWorker *worker);
    void slurmV0041DeleteJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0041DeleteJobsCallback(OAIHttpRequestWorker *worker);
    void slurmV0041DeleteNodeCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetDiagCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetJobsCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetJobsStateCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetLicensesCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetNodeCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetNodesCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetPartitionCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetPartitionsCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetPingCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetReconfigureCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetReservationCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetReservationsCallback(OAIHttpRequestWorker *worker);
    void slurmV0041GetSharesCallback(OAIHttpRequestWorker *worker);
    void slurmV0041PostJobCallback(OAIHttpRequestWorker *worker);
    void slurmV0041PostJobAllocateCallback(OAIHttpRequestWorker *worker);
    void slurmV0041PostJobSubmitCallback(OAIHttpRequestWorker *worker);
    void slurmV0041PostNodeCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039AddClustersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039AddWckeysCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039DeleteAccountCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039DeleteAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039DeleteAssociationsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039DeleteClusterCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039DeleteQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039DeleteUserCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039DeleteWckeyCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039DiagCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetAccountCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetAccountsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetAssociationsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetClusterCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetClustersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetConfigCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetJobCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetJobsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetSingleQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetTresCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetUserCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetUsersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetWckeyCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039GetWckeysCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039SetConfigCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039UpdateAccountsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039UpdateAssociationsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039UpdateQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039UpdateTresCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0039UpdateUsersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void slurmV0039CancelJobSignal(OAIStatus summary);
    void slurmV0039DeleteNodeSignal(OAIStatus summary);
    void slurmV0039DiagSignal(OAIV0_0_39_diag summary);
    void slurmV0039GetJobSignal(OAIV0_0_39_jobs_response summary);
    void slurmV0039GetJobsSignal(OAIV0_0_39_jobs_response summary);
    void slurmV0039GetNodeSignal(OAIV0_0_39_nodes_response summary);
    void slurmV0039GetNodesSignal(OAIV0_0_39_nodes_response summary);
    void slurmV0039GetPartitionSignal(OAIV0_0_39_partitions_response summary);
    void slurmV0039GetPartitionsSignal(OAIV0_0_39_partitions_response summary);
    void slurmV0039GetReservationSignal(OAIV0_0_39_reservations_response summary);
    void slurmV0039GetReservationsSignal(OAIV0_0_39_reservations_response summary);
    void slurmV0039PingSignal(OAIV0_0_39_pings summary);
    void slurmV0039SlurmctldGetLicensesSignal(OAIV0_0_39_licenses_info summary);
    void slurmV0039SubmitJobSignal(OAIV0_0_39_job_submission_response summary);
    void slurmV0039UpdateJobSignal(OAIV0_0_39_job_update_response summary);
    void slurmV0039UpdateNodeSignal(OAIStatus summary);
    void slurmV0040DeleteJobSignal(OAIV0_0_40_openapi_resp summary);
    void slurmV0040DeleteJobsSignal(OAIV0_0_40_openapi_kill_jobs_resp summary);
    void slurmV0040DeleteNodeSignal(OAIV0_0_40_openapi_resp summary);
    void slurmV0040GetDiagSignal(OAIV0_0_40_openapi_diag_resp summary);
    void slurmV0040GetJobSignal(OAIV0_0_40_openapi_job_info_resp summary);
    void slurmV0040GetJobsSignal(OAIV0_0_40_openapi_job_info_resp summary);
    void slurmV0040GetJobsStateSignal(OAIV0_0_40_openapi_job_info_resp summary);
    void slurmV0040GetLicensesSignal(OAIV0_0_40_openapi_licenses_resp summary);
    void slurmV0040GetNodeSignal(OAIV0_0_40_openapi_nodes_resp summary);
    void slurmV0040GetNodesSignal(OAIV0_0_40_openapi_nodes_resp summary);
    void slurmV0040GetPartitionSignal(OAIV0_0_40_openapi_partition_resp summary);
    void slurmV0040GetPartitionsSignal(OAIV0_0_40_openapi_partition_resp summary);
    void slurmV0040GetPingSignal(OAIV0_0_40_openapi_ping_array_resp summary);
    void slurmV0040GetReconfigureSignal(OAIV0_0_40_openapi_resp summary);
    void slurmV0040GetReservationSignal(OAIV0_0_40_openapi_reservation_resp summary);
    void slurmV0040GetReservationsSignal(OAIV0_0_40_openapi_reservation_resp summary);
    void slurmV0040GetSharesSignal(OAIV0_0_40_openapi_shares_resp summary);
    void slurmV0040PostJobSignal(OAIV0_0_40_openapi_job_post_response summary);
    void slurmV0040PostJobSubmitSignal(OAIV0_0_40_openapi_job_submit_response summary);
    void slurmV0040PostNodeSignal(OAIV0_0_40_openapi_resp summary);
    void slurmV0041DeleteJobSignal(OAIV0_0_41_openapi_resp summary);
    void slurmV0041DeleteJobsSignal(OAIV0_0_41_openapi_kill_jobs_resp summary);
    void slurmV0041DeleteNodeSignal(OAIV0_0_41_openapi_resp summary);
    void slurmV0041GetDiagSignal(OAIV0_0_41_openapi_diag_resp summary);
    void slurmV0041GetJobSignal(OAIV0_0_41_openapi_job_info_resp summary);
    void slurmV0041GetJobsSignal(OAIV0_0_41_openapi_job_info_resp summary);
    void slurmV0041GetJobsStateSignal(OAIV0_0_41_openapi_job_info_resp summary);
    void slurmV0041GetLicensesSignal(OAIV0_0_41_openapi_licenses_resp summary);
    void slurmV0041GetNodeSignal(OAIV0_0_41_openapi_nodes_resp summary);
    void slurmV0041GetNodesSignal(OAIV0_0_41_openapi_nodes_resp summary);
    void slurmV0041GetPartitionSignal(OAIV0_0_41_openapi_partition_resp summary);
    void slurmV0041GetPartitionsSignal(OAIV0_0_41_openapi_partition_resp summary);
    void slurmV0041GetPingSignal(OAIV0_0_41_openapi_ping_array_resp summary);
    void slurmV0041GetReconfigureSignal(OAIV0_0_41_openapi_resp summary);
    void slurmV0041GetReservationSignal(OAIV0_0_41_openapi_reservation_resp summary);
    void slurmV0041GetReservationsSignal(OAIV0_0_41_openapi_reservation_resp summary);
    void slurmV0041GetSharesSignal(OAIV0_0_41_openapi_shares_resp summary);
    void slurmV0041PostJobSignal(OAIV0_0_41_openapi_job_post_response summary);
    void slurmV0041PostJobAllocateSignal(OAIV0_0_41_openapi_job_alloc_resp summary);
    void slurmV0041PostJobSubmitSignal(OAIV0_0_41_openapi_job_submit_response summary);
    void slurmV0041PostNodeSignal(OAIV0_0_41_openapi_resp summary);
    void slurmdbV0039AddClustersSignal(OAIStatus summary);
    void slurmdbV0039AddWckeysSignal(OAIStatus summary);
    void slurmdbV0039DeleteAccountSignal(OAIStatus summary);
    void slurmdbV0039DeleteAssociationSignal(OAIDbv0_0_39_response_associations_delete summary);
    void slurmdbV0039DeleteAssociationsSignal(OAIDbv0_0_39_response_associations_delete summary);
    void slurmdbV0039DeleteClusterSignal(OAIStatus summary);
    void slurmdbV0039DeleteQosSignal(OAIStatus summary);
    void slurmdbV0039DeleteUserSignal(OAIStatus summary);
    void slurmdbV0039DeleteWckeySignal(OAIStatus summary);
    void slurmdbV0039DiagSignal(OAIDbv0_0_39_diag summary);
    void slurmdbV0039GetAccountSignal(OAIDbv0_0_39_account_info summary);
    void slurmdbV0039GetAccountsSignal(OAIDbv0_0_39_account_info summary);
    void slurmdbV0039GetAssociationSignal(OAIDbv0_0_39_associations_info summary);
    void slurmdbV0039GetAssociationsSignal(OAIDbv0_0_39_associations_info summary);
    void slurmdbV0039GetClusterSignal(OAIDbv0_0_39_clusters_info summary);
    void slurmdbV0039GetClustersSignal(OAIDbv0_0_39_clusters_info summary);
    void slurmdbV0039GetConfigSignal(OAIDbv0_0_39_config_info summary);
    void slurmdbV0039GetJobSignal(OAIDbv0_0_39_job_info summary);
    void slurmdbV0039GetJobsSignal(OAIDbv0_0_39_job_info summary);
    void slurmdbV0039GetQosSignal(OAIDbv0_0_39_qos_info summary);
    void slurmdbV0039GetSingleQosSignal(OAIDbv0_0_39_qos_info summary);
    void slurmdbV0039GetTresSignal(OAIDbv0_0_39_tres_info summary);
    void slurmdbV0039GetUserSignal(OAIDbv0_0_39_user_info summary);
    void slurmdbV0039GetUsersSignal(OAIDbv0_0_39_user_info summary);
    void slurmdbV0039GetWckeySignal(OAIDbv0_0_39_wckey_info summary);
    void slurmdbV0039GetWckeysSignal(OAIDbv0_0_39_wckey_info summary);
    void slurmdbV0039SetConfigSignal(OAIStatus summary);
    void slurmdbV0039UpdateAccountsSignal(OAIStatus summary);
    void slurmdbV0039UpdateAssociationsSignal(OAIStatus summary);
    void slurmdbV0039UpdateQosSignal(OAIStatus summary);
    void slurmdbV0039UpdateTresSignal(OAIStatus summary);
    void slurmdbV0039UpdateUsersSignal(OAIStatus summary);


    void slurmV0039CancelJobSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmV0039DeleteNodeSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmV0039DiagSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_diag summary);
    void slurmV0039GetJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_jobs_response summary);
    void slurmV0039GetJobsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_jobs_response summary);
    void slurmV0039GetNodeSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_nodes_response summary);
    void slurmV0039GetNodesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_nodes_response summary);
    void slurmV0039GetPartitionSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_partitions_response summary);
    void slurmV0039GetPartitionsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_partitions_response summary);
    void slurmV0039GetReservationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_reservations_response summary);
    void slurmV0039GetReservationsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_reservations_response summary);
    void slurmV0039PingSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_pings summary);
    void slurmV0039SlurmctldGetLicensesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_licenses_info summary);
    void slurmV0039SubmitJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_job_submission_response summary);
    void slurmV0039UpdateJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_39_job_update_response summary);
    void slurmV0039UpdateNodeSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmV0040DeleteJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmV0040DeleteJobsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_kill_jobs_resp summary);
    void slurmV0040DeleteNodeSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmV0040GetDiagSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_diag_resp summary);
    void slurmV0040GetJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_job_info_resp summary);
    void slurmV0040GetJobsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_job_info_resp summary);
    void slurmV0040GetJobsStateSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_job_info_resp summary);
    void slurmV0040GetLicensesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_licenses_resp summary);
    void slurmV0040GetNodeSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_nodes_resp summary);
    void slurmV0040GetNodesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_nodes_resp summary);
    void slurmV0040GetPartitionSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_partition_resp summary);
    void slurmV0040GetPartitionsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_partition_resp summary);
    void slurmV0040GetPingSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_ping_array_resp summary);
    void slurmV0040GetReconfigureSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmV0040GetReservationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_reservation_resp summary);
    void slurmV0040GetReservationsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_reservation_resp summary);
    void slurmV0040GetSharesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_shares_resp summary);
    void slurmV0040PostJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_job_post_response summary);
    void slurmV0040PostJobSubmitSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_job_submit_response summary);
    void slurmV0040PostNodeSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmV0041DeleteJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmV0041DeleteJobsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_kill_jobs_resp summary);
    void slurmV0041DeleteNodeSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmV0041GetDiagSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_diag_resp summary);
    void slurmV0041GetJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_job_info_resp summary);
    void slurmV0041GetJobsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_job_info_resp summary);
    void slurmV0041GetJobsStateSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_job_info_resp summary);
    void slurmV0041GetLicensesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_licenses_resp summary);
    void slurmV0041GetNodeSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_nodes_resp summary);
    void slurmV0041GetNodesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_nodes_resp summary);
    void slurmV0041GetPartitionSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_partition_resp summary);
    void slurmV0041GetPartitionsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_partition_resp summary);
    void slurmV0041GetPingSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_ping_array_resp summary);
    void slurmV0041GetReconfigureSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmV0041GetReservationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_reservation_resp summary);
    void slurmV0041GetReservationsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_reservation_resp summary);
    void slurmV0041GetSharesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_shares_resp summary);
    void slurmV0041PostJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_job_post_response summary);
    void slurmV0041PostJobAllocateSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_job_alloc_resp summary);
    void slurmV0041PostJobSubmitSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_job_submit_response summary);
    void slurmV0041PostNodeSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmdbV0039AddClustersSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039AddWckeysSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039DeleteAccountSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039DeleteAssociationSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_response_associations_delete summary);
    void slurmdbV0039DeleteAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_response_associations_delete summary);
    void slurmdbV0039DeleteClusterSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039DeleteQosSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039DeleteUserSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039DeleteWckeySignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039DiagSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_diag summary);
    void slurmdbV0039GetAccountSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_account_info summary);
    void slurmdbV0039GetAccountsSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_account_info summary);
    void slurmdbV0039GetAssociationSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_associations_info summary);
    void slurmdbV0039GetAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_associations_info summary);
    void slurmdbV0039GetClusterSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_clusters_info summary);
    void slurmdbV0039GetClustersSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_clusters_info summary);
    void slurmdbV0039GetConfigSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_config_info summary);
    void slurmdbV0039GetJobSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_job_info summary);
    void slurmdbV0039GetJobsSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_job_info summary);
    void slurmdbV0039GetQosSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_qos_info summary);
    void slurmdbV0039GetSingleQosSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_qos_info summary);
    void slurmdbV0039GetTresSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_tres_info summary);
    void slurmdbV0039GetUserSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_user_info summary);
    void slurmdbV0039GetUsersSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_user_info summary);
    void slurmdbV0039GetWckeySignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_wckey_info summary);
    void slurmdbV0039GetWckeysSignalFull(OAIHttpRequestWorker *worker, OAIDbv0_0_39_wckey_info summary);
    void slurmdbV0039SetConfigSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039UpdateAccountsSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039UpdateAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039UpdateQosSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039UpdateTresSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void slurmdbV0039UpdateUsersSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);

    Q_DECL_DEPRECATED_X("Use slurmV0039CancelJobSignalError() instead")
    void slurmV0039CancelJobSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039CancelJobSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039DeleteNodeSignalError() instead")
    void slurmV0039DeleteNodeSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039DeleteNodeSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039DiagSignalError() instead")
    void slurmV0039DiagSignalE(OAIV0_0_39_diag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039DiagSignalError(OAIV0_0_39_diag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetJobSignalError() instead")
    void slurmV0039GetJobSignalE(OAIV0_0_39_jobs_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetJobSignalError(OAIV0_0_39_jobs_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetJobsSignalError() instead")
    void slurmV0039GetJobsSignalE(OAIV0_0_39_jobs_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetJobsSignalError(OAIV0_0_39_jobs_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetNodeSignalError() instead")
    void slurmV0039GetNodeSignalE(OAIV0_0_39_nodes_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetNodeSignalError(OAIV0_0_39_nodes_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetNodesSignalError() instead")
    void slurmV0039GetNodesSignalE(OAIV0_0_39_nodes_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetNodesSignalError(OAIV0_0_39_nodes_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetPartitionSignalError() instead")
    void slurmV0039GetPartitionSignalE(OAIV0_0_39_partitions_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetPartitionSignalError(OAIV0_0_39_partitions_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetPartitionsSignalError() instead")
    void slurmV0039GetPartitionsSignalE(OAIV0_0_39_partitions_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetPartitionsSignalError(OAIV0_0_39_partitions_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetReservationSignalError() instead")
    void slurmV0039GetReservationSignalE(OAIV0_0_39_reservations_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetReservationSignalError(OAIV0_0_39_reservations_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetReservationsSignalError() instead")
    void slurmV0039GetReservationsSignalE(OAIV0_0_39_reservations_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetReservationsSignalError(OAIV0_0_39_reservations_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039PingSignalError() instead")
    void slurmV0039PingSignalE(OAIV0_0_39_pings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039PingSignalError(OAIV0_0_39_pings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039SlurmctldGetLicensesSignalError() instead")
    void slurmV0039SlurmctldGetLicensesSignalE(OAIV0_0_39_licenses_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039SlurmctldGetLicensesSignalError(OAIV0_0_39_licenses_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039SubmitJobSignalError() instead")
    void slurmV0039SubmitJobSignalE(OAIV0_0_39_job_submission_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039SubmitJobSignalError(OAIV0_0_39_job_submission_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039UpdateJobSignalError() instead")
    void slurmV0039UpdateJobSignalE(OAIV0_0_39_job_update_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039UpdateJobSignalError(OAIV0_0_39_job_update_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039UpdateNodeSignalError() instead")
    void slurmV0039UpdateNodeSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039UpdateNodeSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040DeleteJobSignalError() instead")
    void slurmV0040DeleteJobSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040DeleteJobSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040DeleteJobsSignalError() instead")
    void slurmV0040DeleteJobsSignalE(OAIV0_0_40_openapi_kill_jobs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040DeleteJobsSignalError(OAIV0_0_40_openapi_kill_jobs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040DeleteNodeSignalError() instead")
    void slurmV0040DeleteNodeSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040DeleteNodeSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetDiagSignalError() instead")
    void slurmV0040GetDiagSignalE(OAIV0_0_40_openapi_diag_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetDiagSignalError(OAIV0_0_40_openapi_diag_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetJobSignalError() instead")
    void slurmV0040GetJobSignalE(OAIV0_0_40_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetJobSignalError(OAIV0_0_40_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetJobsSignalError() instead")
    void slurmV0040GetJobsSignalE(OAIV0_0_40_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetJobsSignalError(OAIV0_0_40_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetJobsStateSignalError() instead")
    void slurmV0040GetJobsStateSignalE(OAIV0_0_40_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetJobsStateSignalError(OAIV0_0_40_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetLicensesSignalError() instead")
    void slurmV0040GetLicensesSignalE(OAIV0_0_40_openapi_licenses_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetLicensesSignalError(OAIV0_0_40_openapi_licenses_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetNodeSignalError() instead")
    void slurmV0040GetNodeSignalE(OAIV0_0_40_openapi_nodes_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetNodeSignalError(OAIV0_0_40_openapi_nodes_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetNodesSignalError() instead")
    void slurmV0040GetNodesSignalE(OAIV0_0_40_openapi_nodes_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetNodesSignalError(OAIV0_0_40_openapi_nodes_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetPartitionSignalError() instead")
    void slurmV0040GetPartitionSignalE(OAIV0_0_40_openapi_partition_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetPartitionSignalError(OAIV0_0_40_openapi_partition_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetPartitionsSignalError() instead")
    void slurmV0040GetPartitionsSignalE(OAIV0_0_40_openapi_partition_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetPartitionsSignalError(OAIV0_0_40_openapi_partition_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetPingSignalError() instead")
    void slurmV0040GetPingSignalE(OAIV0_0_40_openapi_ping_array_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetPingSignalError(OAIV0_0_40_openapi_ping_array_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetReconfigureSignalError() instead")
    void slurmV0040GetReconfigureSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetReconfigureSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetReservationSignalError() instead")
    void slurmV0040GetReservationSignalE(OAIV0_0_40_openapi_reservation_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetReservationSignalError(OAIV0_0_40_openapi_reservation_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetReservationsSignalError() instead")
    void slurmV0040GetReservationsSignalE(OAIV0_0_40_openapi_reservation_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetReservationsSignalError(OAIV0_0_40_openapi_reservation_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetSharesSignalError() instead")
    void slurmV0040GetSharesSignalE(OAIV0_0_40_openapi_shares_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetSharesSignalError(OAIV0_0_40_openapi_shares_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040PostJobSignalError() instead")
    void slurmV0040PostJobSignalE(OAIV0_0_40_openapi_job_post_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040PostJobSignalError(OAIV0_0_40_openapi_job_post_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040PostJobSubmitSignalError() instead")
    void slurmV0040PostJobSubmitSignalE(OAIV0_0_40_openapi_job_submit_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040PostJobSubmitSignalError(OAIV0_0_40_openapi_job_submit_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040PostNodeSignalError() instead")
    void slurmV0040PostNodeSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040PostNodeSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041DeleteJobSignalError() instead")
    void slurmV0041DeleteJobSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041DeleteJobSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041DeleteJobsSignalError() instead")
    void slurmV0041DeleteJobsSignalE(OAIV0_0_41_openapi_kill_jobs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041DeleteJobsSignalError(OAIV0_0_41_openapi_kill_jobs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041DeleteNodeSignalError() instead")
    void slurmV0041DeleteNodeSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041DeleteNodeSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetDiagSignalError() instead")
    void slurmV0041GetDiagSignalE(OAIV0_0_41_openapi_diag_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetDiagSignalError(OAIV0_0_41_openapi_diag_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetJobSignalError() instead")
    void slurmV0041GetJobSignalE(OAIV0_0_41_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetJobSignalError(OAIV0_0_41_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetJobsSignalError() instead")
    void slurmV0041GetJobsSignalE(OAIV0_0_41_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetJobsSignalError(OAIV0_0_41_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetJobsStateSignalError() instead")
    void slurmV0041GetJobsStateSignalE(OAIV0_0_41_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetJobsStateSignalError(OAIV0_0_41_openapi_job_info_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetLicensesSignalError() instead")
    void slurmV0041GetLicensesSignalE(OAIV0_0_41_openapi_licenses_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetLicensesSignalError(OAIV0_0_41_openapi_licenses_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetNodeSignalError() instead")
    void slurmV0041GetNodeSignalE(OAIV0_0_41_openapi_nodes_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetNodeSignalError(OAIV0_0_41_openapi_nodes_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetNodesSignalError() instead")
    void slurmV0041GetNodesSignalE(OAIV0_0_41_openapi_nodes_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetNodesSignalError(OAIV0_0_41_openapi_nodes_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetPartitionSignalError() instead")
    void slurmV0041GetPartitionSignalE(OAIV0_0_41_openapi_partition_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetPartitionSignalError(OAIV0_0_41_openapi_partition_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetPartitionsSignalError() instead")
    void slurmV0041GetPartitionsSignalE(OAIV0_0_41_openapi_partition_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetPartitionsSignalError(OAIV0_0_41_openapi_partition_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetPingSignalError() instead")
    void slurmV0041GetPingSignalE(OAIV0_0_41_openapi_ping_array_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetPingSignalError(OAIV0_0_41_openapi_ping_array_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetReconfigureSignalError() instead")
    void slurmV0041GetReconfigureSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetReconfigureSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetReservationSignalError() instead")
    void slurmV0041GetReservationSignalE(OAIV0_0_41_openapi_reservation_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetReservationSignalError(OAIV0_0_41_openapi_reservation_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetReservationsSignalError() instead")
    void slurmV0041GetReservationsSignalE(OAIV0_0_41_openapi_reservation_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetReservationsSignalError(OAIV0_0_41_openapi_reservation_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetSharesSignalError() instead")
    void slurmV0041GetSharesSignalE(OAIV0_0_41_openapi_shares_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetSharesSignalError(OAIV0_0_41_openapi_shares_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041PostJobSignalError() instead")
    void slurmV0041PostJobSignalE(OAIV0_0_41_openapi_job_post_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041PostJobSignalError(OAIV0_0_41_openapi_job_post_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041PostJobAllocateSignalError() instead")
    void slurmV0041PostJobAllocateSignalE(OAIV0_0_41_openapi_job_alloc_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041PostJobAllocateSignalError(OAIV0_0_41_openapi_job_alloc_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041PostJobSubmitSignalError() instead")
    void slurmV0041PostJobSubmitSignalE(OAIV0_0_41_openapi_job_submit_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041PostJobSubmitSignalError(OAIV0_0_41_openapi_job_submit_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041PostNodeSignalError() instead")
    void slurmV0041PostNodeSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041PostNodeSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039AddClustersSignalError() instead")
    void slurmdbV0039AddClustersSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039AddClustersSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039AddWckeysSignalError() instead")
    void slurmdbV0039AddWckeysSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039AddWckeysSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteAccountSignalError() instead")
    void slurmdbV0039DeleteAccountSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteAccountSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteAssociationSignalError() instead")
    void slurmdbV0039DeleteAssociationSignalE(OAIDbv0_0_39_response_associations_delete summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteAssociationSignalError(OAIDbv0_0_39_response_associations_delete summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteAssociationsSignalError() instead")
    void slurmdbV0039DeleteAssociationsSignalE(OAIDbv0_0_39_response_associations_delete summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteAssociationsSignalError(OAIDbv0_0_39_response_associations_delete summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteClusterSignalError() instead")
    void slurmdbV0039DeleteClusterSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteClusterSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteQosSignalError() instead")
    void slurmdbV0039DeleteQosSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteQosSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteUserSignalError() instead")
    void slurmdbV0039DeleteUserSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteUserSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteWckeySignalError() instead")
    void slurmdbV0039DeleteWckeySignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteWckeySignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DiagSignalError() instead")
    void slurmdbV0039DiagSignalE(OAIDbv0_0_39_diag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DiagSignalError(OAIDbv0_0_39_diag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetAccountSignalError() instead")
    void slurmdbV0039GetAccountSignalE(OAIDbv0_0_39_account_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetAccountSignalError(OAIDbv0_0_39_account_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetAccountsSignalError() instead")
    void slurmdbV0039GetAccountsSignalE(OAIDbv0_0_39_account_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetAccountsSignalError(OAIDbv0_0_39_account_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetAssociationSignalError() instead")
    void slurmdbV0039GetAssociationSignalE(OAIDbv0_0_39_associations_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetAssociationSignalError(OAIDbv0_0_39_associations_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetAssociationsSignalError() instead")
    void slurmdbV0039GetAssociationsSignalE(OAIDbv0_0_39_associations_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetAssociationsSignalError(OAIDbv0_0_39_associations_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetClusterSignalError() instead")
    void slurmdbV0039GetClusterSignalE(OAIDbv0_0_39_clusters_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetClusterSignalError(OAIDbv0_0_39_clusters_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetClustersSignalError() instead")
    void slurmdbV0039GetClustersSignalE(OAIDbv0_0_39_clusters_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetClustersSignalError(OAIDbv0_0_39_clusters_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetConfigSignalError() instead")
    void slurmdbV0039GetConfigSignalE(OAIDbv0_0_39_config_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetConfigSignalError(OAIDbv0_0_39_config_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetJobSignalError() instead")
    void slurmdbV0039GetJobSignalE(OAIDbv0_0_39_job_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetJobSignalError(OAIDbv0_0_39_job_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetJobsSignalError() instead")
    void slurmdbV0039GetJobsSignalE(OAIDbv0_0_39_job_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetJobsSignalError(OAIDbv0_0_39_job_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetQosSignalError() instead")
    void slurmdbV0039GetQosSignalE(OAIDbv0_0_39_qos_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetQosSignalError(OAIDbv0_0_39_qos_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetSingleQosSignalError() instead")
    void slurmdbV0039GetSingleQosSignalE(OAIDbv0_0_39_qos_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetSingleQosSignalError(OAIDbv0_0_39_qos_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetTresSignalError() instead")
    void slurmdbV0039GetTresSignalE(OAIDbv0_0_39_tres_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetTresSignalError(OAIDbv0_0_39_tres_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetUserSignalError() instead")
    void slurmdbV0039GetUserSignalE(OAIDbv0_0_39_user_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetUserSignalError(OAIDbv0_0_39_user_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetUsersSignalError() instead")
    void slurmdbV0039GetUsersSignalE(OAIDbv0_0_39_user_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetUsersSignalError(OAIDbv0_0_39_user_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetWckeySignalError() instead")
    void slurmdbV0039GetWckeySignalE(OAIDbv0_0_39_wckey_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetWckeySignalError(OAIDbv0_0_39_wckey_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetWckeysSignalError() instead")
    void slurmdbV0039GetWckeysSignalE(OAIDbv0_0_39_wckey_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetWckeysSignalError(OAIDbv0_0_39_wckey_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039SetConfigSignalError() instead")
    void slurmdbV0039SetConfigSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039SetConfigSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateAccountsSignalError() instead")
    void slurmdbV0039UpdateAccountsSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateAccountsSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateAssociationsSignalError() instead")
    void slurmdbV0039UpdateAssociationsSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateAssociationsSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateQosSignalError() instead")
    void slurmdbV0039UpdateQosSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateQosSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateTresSignalError() instead")
    void slurmdbV0039UpdateTresSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateTresSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateUsersSignalError() instead")
    void slurmdbV0039UpdateUsersSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateUsersSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use slurmV0039CancelJobSignalErrorFull() instead")
    void slurmV0039CancelJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039CancelJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039DeleteNodeSignalErrorFull() instead")
    void slurmV0039DeleteNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039DeleteNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039DiagSignalErrorFull() instead")
    void slurmV0039DiagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039DiagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetJobSignalErrorFull() instead")
    void slurmV0039GetJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetJobsSignalErrorFull() instead")
    void slurmV0039GetJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetNodeSignalErrorFull() instead")
    void slurmV0039GetNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetNodesSignalErrorFull() instead")
    void slurmV0039GetNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetPartitionSignalErrorFull() instead")
    void slurmV0039GetPartitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetPartitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetPartitionsSignalErrorFull() instead")
    void slurmV0039GetPartitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetPartitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetReservationSignalErrorFull() instead")
    void slurmV0039GetReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039GetReservationsSignalErrorFull() instead")
    void slurmV0039GetReservationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039GetReservationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039PingSignalErrorFull() instead")
    void slurmV0039PingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039PingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039SlurmctldGetLicensesSignalErrorFull() instead")
    void slurmV0039SlurmctldGetLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039SlurmctldGetLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039SubmitJobSignalErrorFull() instead")
    void slurmV0039SubmitJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039SubmitJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039UpdateJobSignalErrorFull() instead")
    void slurmV0039UpdateJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039UpdateJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0039UpdateNodeSignalErrorFull() instead")
    void slurmV0039UpdateNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0039UpdateNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040DeleteJobSignalErrorFull() instead")
    void slurmV0040DeleteJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040DeleteJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040DeleteJobsSignalErrorFull() instead")
    void slurmV0040DeleteJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040DeleteJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040DeleteNodeSignalErrorFull() instead")
    void slurmV0040DeleteNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040DeleteNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetDiagSignalErrorFull() instead")
    void slurmV0040GetDiagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetDiagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetJobSignalErrorFull() instead")
    void slurmV0040GetJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetJobsSignalErrorFull() instead")
    void slurmV0040GetJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetJobsStateSignalErrorFull() instead")
    void slurmV0040GetJobsStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetJobsStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetLicensesSignalErrorFull() instead")
    void slurmV0040GetLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetNodeSignalErrorFull() instead")
    void slurmV0040GetNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetNodesSignalErrorFull() instead")
    void slurmV0040GetNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetPartitionSignalErrorFull() instead")
    void slurmV0040GetPartitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetPartitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetPartitionsSignalErrorFull() instead")
    void slurmV0040GetPartitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetPartitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetPingSignalErrorFull() instead")
    void slurmV0040GetPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetReconfigureSignalErrorFull() instead")
    void slurmV0040GetReconfigureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetReconfigureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetReservationSignalErrorFull() instead")
    void slurmV0040GetReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetReservationsSignalErrorFull() instead")
    void slurmV0040GetReservationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetReservationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040GetSharesSignalErrorFull() instead")
    void slurmV0040GetSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040GetSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040PostJobSignalErrorFull() instead")
    void slurmV0040PostJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040PostJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040PostJobSubmitSignalErrorFull() instead")
    void slurmV0040PostJobSubmitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040PostJobSubmitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0040PostNodeSignalErrorFull() instead")
    void slurmV0040PostNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0040PostNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041DeleteJobSignalErrorFull() instead")
    void slurmV0041DeleteJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041DeleteJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041DeleteJobsSignalErrorFull() instead")
    void slurmV0041DeleteJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041DeleteJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041DeleteNodeSignalErrorFull() instead")
    void slurmV0041DeleteNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041DeleteNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetDiagSignalErrorFull() instead")
    void slurmV0041GetDiagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetDiagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetJobSignalErrorFull() instead")
    void slurmV0041GetJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetJobsSignalErrorFull() instead")
    void slurmV0041GetJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetJobsStateSignalErrorFull() instead")
    void slurmV0041GetJobsStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetJobsStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetLicensesSignalErrorFull() instead")
    void slurmV0041GetLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetNodeSignalErrorFull() instead")
    void slurmV0041GetNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetNodesSignalErrorFull() instead")
    void slurmV0041GetNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetPartitionSignalErrorFull() instead")
    void slurmV0041GetPartitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetPartitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetPartitionsSignalErrorFull() instead")
    void slurmV0041GetPartitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetPartitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetPingSignalErrorFull() instead")
    void slurmV0041GetPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetReconfigureSignalErrorFull() instead")
    void slurmV0041GetReconfigureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetReconfigureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetReservationSignalErrorFull() instead")
    void slurmV0041GetReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetReservationsSignalErrorFull() instead")
    void slurmV0041GetReservationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetReservationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041GetSharesSignalErrorFull() instead")
    void slurmV0041GetSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041GetSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041PostJobSignalErrorFull() instead")
    void slurmV0041PostJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041PostJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041PostJobAllocateSignalErrorFull() instead")
    void slurmV0041PostJobAllocateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041PostJobAllocateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041PostJobSubmitSignalErrorFull() instead")
    void slurmV0041PostJobSubmitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041PostJobSubmitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmV0041PostNodeSignalErrorFull() instead")
    void slurmV0041PostNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmV0041PostNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039AddClustersSignalErrorFull() instead")
    void slurmdbV0039AddClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039AddClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039AddWckeysSignalErrorFull() instead")
    void slurmdbV0039AddWckeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039AddWckeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteAccountSignalErrorFull() instead")
    void slurmdbV0039DeleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteAssociationSignalErrorFull() instead")
    void slurmdbV0039DeleteAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteAssociationsSignalErrorFull() instead")
    void slurmdbV0039DeleteAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteClusterSignalErrorFull() instead")
    void slurmdbV0039DeleteClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteQosSignalErrorFull() instead")
    void slurmdbV0039DeleteQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteUserSignalErrorFull() instead")
    void slurmdbV0039DeleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DeleteWckeySignalErrorFull() instead")
    void slurmdbV0039DeleteWckeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DeleteWckeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039DiagSignalErrorFull() instead")
    void slurmdbV0039DiagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039DiagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetAccountSignalErrorFull() instead")
    void slurmdbV0039GetAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetAccountsSignalErrorFull() instead")
    void slurmdbV0039GetAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetAssociationSignalErrorFull() instead")
    void slurmdbV0039GetAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetAssociationsSignalErrorFull() instead")
    void slurmdbV0039GetAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetClusterSignalErrorFull() instead")
    void slurmdbV0039GetClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetClustersSignalErrorFull() instead")
    void slurmdbV0039GetClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetConfigSignalErrorFull() instead")
    void slurmdbV0039GetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetJobSignalErrorFull() instead")
    void slurmdbV0039GetJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetJobsSignalErrorFull() instead")
    void slurmdbV0039GetJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetQosSignalErrorFull() instead")
    void slurmdbV0039GetQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetSingleQosSignalErrorFull() instead")
    void slurmdbV0039GetSingleQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetSingleQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetTresSignalErrorFull() instead")
    void slurmdbV0039GetTresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetTresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetUserSignalErrorFull() instead")
    void slurmdbV0039GetUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetUsersSignalErrorFull() instead")
    void slurmdbV0039GetUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetWckeySignalErrorFull() instead")
    void slurmdbV0039GetWckeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetWckeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039GetWckeysSignalErrorFull() instead")
    void slurmdbV0039GetWckeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039GetWckeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039SetConfigSignalErrorFull() instead")
    void slurmdbV0039SetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039SetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateAccountsSignalErrorFull() instead")
    void slurmdbV0039UpdateAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateAssociationsSignalErrorFull() instead")
    void slurmdbV0039UpdateAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateQosSignalErrorFull() instead")
    void slurmdbV0039UpdateQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateTresSignalErrorFull() instead")
    void slurmdbV0039UpdateTresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateTresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0039UpdateUsersSignalErrorFull() instead")
    void slurmdbV0039UpdateUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0039UpdateUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace hm:slurm:client
#endif
