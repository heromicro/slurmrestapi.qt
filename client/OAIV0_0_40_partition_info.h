/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV0_0_40_partition_info.h
 *
 * 
 */

#ifndef OAIV0_0_40_partition_info_H
#define OAIV0_0_40_partition_info_H

#include <QJsonObject>

#include "OAIV0_0_40_partition_info_accounts.h"
#include "OAIV0_0_40_partition_info_cpus.h"
#include "OAIV0_0_40_partition_info_defaults.h"
#include "OAIV0_0_40_partition_info_groups.h"
#include "OAIV0_0_40_partition_info_maximums.h"
#include "OAIV0_0_40_partition_info_minimums.h"
#include "OAIV0_0_40_partition_info_nodes.h"
#include "OAIV0_0_40_partition_info_partition.h"
#include "OAIV0_0_40_partition_info_priority.h"
#include "OAIV0_0_40_partition_info_qos.h"
#include "OAIV0_0_40_partition_info_timeouts.h"
#include "OAIV0_0_40_partition_info_tres.h"
#include "OAIV0_0_40_uint32_no_val.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace hm:slurm:client {
class OAIV0_0_40_partition_info_nodes;
class OAIV0_0_40_partition_info_accounts;
class OAIV0_0_40_partition_info_groups;
class OAIV0_0_40_partition_info_qos;
class OAIV0_0_40_partition_info_tres;
class OAIV0_0_40_partition_info_cpus;
class OAIV0_0_40_partition_info_defaults;
class OAIV0_0_40_partition_info_maximums;
class OAIV0_0_40_partition_info_minimums;
class OAIV0_0_40_partition_info_priority;
class OAIV0_0_40_partition_info_timeouts;
class OAIV0_0_40_partition_info_partition;
class OAIV0_0_40_uint32_no_val;

class OAIV0_0_40_partition_info : public OAIObject {
public:
    OAIV0_0_40_partition_info();
    OAIV0_0_40_partition_info(QString json);
    ~OAIV0_0_40_partition_info() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIV0_0_40_partition_info_nodes getNodes() const;
    void setNodes(const OAIV0_0_40_partition_info_nodes &nodes);
    bool is_nodes_Set() const;
    bool is_nodes_Valid() const;

    OAIV0_0_40_partition_info_accounts getAccounts() const;
    void setAccounts(const OAIV0_0_40_partition_info_accounts &accounts);
    bool is_accounts_Set() const;
    bool is_accounts_Valid() const;

    OAIV0_0_40_partition_info_groups getGroups() const;
    void setGroups(const OAIV0_0_40_partition_info_groups &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    OAIV0_0_40_partition_info_qos getQos() const;
    void setQos(const OAIV0_0_40_partition_info_qos &qos);
    bool is_qos_Set() const;
    bool is_qos_Valid() const;

    QString getAlternate() const;
    void setAlternate(const QString &alternate);
    bool is_alternate_Set() const;
    bool is_alternate_Valid() const;

    OAIV0_0_40_partition_info_tres getTres() const;
    void setTres(const OAIV0_0_40_partition_info_tres &tres);
    bool is_tres_Set() const;
    bool is_tres_Valid() const;

    QString getCluster() const;
    void setCluster(const QString &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    OAIV0_0_40_partition_info_cpus getCpus() const;
    void setCpus(const OAIV0_0_40_partition_info_cpus &cpus);
    bool is_cpus_Set() const;
    bool is_cpus_Valid() const;

    OAIV0_0_40_partition_info_defaults getDefaults() const;
    void setDefaults(const OAIV0_0_40_partition_info_defaults &defaults);
    bool is_defaults_Set() const;
    bool is_defaults_Valid() const;

    qint32 getGraceTime() const;
    void setGraceTime(const qint32 &grace_time);
    bool is_grace_time_Set() const;
    bool is_grace_time_Valid() const;

    OAIV0_0_40_partition_info_maximums getMaximums() const;
    void setMaximums(const OAIV0_0_40_partition_info_maximums &maximums);
    bool is_maximums_Set() const;
    bool is_maximums_Valid() const;

    OAIV0_0_40_partition_info_minimums getMinimums() const;
    void setMinimums(const OAIV0_0_40_partition_info_minimums &minimums);
    bool is_minimums_Set() const;
    bool is_minimums_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNodeSets() const;
    void setNodeSets(const QString &node_sets);
    bool is_node_sets_Set() const;
    bool is_node_sets_Valid() const;

    OAIV0_0_40_partition_info_priority getPriority() const;
    void setPriority(const OAIV0_0_40_partition_info_priority &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    OAIV0_0_40_partition_info_timeouts getTimeouts() const;
    void setTimeouts(const OAIV0_0_40_partition_info_timeouts &timeouts);
    bool is_timeouts_Set() const;
    bool is_timeouts_Valid() const;

    OAIV0_0_40_partition_info_partition getPartition() const;
    void setPartition(const OAIV0_0_40_partition_info_partition &partition);
    bool is_partition_Set() const;
    bool is_partition_Valid() const;

    OAIV0_0_40_uint32_no_val getSuspendTime() const;
    void setSuspendTime(const OAIV0_0_40_uint32_no_val &suspend_time);
    bool is_suspend_time_Set() const;
    bool is_suspend_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIV0_0_40_partition_info_nodes m_nodes;
    bool m_nodes_isSet;
    bool m_nodes_isValid;

    OAIV0_0_40_partition_info_accounts m_accounts;
    bool m_accounts_isSet;
    bool m_accounts_isValid;

    OAIV0_0_40_partition_info_groups m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    OAIV0_0_40_partition_info_qos m_qos;
    bool m_qos_isSet;
    bool m_qos_isValid;

    QString m_alternate;
    bool m_alternate_isSet;
    bool m_alternate_isValid;

    OAIV0_0_40_partition_info_tres m_tres;
    bool m_tres_isSet;
    bool m_tres_isValid;

    QString m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    OAIV0_0_40_partition_info_cpus m_cpus;
    bool m_cpus_isSet;
    bool m_cpus_isValid;

    OAIV0_0_40_partition_info_defaults m_defaults;
    bool m_defaults_isSet;
    bool m_defaults_isValid;

    qint32 m_grace_time;
    bool m_grace_time_isSet;
    bool m_grace_time_isValid;

    OAIV0_0_40_partition_info_maximums m_maximums;
    bool m_maximums_isSet;
    bool m_maximums_isValid;

    OAIV0_0_40_partition_info_minimums m_minimums;
    bool m_minimums_isSet;
    bool m_minimums_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_node_sets;
    bool m_node_sets_isSet;
    bool m_node_sets_isValid;

    OAIV0_0_40_partition_info_priority m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    OAIV0_0_40_partition_info_timeouts m_timeouts;
    bool m_timeouts_isSet;
    bool m_timeouts_isValid;

    OAIV0_0_40_partition_info_partition m_partition;
    bool m_partition_isSet;
    bool m_partition_isValid;

    OAIV0_0_40_uint32_no_val m_suspend_time;
    bool m_suspend_time_isSet;
    bool m_suspend_time_isValid;
};

} // namespace hm:slurm:client

Q_DECLARE_METATYPE(hm:slurm:client::OAIV0_0_40_partition_info)

#endif // OAIV0_0_40_partition_info_H
