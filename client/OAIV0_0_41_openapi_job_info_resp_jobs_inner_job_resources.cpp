/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources() {
    this->initializeModel();
}

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::~OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources() {}

void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::initializeModel() {

    m_select_type_isSet = false;
    m_select_type_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_cpus_isSet = false;
    m_cpus_isValid = false;

    m_threads_per_core_isSet = false;
    m_threads_per_core_isValid = false;
}

void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::fromJsonObject(QJsonObject json) {

    m_select_type_isValid = ::OpenAPI::fromJsonValue(m_select_type, json[QString("select_type")]);
    m_select_type_isSet = !json[QString("select_type")].isNull() && m_select_type_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_cpus_isValid = ::OpenAPI::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;

    m_threads_per_core_isValid = ::OpenAPI::fromJsonValue(m_threads_per_core, json[QString("threads_per_core")]);
    m_threads_per_core_isSet = !json[QString("threads_per_core")].isNull() && m_threads_per_core_isValid;
}

QString OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::asJsonObject() const {
    QJsonObject obj;
    if (m_select_type.size() > 0) {
        obj.insert(QString("select_type"), ::OpenAPI::toJsonValue(m_select_type));
    }
    if (m_nodes.isSet()) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_cpus_isSet) {
        obj.insert(QString("cpus"), ::OpenAPI::toJsonValue(m_cpus));
    }
    if (m_threads_per_core.isSet()) {
        obj.insert(QString("threads_per_core"), ::OpenAPI::toJsonValue(m_threads_per_core));
    }
    return obj;
}

QList<QString> OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::getSelectType() const {
    return m_select_type;
}
void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::setSelectType(const QList<QString> &select_type) {
    m_select_type = select_type;
    m_select_type_isSet = true;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::is_select_type_Set() const{
    return m_select_type_isSet;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::is_select_type_Valid() const{
    return m_select_type_isValid;
}

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::getNodes() const {
    return m_nodes;
}
void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::setNodes(const OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::is_nodes_Valid() const{
    return m_nodes_isValid;
}

qint32 OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::getCpus() const {
    return m_cpus;
}
void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::setCpus(const qint32 &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::is_cpus_Valid() const{
    return m_cpus_isValid;
}

OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_threads_per_core OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::getThreadsPerCore() const {
    return m_threads_per_core;
}
void OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::setThreadsPerCore(const OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources_threads_per_core &threads_per_core) {
    m_threads_per_core = threads_per_core;
    m_threads_per_core_isSet = true;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::is_threads_per_core_Set() const{
    return m_threads_per_core_isSet;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::is_threads_per_core_Valid() const{
    return m_threads_per_core_isValid;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_select_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threads_per_core.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_41_openapi_job_info_resp_jobs_inner_job_resources::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_select_type_isValid && m_cpus_isValid && m_threads_per_core_isValid && true;
}

} // namespace OpenAPI
