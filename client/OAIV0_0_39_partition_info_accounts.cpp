/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_39_partition_info_accounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace hm:slurm:client {

OAIV0_0_39_partition_info_accounts::OAIV0_0_39_partition_info_accounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_39_partition_info_accounts::OAIV0_0_39_partition_info_accounts() {
    this->initializeModel();
}

OAIV0_0_39_partition_info_accounts::~OAIV0_0_39_partition_info_accounts() {}

void OAIV0_0_39_partition_info_accounts::initializeModel() {

    m_allowed_isSet = false;
    m_allowed_isValid = false;

    m_deny_isSet = false;
    m_deny_isValid = false;
}

void OAIV0_0_39_partition_info_accounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_39_partition_info_accounts::fromJsonObject(QJsonObject json) {

    m_allowed_isValid = ::hm:slurm:client::fromJsonValue(m_allowed, json[QString("allowed")]);
    m_allowed_isSet = !json[QString("allowed")].isNull() && m_allowed_isValid;

    m_deny_isValid = ::hm:slurm:client::fromJsonValue(m_deny, json[QString("deny")]);
    m_deny_isSet = !json[QString("deny")].isNull() && m_deny_isValid;
}

QString OAIV0_0_39_partition_info_accounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_39_partition_info_accounts::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_isSet) {
        obj.insert(QString("allowed"), ::hm:slurm:client::toJsonValue(m_allowed));
    }
    if (m_deny_isSet) {
        obj.insert(QString("deny"), ::hm:slurm:client::toJsonValue(m_deny));
    }
    return obj;
}

QString OAIV0_0_39_partition_info_accounts::getAllowed() const {
    return m_allowed;
}
void OAIV0_0_39_partition_info_accounts::setAllowed(const QString &allowed) {
    m_allowed = allowed;
    m_allowed_isSet = true;
}

bool OAIV0_0_39_partition_info_accounts::is_allowed_Set() const{
    return m_allowed_isSet;
}

bool OAIV0_0_39_partition_info_accounts::is_allowed_Valid() const{
    return m_allowed_isValid;
}

QString OAIV0_0_39_partition_info_accounts::getDeny() const {
    return m_deny;
}
void OAIV0_0_39_partition_info_accounts::setDeny(const QString &deny) {
    m_deny = deny;
    m_deny_isSet = true;
}

bool OAIV0_0_39_partition_info_accounts::is_deny_Set() const{
    return m_deny_isSet;
}

bool OAIV0_0_39_partition_info_accounts::is_deny_Valid() const{
    return m_deny_isValid;
}

bool OAIV0_0_39_partition_info_accounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_39_partition_info_accounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace hm:slurm:client
