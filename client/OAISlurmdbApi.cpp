/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlurmdbApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace hm:slurm:client {

OAISlurmdbApi::OAISlurmdbApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAISlurmdbApi::~OAISlurmdbApi() {
}

void OAISlurmdbApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("slurmdbV0040DeleteAccount", defaultConf);
    _serverIndices.insert("slurmdbV0040DeleteAccount", 0);
    _serverConfigs.insert("slurmdbV0040DeleteAssociation", defaultConf);
    _serverIndices.insert("slurmdbV0040DeleteAssociation", 0);
    _serverConfigs.insert("slurmdbV0040DeleteAssociations", defaultConf);
    _serverIndices.insert("slurmdbV0040DeleteAssociations", 0);
    _serverConfigs.insert("slurmdbV0040DeleteCluster", defaultConf);
    _serverIndices.insert("slurmdbV0040DeleteCluster", 0);
    _serverConfigs.insert("slurmdbV0040DeleteSingleQos", defaultConf);
    _serverIndices.insert("slurmdbV0040DeleteSingleQos", 0);
    _serverConfigs.insert("slurmdbV0040DeleteUser", defaultConf);
    _serverIndices.insert("slurmdbV0040DeleteUser", 0);
    _serverConfigs.insert("slurmdbV0040DeleteWckey", defaultConf);
    _serverIndices.insert("slurmdbV0040DeleteWckey", 0);
    _serverConfigs.insert("slurmdbV0040GetAccount", defaultConf);
    _serverIndices.insert("slurmdbV0040GetAccount", 0);
    _serverConfigs.insert("slurmdbV0040GetAccounts", defaultConf);
    _serverIndices.insert("slurmdbV0040GetAccounts", 0);
    _serverConfigs.insert("slurmdbV0040GetAssociation", defaultConf);
    _serverIndices.insert("slurmdbV0040GetAssociation", 0);
    _serverConfigs.insert("slurmdbV0040GetAssociations", defaultConf);
    _serverIndices.insert("slurmdbV0040GetAssociations", 0);
    _serverConfigs.insert("slurmdbV0040GetCluster", defaultConf);
    _serverIndices.insert("slurmdbV0040GetCluster", 0);
    _serverConfigs.insert("slurmdbV0040GetClusters", defaultConf);
    _serverIndices.insert("slurmdbV0040GetClusters", 0);
    _serverConfigs.insert("slurmdbV0040GetConfig", defaultConf);
    _serverIndices.insert("slurmdbV0040GetConfig", 0);
    _serverConfigs.insert("slurmdbV0040GetDiag", defaultConf);
    _serverIndices.insert("slurmdbV0040GetDiag", 0);
    _serverConfigs.insert("slurmdbV0040GetInstance", defaultConf);
    _serverIndices.insert("slurmdbV0040GetInstance", 0);
    _serverConfigs.insert("slurmdbV0040GetInstances", defaultConf);
    _serverIndices.insert("slurmdbV0040GetInstances", 0);
    _serverConfigs.insert("slurmdbV0040GetJob", defaultConf);
    _serverIndices.insert("slurmdbV0040GetJob", 0);
    _serverConfigs.insert("slurmdbV0040GetJobs", defaultConf);
    _serverIndices.insert("slurmdbV0040GetJobs", 0);
    _serverConfigs.insert("slurmdbV0040GetQos", defaultConf);
    _serverIndices.insert("slurmdbV0040GetQos", 0);
    _serverConfigs.insert("slurmdbV0040GetSingleQos", defaultConf);
    _serverIndices.insert("slurmdbV0040GetSingleQos", 0);
    _serverConfigs.insert("slurmdbV0040GetTres", defaultConf);
    _serverIndices.insert("slurmdbV0040GetTres", 0);
    _serverConfigs.insert("slurmdbV0040GetUser", defaultConf);
    _serverIndices.insert("slurmdbV0040GetUser", 0);
    _serverConfigs.insert("slurmdbV0040GetUsers", defaultConf);
    _serverIndices.insert("slurmdbV0040GetUsers", 0);
    _serverConfigs.insert("slurmdbV0040GetWckey", defaultConf);
    _serverIndices.insert("slurmdbV0040GetWckey", 0);
    _serverConfigs.insert("slurmdbV0040GetWckeys", defaultConf);
    _serverIndices.insert("slurmdbV0040GetWckeys", 0);
    _serverConfigs.insert("slurmdbV0040PostAccounts", defaultConf);
    _serverIndices.insert("slurmdbV0040PostAccounts", 0);
    _serverConfigs.insert("slurmdbV0040PostAccountsAssociation", defaultConf);
    _serverIndices.insert("slurmdbV0040PostAccountsAssociation", 0);
    _serverConfigs.insert("slurmdbV0040PostAssociations", defaultConf);
    _serverIndices.insert("slurmdbV0040PostAssociations", 0);
    _serverConfigs.insert("slurmdbV0040PostClusters", defaultConf);
    _serverIndices.insert("slurmdbV0040PostClusters", 0);
    _serverConfigs.insert("slurmdbV0040PostConfig", defaultConf);
    _serverIndices.insert("slurmdbV0040PostConfig", 0);
    _serverConfigs.insert("slurmdbV0040PostQos", defaultConf);
    _serverIndices.insert("slurmdbV0040PostQos", 0);
    _serverConfigs.insert("slurmdbV0040PostTres", defaultConf);
    _serverIndices.insert("slurmdbV0040PostTres", 0);
    _serverConfigs.insert("slurmdbV0040PostUsers", defaultConf);
    _serverIndices.insert("slurmdbV0040PostUsers", 0);
    _serverConfigs.insert("slurmdbV0040PostUsersAssociation", defaultConf);
    _serverIndices.insert("slurmdbV0040PostUsersAssociation", 0);
    _serverConfigs.insert("slurmdbV0040PostWckeys", defaultConf);
    _serverIndices.insert("slurmdbV0040PostWckeys", 0);
    _serverConfigs.insert("slurmdbV0041DeleteAccount", defaultConf);
    _serverIndices.insert("slurmdbV0041DeleteAccount", 0);
    _serverConfigs.insert("slurmdbV0041DeleteAssociation", defaultConf);
    _serverIndices.insert("slurmdbV0041DeleteAssociation", 0);
    _serverConfigs.insert("slurmdbV0041DeleteAssociations", defaultConf);
    _serverIndices.insert("slurmdbV0041DeleteAssociations", 0);
    _serverConfigs.insert("slurmdbV0041DeleteCluster", defaultConf);
    _serverIndices.insert("slurmdbV0041DeleteCluster", 0);
    _serverConfigs.insert("slurmdbV0041DeleteSingleQos", defaultConf);
    _serverIndices.insert("slurmdbV0041DeleteSingleQos", 0);
    _serverConfigs.insert("slurmdbV0041DeleteUser", defaultConf);
    _serverIndices.insert("slurmdbV0041DeleteUser", 0);
    _serverConfigs.insert("slurmdbV0041DeleteWckey", defaultConf);
    _serverIndices.insert("slurmdbV0041DeleteWckey", 0);
    _serverConfigs.insert("slurmdbV0041GetAccount", defaultConf);
    _serverIndices.insert("slurmdbV0041GetAccount", 0);
    _serverConfigs.insert("slurmdbV0041GetAccounts", defaultConf);
    _serverIndices.insert("slurmdbV0041GetAccounts", 0);
    _serverConfigs.insert("slurmdbV0041GetAssociation", defaultConf);
    _serverIndices.insert("slurmdbV0041GetAssociation", 0);
    _serverConfigs.insert("slurmdbV0041GetAssociations", defaultConf);
    _serverIndices.insert("slurmdbV0041GetAssociations", 0);
    _serverConfigs.insert("slurmdbV0041GetCluster", defaultConf);
    _serverIndices.insert("slurmdbV0041GetCluster", 0);
    _serverConfigs.insert("slurmdbV0041GetClusters", defaultConf);
    _serverIndices.insert("slurmdbV0041GetClusters", 0);
    _serverConfigs.insert("slurmdbV0041GetConfig", defaultConf);
    _serverIndices.insert("slurmdbV0041GetConfig", 0);
    _serverConfigs.insert("slurmdbV0041GetDiag", defaultConf);
    _serverIndices.insert("slurmdbV0041GetDiag", 0);
    _serverConfigs.insert("slurmdbV0041GetInstance", defaultConf);
    _serverIndices.insert("slurmdbV0041GetInstance", 0);
    _serverConfigs.insert("slurmdbV0041GetInstances", defaultConf);
    _serverIndices.insert("slurmdbV0041GetInstances", 0);
    _serverConfigs.insert("slurmdbV0041GetJob", defaultConf);
    _serverIndices.insert("slurmdbV0041GetJob", 0);
    _serverConfigs.insert("slurmdbV0041GetJobs", defaultConf);
    _serverIndices.insert("slurmdbV0041GetJobs", 0);
    _serverConfigs.insert("slurmdbV0041GetQos", defaultConf);
    _serverIndices.insert("slurmdbV0041GetQos", 0);
    _serverConfigs.insert("slurmdbV0041GetSingleQos", defaultConf);
    _serverIndices.insert("slurmdbV0041GetSingleQos", 0);
    _serverConfigs.insert("slurmdbV0041GetTres", defaultConf);
    _serverIndices.insert("slurmdbV0041GetTres", 0);
    _serverConfigs.insert("slurmdbV0041GetUser", defaultConf);
    _serverIndices.insert("slurmdbV0041GetUser", 0);
    _serverConfigs.insert("slurmdbV0041GetUsers", defaultConf);
    _serverIndices.insert("slurmdbV0041GetUsers", 0);
    _serverConfigs.insert("slurmdbV0041GetWckey", defaultConf);
    _serverIndices.insert("slurmdbV0041GetWckey", 0);
    _serverConfigs.insert("slurmdbV0041GetWckeys", defaultConf);
    _serverIndices.insert("slurmdbV0041GetWckeys", 0);
    _serverConfigs.insert("slurmdbV0041PostAccounts", defaultConf);
    _serverIndices.insert("slurmdbV0041PostAccounts", 0);
    _serverConfigs.insert("slurmdbV0041PostAccountsAssociation", defaultConf);
    _serverIndices.insert("slurmdbV0041PostAccountsAssociation", 0);
    _serverConfigs.insert("slurmdbV0041PostAssociations", defaultConf);
    _serverIndices.insert("slurmdbV0041PostAssociations", 0);
    _serverConfigs.insert("slurmdbV0041PostClusters", defaultConf);
    _serverIndices.insert("slurmdbV0041PostClusters", 0);
    _serverConfigs.insert("slurmdbV0041PostConfig", defaultConf);
    _serverIndices.insert("slurmdbV0041PostConfig", 0);
    _serverConfigs.insert("slurmdbV0041PostQos", defaultConf);
    _serverIndices.insert("slurmdbV0041PostQos", 0);
    _serverConfigs.insert("slurmdbV0041PostTres", defaultConf);
    _serverIndices.insert("slurmdbV0041PostTres", 0);
    _serverConfigs.insert("slurmdbV0041PostUsers", defaultConf);
    _serverIndices.insert("slurmdbV0041PostUsers", 0);
    _serverConfigs.insert("slurmdbV0041PostUsersAssociation", defaultConf);
    _serverIndices.insert("slurmdbV0041PostUsersAssociation", 0);
    _serverConfigs.insert("slurmdbV0041PostWckeys", defaultConf);
    _serverIndices.insert("slurmdbV0041PostWckeys", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAISlurmdbApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAISlurmdbApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAISlurmdbApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAISlurmdbApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAISlurmdbApi::setUsername(const QString &username) {
    _username = username;
}

void OAISlurmdbApi::setPassword(const QString &password) {
    _password = password;
}


void OAISlurmdbApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAISlurmdbApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAISlurmdbApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAISlurmdbApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISlurmdbApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISlurmdbApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAISlurmdbApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAISlurmdbApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAISlurmdbApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAISlurmdbApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAISlurmdbApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAISlurmdbApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAISlurmdbApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAISlurmdbApi::slurmdbV0040DeleteAccount(const QString &account_name) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040DeleteAccount"][_serverIndices.value("slurmdbV0040DeleteAccount")].URL()+"/slurmdb/v0.0.40/account/{account_name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString account_namePathParam("{");
        account_namePathParam.append("account_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account_name"+pathSuffix : pathPrefix;
        fullPath.replace(account_namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040DeleteAccountCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040DeleteAccountCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_accounts_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040DeleteAccountSignal(output);
        Q_EMIT slurmdbV0040DeleteAccountSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040DeleteAccountSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteAccountSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040DeleteAccountSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteAccountSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040DeleteAssociation(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &default_qos, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &parent_account, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_raw_qos, const ::hm:slurm:client::OptionalParam<QString> &with_sub_accts, const ::hm:slurm:client::OptionalParam<QString> &without_parent_info, const ::hm:slurm:client::OptionalParam<QString> &without_parent_limits) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040DeleteAssociation"][_serverIndices.value("slurmdbV0040DeleteAssociation")].URL()+"/slurmdb/v0.0.40/association/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (default_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_qos.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (parent_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parent_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parent_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(parent_account.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_raw_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_raw_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_raw_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_raw_qos.stringValue())));
    }
    if (with_sub_accts.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_sub_accts", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_sub_accts")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_sub_accts.stringValue())));
    }
    if (without_parent_info.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_info", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_info")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_info.stringValue())));
    }
    if (without_parent_limits.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_limits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_limits")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_limits.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040DeleteAssociationCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040DeleteAssociationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_assocs_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040DeleteAssociationSignal(output);
        Q_EMIT slurmdbV0040DeleteAssociationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040DeleteAssociationSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteAssociationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040DeleteAssociationSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteAssociationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040DeleteAssociations(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &default_qos, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &parent_account, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_raw_qos, const ::hm:slurm:client::OptionalParam<QString> &with_sub_accts, const ::hm:slurm:client::OptionalParam<QString> &without_parent_info, const ::hm:slurm:client::OptionalParam<QString> &without_parent_limits) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040DeleteAssociations"][_serverIndices.value("slurmdbV0040DeleteAssociations")].URL()+"/slurmdb/v0.0.40/associations/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (default_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_qos.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (parent_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parent_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parent_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(parent_account.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_raw_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_raw_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_raw_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_raw_qos.stringValue())));
    }
    if (with_sub_accts.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_sub_accts", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_sub_accts")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_sub_accts.stringValue())));
    }
    if (without_parent_info.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_info", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_info")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_info.stringValue())));
    }
    if (without_parent_limits.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_limits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_limits")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_limits.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040DeleteAssociationsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040DeleteAssociationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_assocs_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040DeleteAssociationsSignal(output);
        Q_EMIT slurmdbV0040DeleteAssociationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040DeleteAssociationsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteAssociationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040DeleteAssociationsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteAssociationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040DeleteCluster(const QString &cluster_name, const ::hm:slurm:client::OptionalParam<QString> &classification, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &federation, const ::hm:slurm:client::OptionalParam<QString> &flags, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &rpc_version, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_usage) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040DeleteCluster"][_serverIndices.value("slurmdbV0040DeleteCluster")].URL()+"/slurmdb/v0.0.40/cluster/{cluster_name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString cluster_namePathParam("{");
        cluster_namePathParam.append("cluster_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cluster_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cluster_name"+pathSuffix : pathPrefix;
        fullPath.replace(cluster_namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (classification.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "classification", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("classification")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(classification.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (federation.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "federation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("federation")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(federation.stringValue())));
    }
    if (flags.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "flags", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("flags")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(flags.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (rpc_version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "rpc_version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("rpc_version")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(rpc_version.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040DeleteClusterCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040DeleteClusterCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_clusters_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040DeleteClusterSignal(output);
        Q_EMIT slurmdbV0040DeleteClusterSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040DeleteClusterSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteClusterSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040DeleteClusterSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteClusterSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040DeleteSingleQos(const QString &qos) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040DeleteSingleQos"][_serverIndices.value("slurmdbV0040DeleteSingleQos")].URL()+"/slurmdb/v0.0.40/qos/{qos}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString qosPathParam("{");
        qosPathParam.append("qos").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "qos", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"qos"+pathSuffix : pathPrefix;
        fullPath.replace(qosPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040DeleteSingleQosCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040DeleteSingleQosCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_slurmdbd_qos_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040DeleteSingleQosSignal(output);
        Q_EMIT slurmdbV0040DeleteSingleQosSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040DeleteSingleQosSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteSingleQosSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040DeleteSingleQosSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteSingleQosSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040DeleteUser(const QString &name) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040DeleteUser"][_serverIndices.value("slurmdbV0040DeleteUser")].URL()+"/slurmdb/v0.0.40/user/{name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040DeleteUserCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040DeleteUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040DeleteUserSignal(output);
        Q_EMIT slurmdbV0040DeleteUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040DeleteUserSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040DeleteUserSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040DeleteWckey(const QString &id) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040DeleteWckey"][_serverIndices.value("slurmdbV0040DeleteWckey")].URL()+"/slurmdb/v0.0.40/wckey/{id}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040DeleteWckeyCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040DeleteWckeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_wckey_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040DeleteWckeySignal(output);
        Q_EMIT slurmdbV0040DeleteWckeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040DeleteWckeySignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteWckeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040DeleteWckeySignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040DeleteWckeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetAccount(const QString &account_name, const ::hm:slurm:client::OptionalParam<QString> &with_assocs, const ::hm:slurm:client::OptionalParam<QString> &with_coords, const ::hm:slurm:client::OptionalParam<QString> &with_deleted) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetAccount"][_serverIndices.value("slurmdbV0040GetAccount")].URL()+"/slurmdb/v0.0.40/account/{account_name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString account_namePathParam("{");
        account_namePathParam.append("account_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account_name"+pathSuffix : pathPrefix;
        fullPath.replace(account_namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (with_assocs.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_assocs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_assocs")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_assocs.stringValue())));
    }
    if (with_coords.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_coords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_coords")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_coords.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetAccountCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetAccountCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_accounts_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetAccountSignal(output);
        Q_EMIT slurmdbV0040GetAccountSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetAccountSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetAccountSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetAccountSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetAccountSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetAccounts(const ::hm:slurm:client::OptionalParam<QString> &description, const ::hm:slurm:client::OptionalParam<QString> &with_assocs, const ::hm:slurm:client::OptionalParam<QString> &with_coords, const ::hm:slurm:client::OptionalParam<QString> &with_deleted) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetAccounts"][_serverIndices.value("slurmdbV0040GetAccounts")].URL()+"/slurmdb/v0.0.40/accounts/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (description.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "description", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("description")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(description.stringValue())));
    }
    if (with_assocs.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_assocs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_assocs")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_assocs.stringValue())));
    }
    if (with_coords.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_coords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_coords")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_coords.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetAccountsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetAccountsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_accounts_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetAccountsSignal(output);
        Q_EMIT slurmdbV0040GetAccountsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetAccountsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetAccountsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetAccountsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetAccountsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetAssociation(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &default_qos, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &parent_account, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_raw_qos, const ::hm:slurm:client::OptionalParam<QString> &with_sub_accts, const ::hm:slurm:client::OptionalParam<QString> &without_parent_info, const ::hm:slurm:client::OptionalParam<QString> &without_parent_limits) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetAssociation"][_serverIndices.value("slurmdbV0040GetAssociation")].URL()+"/slurmdb/v0.0.40/association/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (default_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_qos.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (parent_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parent_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parent_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(parent_account.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_raw_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_raw_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_raw_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_raw_qos.stringValue())));
    }
    if (with_sub_accts.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_sub_accts", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_sub_accts")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_sub_accts.stringValue())));
    }
    if (without_parent_info.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_info", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_info")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_info.stringValue())));
    }
    if (without_parent_limits.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_limits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_limits")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_limits.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetAssociationCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetAssociationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_assocs_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetAssociationSignal(output);
        Q_EMIT slurmdbV0040GetAssociationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetAssociationSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetAssociationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetAssociationSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetAssociationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetAssociations(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &default_qos, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &parent_account, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_raw_qos, const ::hm:slurm:client::OptionalParam<QString> &with_sub_accts, const ::hm:slurm:client::OptionalParam<QString> &without_parent_info, const ::hm:slurm:client::OptionalParam<QString> &without_parent_limits) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetAssociations"][_serverIndices.value("slurmdbV0040GetAssociations")].URL()+"/slurmdb/v0.0.40/associations/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (default_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_qos.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (parent_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parent_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parent_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(parent_account.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_raw_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_raw_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_raw_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_raw_qos.stringValue())));
    }
    if (with_sub_accts.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_sub_accts", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_sub_accts")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_sub_accts.stringValue())));
    }
    if (without_parent_info.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_info", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_info")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_info.stringValue())));
    }
    if (without_parent_limits.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_limits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_limits")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_limits.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetAssociationsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetAssociationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_assocs_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetAssociationsSignal(output);
        Q_EMIT slurmdbV0040GetAssociationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetAssociationsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetAssociationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetAssociationsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetAssociationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetCluster(const QString &cluster_name, const ::hm:slurm:client::OptionalParam<QString> &classification, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &federation, const ::hm:slurm:client::OptionalParam<QString> &flags, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &rpc_version, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_usage) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetCluster"][_serverIndices.value("slurmdbV0040GetCluster")].URL()+"/slurmdb/v0.0.40/cluster/{cluster_name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString cluster_namePathParam("{");
        cluster_namePathParam.append("cluster_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cluster_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cluster_name"+pathSuffix : pathPrefix;
        fullPath.replace(cluster_namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (classification.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "classification", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("classification")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(classification.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (federation.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "federation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("federation")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(federation.stringValue())));
    }
    if (flags.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "flags", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("flags")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(flags.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (rpc_version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "rpc_version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("rpc_version")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(rpc_version.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetClusterCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetClusterCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_clusters_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetClusterSignal(output);
        Q_EMIT slurmdbV0040GetClusterSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetClusterSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetClusterSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetClusterSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetClusterSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetClusters(const ::hm:slurm:client::OptionalParam<QString> &update_time) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetClusters"][_serverIndices.value("slurmdbV0040GetClusters")].URL()+"/slurmdb/v0.0.40/clusters/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (update_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "update_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("update_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(update_time.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetClustersCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetClustersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_clusters_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetClustersSignal(output);
        Q_EMIT slurmdbV0040GetClustersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetClustersSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetClustersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetClustersSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetClustersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetConfig() {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetConfig"][_serverIndices.value("slurmdbV0040GetConfig")].URL()+"/slurmdb/v0.0.40/config");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetConfigCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_slurmdbd_config_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetConfigSignal(output);
        Q_EMIT slurmdbV0040GetConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetConfigSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetConfigSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetDiag() {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetDiag"][_serverIndices.value("slurmdbV0040GetDiag")].URL()+"/slurmdb/v0.0.40/diag/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetDiagCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetDiagCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_slurmdbd_stats_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetDiagSignal(output);
        Q_EMIT slurmdbV0040GetDiagSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetDiagSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetDiagSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetDiagSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetDiagSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetInstance(const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &extra, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &instance_id, const ::hm:slurm:client::OptionalParam<QString> &instance_type, const ::hm:slurm:client::OptionalParam<QString> &node_list, const ::hm:slurm:client::OptionalParam<QString> &time_end, const ::hm:slurm:client::OptionalParam<QString> &time_start) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetInstance"][_serverIndices.value("slurmdbV0040GetInstance")].URL()+"/slurmdb/v0.0.40/instance/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (extra.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "extra", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("extra")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(extra.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (instance_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instance_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instance_id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(instance_id.stringValue())));
    }
    if (instance_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instance_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instance_type")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(instance_type.stringValue())));
    }
    if (node_list.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "node_list", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("node_list")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(node_list.stringValue())));
    }
    if (time_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "time_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("time_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(time_end.stringValue())));
    }
    if (time_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "time_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("time_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(time_start.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetInstanceCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetInstanceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_instances_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetInstanceSignal(output);
        Q_EMIT slurmdbV0040GetInstanceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetInstanceSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetInstanceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetInstanceSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetInstanceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetInstances(const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &extra, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &instance_id, const ::hm:slurm:client::OptionalParam<QString> &instance_type, const ::hm:slurm:client::OptionalParam<QString> &node_list, const ::hm:slurm:client::OptionalParam<QString> &time_end, const ::hm:slurm:client::OptionalParam<QString> &time_start) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetInstances"][_serverIndices.value("slurmdbV0040GetInstances")].URL()+"/slurmdb/v0.0.40/instances/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (extra.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "extra", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("extra")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(extra.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (instance_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instance_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instance_id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(instance_id.stringValue())));
    }
    if (instance_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instance_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instance_type")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(instance_type.stringValue())));
    }
    if (node_list.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "node_list", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("node_list")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(node_list.stringValue())));
    }
    if (time_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "time_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("time_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(time_end.stringValue())));
    }
    if (time_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "time_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("time_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(time_start.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetInstancesCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetInstancesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_instances_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetInstancesSignal(output);
        Q_EMIT slurmdbV0040GetInstancesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetInstancesSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetInstancesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetInstancesSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetInstancesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetJob(const QString &job_id) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetJob"][_serverIndices.value("slurmdbV0040GetJob")].URL()+"/slurmdb/v0.0.40/job/{job_id}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetJobCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetJobCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_slurmdbd_jobs_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetJobSignal(output);
        Q_EMIT slurmdbV0040GetJobSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetJobSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetJobSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetJobSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetJobSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetJobs(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &association, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &constraints, const ::hm:slurm:client::OptionalParam<QString> &cpus_max, const ::hm:slurm:client::OptionalParam<QString> &cpus_min, const ::hm:slurm:client::OptionalParam<QString> &scheduler_unset, const ::hm:slurm:client::OptionalParam<QString> &scheduled_on_submit, const ::hm:slurm:client::OptionalParam<QString> &scheduled_by_main, const ::hm:slurm:client::OptionalParam<QString> &scheduled_by_backfill, const ::hm:slurm:client::OptionalParam<QString> &job_started, const ::hm:slurm:client::OptionalParam<QString> &exit_code, const ::hm:slurm:client::OptionalParam<QString> &show_duplicates, const ::hm:slurm:client::OptionalParam<QString> &skip_steps, const ::hm:slurm:client::OptionalParam<QString> &disable_truncate_usage_time, const ::hm:slurm:client::OptionalParam<QString> &whole_hetjob, const ::hm:slurm:client::OptionalParam<QString> &disable_whole_hetjob, const ::hm:slurm:client::OptionalParam<QString> &disable_wait_for_result, const ::hm:slurm:client::OptionalParam<QString> &usage_time_as_submit_time, const ::hm:slurm:client::OptionalParam<QString> &show_batch_script, const ::hm:slurm:client::OptionalParam<QString> &show_job_environment, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &groups, const ::hm:slurm:client::OptionalParam<QString> &job_name, const ::hm:slurm:client::OptionalParam<QString> &nodes_max, const ::hm:slurm:client::OptionalParam<QString> &nodes_min, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &reason, const ::hm:slurm:client::OptionalParam<QString> &reservation, const ::hm:slurm:client::OptionalParam<QString> &reservation_id, const ::hm:slurm:client::OptionalParam<QString> &state, const ::hm:slurm:client::OptionalParam<QString> &step, const ::hm:slurm:client::OptionalParam<QString> &timelimit_max, const ::hm:slurm:client::OptionalParam<QString> &timelimit_min, const ::hm:slurm:client::OptionalParam<QString> &end_time, const ::hm:slurm:client::OptionalParam<QString> &start_time, const ::hm:slurm:client::OptionalParam<QString> &submit_time, const ::hm:slurm:client::OptionalParam<QString> &node, const ::hm:slurm:client::OptionalParam<QString> &users, const ::hm:slurm:client::OptionalParam<QString> &wckey) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetJobs"][_serverIndices.value("slurmdbV0040GetJobs")].URL()+"/slurmdb/v0.0.40/jobs/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (association.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "association", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("association")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(association.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (constraints.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constraints", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constraints")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(constraints.stringValue())));
    }
    if (cpus_max.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cpus_max", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cpus_max")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cpus_max.stringValue())));
    }
    if (cpus_min.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cpus_min", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cpus_min")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cpus_min.stringValue())));
    }
    if (scheduler_unset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scheduler_unset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("scheduler_unset")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(scheduler_unset.stringValue())));
    }
    if (scheduled_on_submit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scheduled_on_submit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("scheduled_on_submit")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(scheduled_on_submit.stringValue())));
    }
    if (scheduled_by_main.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scheduled_by_main", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("scheduled_by_main")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(scheduled_by_main.stringValue())));
    }
    if (scheduled_by_backfill.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scheduled_by_backfill", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("scheduled_by_backfill")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(scheduled_by_backfill.stringValue())));
    }
    if (job_started.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "job_started", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("job_started")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(job_started.stringValue())));
    }
    if (exit_code.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "exit_code", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("exit_code")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(exit_code.stringValue())));
    }
    if (show_duplicates.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "show_duplicates", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("show_duplicates")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(show_duplicates.stringValue())));
    }
    if (skip_steps.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "skip_steps", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("skip_steps")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(skip_steps.stringValue())));
    }
    if (disable_truncate_usage_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "disable_truncate_usage_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("disable_truncate_usage_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(disable_truncate_usage_time.stringValue())));
    }
    if (whole_hetjob.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "whole_hetjob", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("whole_hetjob")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(whole_hetjob.stringValue())));
    }
    if (disable_whole_hetjob.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "disable_whole_hetjob", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("disable_whole_hetjob")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(disable_whole_hetjob.stringValue())));
    }
    if (disable_wait_for_result.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "disable_wait_for_result", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("disable_wait_for_result")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(disable_wait_for_result.stringValue())));
    }
    if (usage_time_as_submit_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_time_as_submit_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_time_as_submit_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_time_as_submit_time.stringValue())));
    }
    if (show_batch_script.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "show_batch_script", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("show_batch_script")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(show_batch_script.stringValue())));
    }
    if (show_job_environment.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "show_job_environment", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("show_job_environment")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(show_job_environment.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (groups.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "groups", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("groups")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(groups.stringValue())));
    }
    if (job_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "job_name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("job_name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(job_name.stringValue())));
    }
    if (nodes_max.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "nodes_max", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("nodes_max")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(nodes_max.stringValue())));
    }
    if (nodes_min.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "nodes_min", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("nodes_min")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(nodes_min.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (reason.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reason", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reason")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(reason.stringValue())));
    }
    if (reservation.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reservation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reservation")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(reservation.stringValue())));
    }
    if (reservation_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reservation_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reservation_id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(reservation_id.stringValue())));
    }
    if (state.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "state", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("state")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(state.stringValue())));
    }
    if (step.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "step", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("step")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(step.stringValue())));
    }
    if (timelimit_max.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timelimit_max", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timelimit_max")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(timelimit_max.stringValue())));
    }
    if (timelimit_min.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timelimit_min", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timelimit_min")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(timelimit_min.stringValue())));
    }
    if (end_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(end_time.stringValue())));
    }
    if (start_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(start_time.stringValue())));
    }
    if (submit_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "submit_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("submit_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(submit_time.stringValue())));
    }
    if (node.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "node", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("node")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(node.stringValue())));
    }
    if (users.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "users", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("users")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(users.stringValue())));
    }
    if (wckey.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "wckey", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("wckey")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(wckey.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetJobsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetJobsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_slurmdbd_jobs_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetJobsSignal(output);
        Q_EMIT slurmdbV0040GetJobsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetJobsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetJobsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetJobsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetJobsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetQos(const ::hm:slurm:client::OptionalParam<QString> &description, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &name, const ::hm:slurm:client::OptionalParam<QString> &preempt_mode, const ::hm:slurm:client::OptionalParam<QString> &with_deleted) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetQos"][_serverIndices.value("slurmdbV0040GetQos")].URL()+"/slurmdb/v0.0.40/qos/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (description.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "description", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("description")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(description.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name.stringValue())));
    }
    if (preempt_mode.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "preempt_mode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("preempt_mode")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(preempt_mode.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetQosCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetQosCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_slurmdbd_qos_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetQosSignal(output);
        Q_EMIT slurmdbV0040GetQosSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetQosSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetQosSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetQosSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetQosSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetSingleQos(const QString &qos, const ::hm:slurm:client::OptionalParam<QString> &with_deleted) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetSingleQos"][_serverIndices.value("slurmdbV0040GetSingleQos")].URL()+"/slurmdb/v0.0.40/qos/{qos}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString qosPathParam("{");
        qosPathParam.append("qos").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "qos", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"qos"+pathSuffix : pathPrefix;
        fullPath.replace(qosPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetSingleQosCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetSingleQosCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_slurmdbd_qos_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetSingleQosSignal(output);
        Q_EMIT slurmdbV0040GetSingleQosSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetSingleQosSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetSingleQosSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetSingleQosSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetSingleQosSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetTres() {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetTres"][_serverIndices.value("slurmdbV0040GetTres")].URL()+"/slurmdb/v0.0.40/tres/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetTresCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetTresCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_tres_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetTresSignal(output);
        Q_EMIT slurmdbV0040GetTresSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetTresSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetTresSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetTresSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetTresSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetUser(const QString &name, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_assocs, const ::hm:slurm:client::OptionalParam<QString> &with_coords, const ::hm:slurm:client::OptionalParam<QString> &with_wckeys) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetUser"][_serverIndices.value("slurmdbV0040GetUser")].URL()+"/slurmdb/v0.0.40/user/{name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_assocs.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_assocs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_assocs")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_assocs.stringValue())));
    }
    if (with_coords.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_coords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_coords")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_coords.stringValue())));
    }
    if (with_wckeys.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_wckeys", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_wckeys")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_wckeys.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetUserCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_users_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetUserSignal(output);
        Q_EMIT slurmdbV0040GetUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetUserSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetUserSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetUsers(const ::hm:slurm:client::OptionalParam<QString> &admin_level, const ::hm:slurm:client::OptionalParam<QString> &default_account, const ::hm:slurm:client::OptionalParam<QString> &default_wckey, const ::hm:slurm:client::OptionalParam<QString> &with_assocs, const ::hm:slurm:client::OptionalParam<QString> &with_coords, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_wckeys, const ::hm:slurm:client::OptionalParam<QString> &without_defaults) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetUsers"][_serverIndices.value("slurmdbV0040GetUsers")].URL()+"/slurmdb/v0.0.40/users/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (admin_level.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "admin_level", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("admin_level")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(admin_level.stringValue())));
    }
    if (default_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_account.stringValue())));
    }
    if (default_wckey.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_wckey", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_wckey")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_wckey.stringValue())));
    }
    if (with_assocs.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_assocs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_assocs")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_assocs.stringValue())));
    }
    if (with_coords.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_coords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_coords")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_coords.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_wckeys.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_wckeys", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_wckeys")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_wckeys.stringValue())));
    }
    if (without_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_defaults.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetUsersCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetUsersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_users_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetUsersSignal(output);
        Q_EMIT slurmdbV0040GetUsersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetUsersSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetUsersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetUsersSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetUsersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetWckey(const QString &id) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetWckey"][_serverIndices.value("slurmdbV0040GetWckey")].URL()+"/slurmdb/v0.0.40/wckey/{id}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetWckeyCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetWckeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_wckey_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetWckeySignal(output);
        Q_EMIT slurmdbV0040GetWckeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetWckeySignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetWckeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetWckeySignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetWckeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040GetWckeys(const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &name, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040GetWckeys"][_serverIndices.value("slurmdbV0040GetWckeys")].URL()+"/slurmdb/v0.0.40/wckeys/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040GetWckeysCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040GetWckeysCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_wckey_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040GetWckeysSignal(output);
        Q_EMIT slurmdbV0040GetWckeysSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040GetWckeysSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetWckeysSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040GetWckeysSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040GetWckeysSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostAccounts(const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_accounts_resp> &oaiv0_0_40_openapi_accounts_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostAccounts"][_serverIndices.value("slurmdbV0040PostAccounts")].URL()+"/slurmdb/v0.0.40/accounts/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_accounts_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_accounts_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostAccountsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostAccountsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostAccountsSignal(output);
        Q_EMIT slurmdbV0040PostAccountsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostAccountsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostAccountsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostAccountsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostAccountsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostAccountsAssociation(const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_accounts_add_cond_resp> &oaiv0_0_40_openapi_accounts_add_cond_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostAccountsAssociation"][_serverIndices.value("slurmdbV0040PostAccountsAssociation")].URL()+"/slurmdb/v0.0.40/accounts_association/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_accounts_add_cond_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_accounts_add_cond_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostAccountsAssociationCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostAccountsAssociationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_accounts_add_cond_resp_str output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostAccountsAssociationSignal(output);
        Q_EMIT slurmdbV0040PostAccountsAssociationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostAccountsAssociationSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostAccountsAssociationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostAccountsAssociationSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostAccountsAssociationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostAssociations(const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_assocs_resp> &oaiv0_0_40_openapi_assocs_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostAssociations"][_serverIndices.value("slurmdbV0040PostAssociations")].URL()+"/slurmdb/v0.0.40/associations/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_assocs_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_assocs_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostAssociationsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostAssociationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostAssociationsSignal(output);
        Q_EMIT slurmdbV0040PostAssociationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostAssociationsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostAssociationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostAssociationsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostAssociationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostClusters(const ::hm:slurm:client::OptionalParam<QString> &update_time, const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_clusters_resp> &oaiv0_0_40_openapi_clusters_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostClusters"][_serverIndices.value("slurmdbV0040PostClusters")].URL()+"/slurmdb/v0.0.40/clusters/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (update_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "update_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("update_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(update_time.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_clusters_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_clusters_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostClustersCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostClustersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostClustersSignal(output);
        Q_EMIT slurmdbV0040PostClustersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostClustersSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostClustersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostClustersSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostClustersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostConfig(const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_slurmdbd_config_resp> &oaiv0_0_40_openapi_slurmdbd_config_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostConfig"][_serverIndices.value("slurmdbV0040PostConfig")].URL()+"/slurmdb/v0.0.40/config");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_slurmdbd_config_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_slurmdbd_config_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostConfigCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostConfigSignal(output);
        Q_EMIT slurmdbV0040PostConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostConfigSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostConfigSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostQos(const ::hm:slurm:client::OptionalParam<QString> &description, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &name, const ::hm:slurm:client::OptionalParam<QString> &preempt_mode, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_slurmdbd_qos_resp> &oaiv0_0_40_openapi_slurmdbd_qos_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostQos"][_serverIndices.value("slurmdbV0040PostQos")].URL()+"/slurmdb/v0.0.40/qos/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (description.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "description", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("description")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(description.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name.stringValue())));
    }
    if (preempt_mode.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "preempt_mode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("preempt_mode")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(preempt_mode.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_slurmdbd_qos_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_slurmdbd_qos_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostQosCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostQosCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostQosSignal(output);
        Q_EMIT slurmdbV0040PostQosSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostQosSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostQosSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostQosSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostQosSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostTres(const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_tres_resp> &oaiv0_0_40_openapi_tres_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostTres"][_serverIndices.value("slurmdbV0040PostTres")].URL()+"/slurmdb/v0.0.40/tres/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_tres_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_tres_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostTresCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostTresCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostTresSignal(output);
        Q_EMIT slurmdbV0040PostTresSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostTresSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostTresSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostTresSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostTresSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostUsers(const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_users_resp> &oaiv0_0_40_openapi_users_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostUsers"][_serverIndices.value("slurmdbV0040PostUsers")].URL()+"/slurmdb/v0.0.40/users/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_users_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_users_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostUsersCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostUsersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostUsersSignal(output);
        Q_EMIT slurmdbV0040PostUsersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostUsersSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostUsersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostUsersSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostUsersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostUsersAssociation(const ::hm:slurm:client::OptionalParam<QString> &update_time, const ::hm:slurm:client::OptionalParam<QString> &flags, const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_users_add_cond_resp> &oaiv0_0_40_openapi_users_add_cond_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostUsersAssociation"][_serverIndices.value("slurmdbV0040PostUsersAssociation")].URL()+"/slurmdb/v0.0.40/users_association/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (update_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "update_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("update_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(update_time.stringValue())));
    }
    if (flags.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "flags", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("flags")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(flags.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_users_add_cond_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_users_add_cond_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostUsersAssociationCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostUsersAssociationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_users_add_cond_resp_str output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostUsersAssociationSignal(output);
        Q_EMIT slurmdbV0040PostUsersAssociationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostUsersAssociationSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostUsersAssociationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostUsersAssociationSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostUsersAssociationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0040PostWckeys(const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &name, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<OAIV0_0_40_openapi_wckey_resp> &oaiv0_0_40_openapi_wckey_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0040PostWckeys"][_serverIndices.value("slurmdbV0040PostWckeys")].URL()+"/slurmdb/v0.0.40/wckeys/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_40_openapi_wckey_resp.hasValue()){

        
        QByteArray output = oaiv0_0_40_openapi_wckey_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0040PostWckeysCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0040PostWckeysCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_40_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0040PostWckeysSignal(output);
        Q_EMIT slurmdbV0040PostWckeysSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0040PostWckeysSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostWckeysSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0040PostWckeysSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0040PostWckeysSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041DeleteAccount(const QString &account_name) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041DeleteAccount"][_serverIndices.value("slurmdbV0041DeleteAccount")].URL()+"/slurmdb/v0.0.41/account/{account_name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString account_namePathParam("{");
        account_namePathParam.append("account_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account_name"+pathSuffix : pathPrefix;
        fullPath.replace(account_namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041DeleteAccountCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041DeleteAccountCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_accounts_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041DeleteAccountSignal(output);
        Q_EMIT slurmdbV0041DeleteAccountSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041DeleteAccountSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteAccountSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041DeleteAccountSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteAccountSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041DeleteAssociation(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &default_qos, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &parent_account, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_raw_qos, const ::hm:slurm:client::OptionalParam<QString> &with_sub_accts, const ::hm:slurm:client::OptionalParam<QString> &without_parent_info, const ::hm:slurm:client::OptionalParam<QString> &without_parent_limits) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041DeleteAssociation"][_serverIndices.value("slurmdbV0041DeleteAssociation")].URL()+"/slurmdb/v0.0.41/association/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (default_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_qos.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (parent_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parent_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parent_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(parent_account.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_raw_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_raw_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_raw_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_raw_qos.stringValue())));
    }
    if (with_sub_accts.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_sub_accts", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_sub_accts")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_sub_accts.stringValue())));
    }
    if (without_parent_info.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_info", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_info")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_info.stringValue())));
    }
    if (without_parent_limits.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_limits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_limits")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_limits.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041DeleteAssociationCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041DeleteAssociationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_assocs_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041DeleteAssociationSignal(output);
        Q_EMIT slurmdbV0041DeleteAssociationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041DeleteAssociationSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteAssociationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041DeleteAssociationSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteAssociationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041DeleteAssociations(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &default_qos, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &parent_account, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_raw_qos, const ::hm:slurm:client::OptionalParam<QString> &with_sub_accts, const ::hm:slurm:client::OptionalParam<QString> &without_parent_info, const ::hm:slurm:client::OptionalParam<QString> &without_parent_limits) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041DeleteAssociations"][_serverIndices.value("slurmdbV0041DeleteAssociations")].URL()+"/slurmdb/v0.0.41/associations/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (default_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_qos.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (parent_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parent_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parent_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(parent_account.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_raw_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_raw_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_raw_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_raw_qos.stringValue())));
    }
    if (with_sub_accts.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_sub_accts", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_sub_accts")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_sub_accts.stringValue())));
    }
    if (without_parent_info.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_info", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_info")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_info.stringValue())));
    }
    if (without_parent_limits.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_limits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_limits")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_limits.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041DeleteAssociationsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041DeleteAssociationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_assocs_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041DeleteAssociationsSignal(output);
        Q_EMIT slurmdbV0041DeleteAssociationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041DeleteAssociationsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteAssociationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041DeleteAssociationsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteAssociationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041DeleteCluster(const QString &cluster_name, const ::hm:slurm:client::OptionalParam<QString> &classification, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &federation, const ::hm:slurm:client::OptionalParam<QString> &flags, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &rpc_version, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_usage) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041DeleteCluster"][_serverIndices.value("slurmdbV0041DeleteCluster")].URL()+"/slurmdb/v0.0.41/cluster/{cluster_name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString cluster_namePathParam("{");
        cluster_namePathParam.append("cluster_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cluster_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cluster_name"+pathSuffix : pathPrefix;
        fullPath.replace(cluster_namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (classification.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "classification", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("classification")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(classification.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (federation.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "federation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("federation")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(federation.stringValue())));
    }
    if (flags.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "flags", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("flags")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(flags.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (rpc_version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "rpc_version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("rpc_version")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(rpc_version.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041DeleteClusterCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041DeleteClusterCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_clusters_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041DeleteClusterSignal(output);
        Q_EMIT slurmdbV0041DeleteClusterSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041DeleteClusterSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteClusterSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041DeleteClusterSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteClusterSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041DeleteSingleQos(const QString &qos) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041DeleteSingleQos"][_serverIndices.value("slurmdbV0041DeleteSingleQos")].URL()+"/slurmdb/v0.0.41/qos/{qos}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString qosPathParam("{");
        qosPathParam.append("qos").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "qos", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"qos"+pathSuffix : pathPrefix;
        fullPath.replace(qosPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041DeleteSingleQosCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041DeleteSingleQosCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_slurmdbd_qos_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041DeleteSingleQosSignal(output);
        Q_EMIT slurmdbV0041DeleteSingleQosSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041DeleteSingleQosSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteSingleQosSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041DeleteSingleQosSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteSingleQosSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041DeleteUser(const QString &name) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041DeleteUser"][_serverIndices.value("slurmdbV0041DeleteUser")].URL()+"/slurmdb/v0.0.41/user/{name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041DeleteUserCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041DeleteUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041DeleteUserSignal(output);
        Q_EMIT slurmdbV0041DeleteUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041DeleteUserSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041DeleteUserSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041DeleteWckey(const QString &id) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041DeleteWckey"][_serverIndices.value("slurmdbV0041DeleteWckey")].URL()+"/slurmdb/v0.0.41/wckey/{id}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041DeleteWckeyCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041DeleteWckeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_wckey_removed_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041DeleteWckeySignal(output);
        Q_EMIT slurmdbV0041DeleteWckeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041DeleteWckeySignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteWckeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041DeleteWckeySignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041DeleteWckeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetAccount(const QString &account_name, const ::hm:slurm:client::OptionalParam<QString> &with_assocs, const ::hm:slurm:client::OptionalParam<QString> &with_coords, const ::hm:slurm:client::OptionalParam<QString> &with_deleted) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetAccount"][_serverIndices.value("slurmdbV0041GetAccount")].URL()+"/slurmdb/v0.0.41/account/{account_name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString account_namePathParam("{");
        account_namePathParam.append("account_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account_name"+pathSuffix : pathPrefix;
        fullPath.replace(account_namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (with_assocs.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_assocs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_assocs")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_assocs.stringValue())));
    }
    if (with_coords.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_coords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_coords")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_coords.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetAccountCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetAccountCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_accounts_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetAccountSignal(output);
        Q_EMIT slurmdbV0041GetAccountSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetAccountSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetAccountSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetAccountSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetAccountSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetAccounts(const ::hm:slurm:client::OptionalParam<QString> &description, const ::hm:slurm:client::OptionalParam<QString> &deleted, const ::hm:slurm:client::OptionalParam<QString> &with_associations, const ::hm:slurm:client::OptionalParam<QString> &with_coordinators, const ::hm:slurm:client::OptionalParam<QString> &no_users_are_coords, const ::hm:slurm:client::OptionalParam<QString> &users_are_coords) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetAccounts"][_serverIndices.value("slurmdbV0041GetAccounts")].URL()+"/slurmdb/v0.0.41/accounts/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (description.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "description", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("description")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(description.stringValue())));
    }
    if (deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "DELETED", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("DELETED")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(deleted.stringValue())));
    }
    if (with_associations.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "WithAssociations", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("WithAssociations")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_associations.stringValue())));
    }
    if (with_coordinators.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "WithCoordinators", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("WithCoordinators")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_coordinators.stringValue())));
    }
    if (no_users_are_coords.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "NoUsersAreCoords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("NoUsersAreCoords")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(no_users_are_coords.stringValue())));
    }
    if (users_are_coords.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "UsersAreCoords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("UsersAreCoords")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(users_are_coords.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetAccountsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetAccountsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_accounts_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetAccountsSignal(output);
        Q_EMIT slurmdbV0041GetAccountsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetAccountsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetAccountsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetAccountsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetAccountsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetAssociation(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &default_qos, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &parent_account, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_raw_qos, const ::hm:slurm:client::OptionalParam<QString> &with_sub_accts, const ::hm:slurm:client::OptionalParam<QString> &without_parent_info, const ::hm:slurm:client::OptionalParam<QString> &without_parent_limits) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetAssociation"][_serverIndices.value("slurmdbV0041GetAssociation")].URL()+"/slurmdb/v0.0.41/association/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (default_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_qos.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (parent_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parent_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parent_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(parent_account.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_raw_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_raw_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_raw_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_raw_qos.stringValue())));
    }
    if (with_sub_accts.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_sub_accts", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_sub_accts")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_sub_accts.stringValue())));
    }
    if (without_parent_info.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_info", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_info")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_info.stringValue())));
    }
    if (without_parent_limits.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_limits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_limits")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_limits.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetAssociationCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetAssociationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_assocs_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetAssociationSignal(output);
        Q_EMIT slurmdbV0041GetAssociationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetAssociationSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetAssociationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetAssociationSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetAssociationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetAssociations(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &default_qos, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &parent_account, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_raw_qos, const ::hm:slurm:client::OptionalParam<QString> &with_sub_accts, const ::hm:slurm:client::OptionalParam<QString> &without_parent_info, const ::hm:slurm:client::OptionalParam<QString> &without_parent_limits) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetAssociations"][_serverIndices.value("slurmdbV0041GetAssociations")].URL()+"/slurmdb/v0.0.41/associations/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (default_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_qos.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (parent_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "parent_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("parent_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(parent_account.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_raw_qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_raw_qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_raw_qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_raw_qos.stringValue())));
    }
    if (with_sub_accts.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_sub_accts", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_sub_accts")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_sub_accts.stringValue())));
    }
    if (without_parent_info.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_info", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_info")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_info.stringValue())));
    }
    if (without_parent_limits.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_parent_limits", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_parent_limits")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_parent_limits.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetAssociationsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetAssociationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_assocs_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetAssociationsSignal(output);
        Q_EMIT slurmdbV0041GetAssociationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetAssociationsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetAssociationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetAssociationsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetAssociationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetCluster(const QString &cluster_name, const ::hm:slurm:client::OptionalParam<QString> &classification, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &federation, const ::hm:slurm:client::OptionalParam<QString> &flags, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &rpc_version, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_usage) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetCluster"][_serverIndices.value("slurmdbV0041GetCluster")].URL()+"/slurmdb/v0.0.41/cluster/{cluster_name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString cluster_namePathParam("{");
        cluster_namePathParam.append("cluster_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cluster_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cluster_name"+pathSuffix : pathPrefix;
        fullPath.replace(cluster_namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (classification.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "classification", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("classification")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(classification.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (federation.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "federation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("federation")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(federation.stringValue())));
    }
    if (flags.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "flags", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("flags")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(flags.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (rpc_version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "rpc_version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("rpc_version")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(rpc_version.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetClusterCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetClusterCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_clusters_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetClusterSignal(output);
        Q_EMIT slurmdbV0041GetClusterSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetClusterSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetClusterSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetClusterSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetClusterSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetClusters(const ::hm:slurm:client::OptionalParam<QString> &update_time) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetClusters"][_serverIndices.value("slurmdbV0041GetClusters")].URL()+"/slurmdb/v0.0.41/clusters/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (update_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "update_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("update_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(update_time.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetClustersCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetClustersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_clusters_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetClustersSignal(output);
        Q_EMIT slurmdbV0041GetClustersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetClustersSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetClustersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetClustersSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetClustersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetConfig() {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetConfig"][_serverIndices.value("slurmdbV0041GetConfig")].URL()+"/slurmdb/v0.0.41/config");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetConfigCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_slurmdbd_config_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetConfigSignal(output);
        Q_EMIT slurmdbV0041GetConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetConfigSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetConfigSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetDiag() {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetDiag"][_serverIndices.value("slurmdbV0041GetDiag")].URL()+"/slurmdb/v0.0.41/diag/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetDiagCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetDiagCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_slurmdbd_stats_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetDiagSignal(output);
        Q_EMIT slurmdbV0041GetDiagSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetDiagSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetDiagSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetDiagSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetDiagSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetInstance(const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &extra, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &instance_id, const ::hm:slurm:client::OptionalParam<QString> &instance_type, const ::hm:slurm:client::OptionalParam<QString> &node_list, const ::hm:slurm:client::OptionalParam<QString> &time_end, const ::hm:slurm:client::OptionalParam<QString> &time_start) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetInstance"][_serverIndices.value("slurmdbV0041GetInstance")].URL()+"/slurmdb/v0.0.41/instance/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (extra.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "extra", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("extra")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(extra.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (instance_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instance_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instance_id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(instance_id.stringValue())));
    }
    if (instance_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instance_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instance_type")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(instance_type.stringValue())));
    }
    if (node_list.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "node_list", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("node_list")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(node_list.stringValue())));
    }
    if (time_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "time_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("time_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(time_end.stringValue())));
    }
    if (time_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "time_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("time_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(time_start.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetInstanceCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetInstanceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_instances_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetInstanceSignal(output);
        Q_EMIT slurmdbV0041GetInstanceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetInstanceSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetInstanceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetInstanceSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetInstanceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetInstances(const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &extra, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &instance_id, const ::hm:slurm:client::OptionalParam<QString> &instance_type, const ::hm:slurm:client::OptionalParam<QString> &node_list, const ::hm:slurm:client::OptionalParam<QString> &time_end, const ::hm:slurm:client::OptionalParam<QString> &time_start) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetInstances"][_serverIndices.value("slurmdbV0041GetInstances")].URL()+"/slurmdb/v0.0.41/instances/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (extra.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "extra", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("extra")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(extra.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (instance_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instance_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instance_id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(instance_id.stringValue())));
    }
    if (instance_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instance_type", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instance_type")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(instance_type.stringValue())));
    }
    if (node_list.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "node_list", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("node_list")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(node_list.stringValue())));
    }
    if (time_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "time_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("time_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(time_end.stringValue())));
    }
    if (time_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "time_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("time_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(time_start.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetInstancesCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetInstancesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_instances_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetInstancesSignal(output);
        Q_EMIT slurmdbV0041GetInstancesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetInstancesSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetInstancesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetInstancesSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetInstancesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetJob(const QString &job_id) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetJob"][_serverIndices.value("slurmdbV0041GetJob")].URL()+"/slurmdb/v0.0.41/job/{job_id}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetJobCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetJobCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_slurmdbd_jobs_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetJobSignal(output);
        Q_EMIT slurmdbV0041GetJobSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetJobSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetJobSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetJobSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetJobSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetJobs(const ::hm:slurm:client::OptionalParam<QString> &account, const ::hm:slurm:client::OptionalParam<QString> &association, const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &constraints, const ::hm:slurm:client::OptionalParam<QString> &scheduler_unset, const ::hm:slurm:client::OptionalParam<QString> &scheduled_on_submit, const ::hm:slurm:client::OptionalParam<QString> &scheduled_by_main, const ::hm:slurm:client::OptionalParam<QString> &scheduled_by_backfill, const ::hm:slurm:client::OptionalParam<QString> &job_started, const ::hm:slurm:client::OptionalParam<QString> &exit_code, const ::hm:slurm:client::OptionalParam<QString> &show_duplicates, const ::hm:slurm:client::OptionalParam<QString> &skip_steps, const ::hm:slurm:client::OptionalParam<QString> &disable_truncate_usage_time, const ::hm:slurm:client::OptionalParam<QString> &whole_hetjob, const ::hm:slurm:client::OptionalParam<QString> &disable_whole_hetjob, const ::hm:slurm:client::OptionalParam<QString> &disable_wait_for_result, const ::hm:slurm:client::OptionalParam<QString> &usage_time_as_submit_time, const ::hm:slurm:client::OptionalParam<QString> &show_batch_script, const ::hm:slurm:client::OptionalParam<QString> &show_job_environment, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &groups, const ::hm:slurm:client::OptionalParam<QString> &job_name, const ::hm:slurm:client::OptionalParam<QString> &partition, const ::hm:slurm:client::OptionalParam<QString> &qos, const ::hm:slurm:client::OptionalParam<QString> &reason, const ::hm:slurm:client::OptionalParam<QString> &reservation, const ::hm:slurm:client::OptionalParam<QString> &reservation_id, const ::hm:slurm:client::OptionalParam<QString> &state, const ::hm:slurm:client::OptionalParam<QString> &step, const ::hm:slurm:client::OptionalParam<QString> &end_time, const ::hm:slurm:client::OptionalParam<QString> &start_time, const ::hm:slurm:client::OptionalParam<QString> &node, const ::hm:slurm:client::OptionalParam<QString> &users, const ::hm:slurm:client::OptionalParam<QString> &wckey) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetJobs"][_serverIndices.value("slurmdbV0041GetJobs")].URL()+"/slurmdb/v0.0.41/jobs/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(account.stringValue())));
    }
    if (association.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "association", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("association")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(association.stringValue())));
    }
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (constraints.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constraints", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constraints")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(constraints.stringValue())));
    }
    if (scheduler_unset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scheduler_unset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("scheduler_unset")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(scheduler_unset.stringValue())));
    }
    if (scheduled_on_submit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scheduled_on_submit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("scheduled_on_submit")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(scheduled_on_submit.stringValue())));
    }
    if (scheduled_by_main.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scheduled_by_main", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("scheduled_by_main")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(scheduled_by_main.stringValue())));
    }
    if (scheduled_by_backfill.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scheduled_by_backfill", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("scheduled_by_backfill")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(scheduled_by_backfill.stringValue())));
    }
    if (job_started.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "job_started", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("job_started")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(job_started.stringValue())));
    }
    if (exit_code.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "exit_code", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("exit_code")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(exit_code.stringValue())));
    }
    if (show_duplicates.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "show_duplicates", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("show_duplicates")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(show_duplicates.stringValue())));
    }
    if (skip_steps.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "skip_steps", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("skip_steps")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(skip_steps.stringValue())));
    }
    if (disable_truncate_usage_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "disable_truncate_usage_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("disable_truncate_usage_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(disable_truncate_usage_time.stringValue())));
    }
    if (whole_hetjob.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "whole_hetjob", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("whole_hetjob")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(whole_hetjob.stringValue())));
    }
    if (disable_whole_hetjob.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "disable_whole_hetjob", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("disable_whole_hetjob")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(disable_whole_hetjob.stringValue())));
    }
    if (disable_wait_for_result.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "disable_wait_for_result", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("disable_wait_for_result")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(disable_wait_for_result.stringValue())));
    }
    if (usage_time_as_submit_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_time_as_submit_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_time_as_submit_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_time_as_submit_time.stringValue())));
    }
    if (show_batch_script.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "show_batch_script", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("show_batch_script")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(show_batch_script.stringValue())));
    }
    if (show_job_environment.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "show_job_environment", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("show_job_environment")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(show_job_environment.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (groups.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "groups", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("groups")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(groups.stringValue())));
    }
    if (job_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "job_name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("job_name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(job_name.stringValue())));
    }
    if (partition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partition", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partition")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(partition.stringValue())));
    }
    if (qos.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "qos", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("qos")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos.stringValue())));
    }
    if (reason.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reason", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reason")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(reason.stringValue())));
    }
    if (reservation.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reservation", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reservation")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(reservation.stringValue())));
    }
    if (reservation_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reservation_id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reservation_id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(reservation_id.stringValue())));
    }
    if (state.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "state", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("state")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(state.stringValue())));
    }
    if (step.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "step", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("step")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(step.stringValue())));
    }
    if (end_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(end_time.stringValue())));
    }
    if (start_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(start_time.stringValue())));
    }
    if (node.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "node", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("node")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(node.stringValue())));
    }
    if (users.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "users", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("users")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(users.stringValue())));
    }
    if (wckey.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "wckey", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("wckey")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(wckey.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetJobsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetJobsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_slurmdbd_jobs_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetJobsSignal(output);
        Q_EMIT slurmdbV0041GetJobsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetJobsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetJobsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetJobsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetJobsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetQos(const ::hm:slurm:client::OptionalParam<QString> &description, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &name, const ::hm:slurm:client::OptionalParam<QString> &preempt_mode, const ::hm:slurm:client::OptionalParam<QString> &with_deleted) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetQos"][_serverIndices.value("slurmdbV0041GetQos")].URL()+"/slurmdb/v0.0.41/qos/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (description.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "description", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("description")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(description.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name.stringValue())));
    }
    if (preempt_mode.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "preempt_mode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("preempt_mode")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(preempt_mode.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetQosCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetQosCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_slurmdbd_qos_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetQosSignal(output);
        Q_EMIT slurmdbV0041GetQosSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetQosSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetQosSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetQosSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetQosSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetSingleQos(const QString &qos, const ::hm:slurm:client::OptionalParam<QString> &with_deleted) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetSingleQos"][_serverIndices.value("slurmdbV0041GetSingleQos")].URL()+"/slurmdb/v0.0.41/qos/{qos}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString qosPathParam("{");
        qosPathParam.append("qos").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "qos", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"qos"+pathSuffix : pathPrefix;
        fullPath.replace(qosPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(qos)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetSingleQosCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetSingleQosCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_slurmdbd_qos_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetSingleQosSignal(output);
        Q_EMIT slurmdbV0041GetSingleQosSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetSingleQosSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetSingleQosSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetSingleQosSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetSingleQosSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetTres() {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetTres"][_serverIndices.value("slurmdbV0041GetTres")].URL()+"/slurmdb/v0.0.41/tres/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetTresCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetTresCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_tres_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetTresSignal(output);
        Q_EMIT slurmdbV0041GetTresSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetTresSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetTresSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetTresSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetTresSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetUser(const QString &name, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_assocs, const ::hm:slurm:client::OptionalParam<QString> &with_coords, const ::hm:slurm:client::OptionalParam<QString> &with_wckeys) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetUser"][_serverIndices.value("slurmdbV0041GetUser")].URL()+"/slurmdb/v0.0.41/user/{name}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_assocs.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_assocs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_assocs")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_assocs.stringValue())));
    }
    if (with_coords.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_coords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_coords")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_coords.stringValue())));
    }
    if (with_wckeys.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_wckeys", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_wckeys")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_wckeys.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetUserCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_users_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetUserSignal(output);
        Q_EMIT slurmdbV0041GetUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetUserSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetUserSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetUsers(const ::hm:slurm:client::OptionalParam<QString> &admin_level, const ::hm:slurm:client::OptionalParam<QString> &default_account, const ::hm:slurm:client::OptionalParam<QString> &default_wckey, const ::hm:slurm:client::OptionalParam<QString> &with_assocs, const ::hm:slurm:client::OptionalParam<QString> &with_coords, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<QString> &with_wckeys, const ::hm:slurm:client::OptionalParam<QString> &without_defaults) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetUsers"][_serverIndices.value("slurmdbV0041GetUsers")].URL()+"/slurmdb/v0.0.41/users/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (admin_level.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "admin_level", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("admin_level")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(admin_level.stringValue())));
    }
    if (default_account.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_account", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_account")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_account.stringValue())));
    }
    if (default_wckey.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_wckey", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_wckey")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(default_wckey.stringValue())));
    }
    if (with_assocs.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_assocs", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_assocs")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_assocs.stringValue())));
    }
    if (with_coords.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_coords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_coords")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_coords.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    if (with_wckeys.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_wckeys", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_wckeys")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_wckeys.stringValue())));
    }
    if (without_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "without_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("without_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(without_defaults.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetUsersCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetUsersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_users_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetUsersSignal(output);
        Q_EMIT slurmdbV0041GetUsersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetUsersSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetUsersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetUsersSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetUsersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetWckey(const QString &id) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetWckey"][_serverIndices.value("slurmdbV0041GetWckey")].URL()+"/slurmdb/v0.0.41/wckey/{id}");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetWckeyCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetWckeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_wckey_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetWckeySignal(output);
        Q_EMIT slurmdbV0041GetWckeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetWckeySignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetWckeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetWckeySignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetWckeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041GetWckeys(const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &name, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041GetWckeys"][_serverIndices.value("slurmdbV0041GetWckeys")].URL()+"/slurmdb/v0.0.41/wckeys/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041GetWckeysCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041GetWckeysCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_wckey_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041GetWckeysSignal(output);
        Q_EMIT slurmdbV0041GetWckeysSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041GetWckeysSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetWckeysSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041GetWckeysSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041GetWckeysSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostAccounts(const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_accounts_resp> &oaiv0_0_41_openapi_accounts_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostAccounts"][_serverIndices.value("slurmdbV0041PostAccounts")].URL()+"/slurmdb/v0.0.41/accounts/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_accounts_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_accounts_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostAccountsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostAccountsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostAccountsSignal(output);
        Q_EMIT slurmdbV0041PostAccountsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostAccountsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostAccountsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostAccountsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostAccountsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostAccountsAssociation(const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_accounts_add_cond_resp> &oaiv0_0_41_openapi_accounts_add_cond_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostAccountsAssociation"][_serverIndices.value("slurmdbV0041PostAccountsAssociation")].URL()+"/slurmdb/v0.0.41/accounts_association/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_accounts_add_cond_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_accounts_add_cond_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostAccountsAssociationCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostAccountsAssociationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_accounts_add_cond_resp_str output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostAccountsAssociationSignal(output);
        Q_EMIT slurmdbV0041PostAccountsAssociationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostAccountsAssociationSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostAccountsAssociationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostAccountsAssociationSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostAccountsAssociationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostAssociations(const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_assocs_resp> &oaiv0_0_41_openapi_assocs_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostAssociations"][_serverIndices.value("slurmdbV0041PostAssociations")].URL()+"/slurmdb/v0.0.41/associations/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_assocs_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_assocs_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostAssociationsCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostAssociationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostAssociationsSignal(output);
        Q_EMIT slurmdbV0041PostAssociationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostAssociationsSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostAssociationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostAssociationsSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostAssociationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostClusters(const ::hm:slurm:client::OptionalParam<QString> &update_time, const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_clusters_resp> &oaiv0_0_41_openapi_clusters_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostClusters"][_serverIndices.value("slurmdbV0041PostClusters")].URL()+"/slurmdb/v0.0.41/clusters/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (update_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "update_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("update_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(update_time.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_clusters_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_clusters_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostClustersCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostClustersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostClustersSignal(output);
        Q_EMIT slurmdbV0041PostClustersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostClustersSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostClustersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostClustersSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostClustersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostConfig(const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_slurmdbd_config_resp> &oaiv0_0_41_openapi_slurmdbd_config_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostConfig"][_serverIndices.value("slurmdbV0041PostConfig")].URL()+"/slurmdb/v0.0.41/config");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_slurmdbd_config_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_slurmdbd_config_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostConfigCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostConfigSignal(output);
        Q_EMIT slurmdbV0041PostConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostConfigSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostConfigSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostQos(const ::hm:slurm:client::OptionalParam<QString> &description, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &name, const ::hm:slurm:client::OptionalParam<QString> &preempt_mode, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_slurmdbd_qos_resp> &oaiv0_0_41_openapi_slurmdbd_qos_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostQos"][_serverIndices.value("slurmdbV0041PostQos")].URL()+"/slurmdb/v0.0.41/qos/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (description.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "description", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("description")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(description.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name.stringValue())));
    }
    if (preempt_mode.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "preempt_mode", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("preempt_mode")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(preempt_mode.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_slurmdbd_qos_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_slurmdbd_qos_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostQosCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostQosCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostQosSignal(output);
        Q_EMIT slurmdbV0041PostQosSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostQosSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostQosSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostQosSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostQosSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostTres(const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_tres_resp> &oaiv0_0_41_openapi_tres_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostTres"][_serverIndices.value("slurmdbV0041PostTres")].URL()+"/slurmdb/v0.0.41/tres/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_tres_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_tres_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostTresCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostTresCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostTresSignal(output);
        Q_EMIT slurmdbV0041PostTresSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostTresSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostTresSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostTresSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostTresSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostUsers(const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_users_resp> &oaiv0_0_41_openapi_users_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostUsers"][_serverIndices.value("slurmdbV0041PostUsers")].URL()+"/slurmdb/v0.0.41/users/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_users_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_users_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostUsersCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostUsersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostUsersSignal(output);
        Q_EMIT slurmdbV0041PostUsersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostUsersSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostUsersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostUsersSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostUsersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostUsersAssociation(const ::hm:slurm:client::OptionalParam<QString> &update_time, const ::hm:slurm:client::OptionalParam<QString> &flags, const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_users_add_cond_resp> &oaiv0_0_41_openapi_users_add_cond_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostUsersAssociation"][_serverIndices.value("slurmdbV0041PostUsersAssociation")].URL()+"/slurmdb/v0.0.41/users_association/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (update_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "update_time", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("update_time")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(update_time.stringValue())));
    }
    if (flags.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "flags", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("flags")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(flags.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_users_add_cond_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_users_add_cond_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostUsersAssociationCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostUsersAssociationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_users_add_cond_resp_str output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostUsersAssociationSignal(output);
        Q_EMIT slurmdbV0041PostUsersAssociationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostUsersAssociationSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostUsersAssociationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostUsersAssociationSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostUsersAssociationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::slurmdbV0041PostWckeys(const ::hm:slurm:client::OptionalParam<QString> &cluster, const ::hm:slurm:client::OptionalParam<QString> &format, const ::hm:slurm:client::OptionalParam<QString> &id, const ::hm:slurm:client::OptionalParam<QString> &name, const ::hm:slurm:client::OptionalParam<QString> &only_defaults, const ::hm:slurm:client::OptionalParam<QString> &usage_end, const ::hm:slurm:client::OptionalParam<QString> &usage_start, const ::hm:slurm:client::OptionalParam<QString> &user, const ::hm:slurm:client::OptionalParam<QString> &with_usage, const ::hm:slurm:client::OptionalParam<QString> &with_deleted, const ::hm:slurm:client::OptionalParam<OAIV0_0_41_openapi_wckey_resp> &oaiv0_0_41_openapi_wckey_resp) {
    QString fullPath = QString(_serverConfigs["slurmdbV0041PostWckeys"][_serverIndices.value("slurmdbV0041PostWckeys")].URL()+"/slurmdb/v0.0.41/wckeys/");
    
    if (_apiKeys.contains("user")) {
        addHeaders("user",_apiKeys.find("user").value());
    }
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    if (_apiKeys.contains("token")) {
        addHeaders("token",_apiKeys.find("token").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (cluster.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cluster", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cluster")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(cluster.stringValue())));
    }
    if (format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(format.stringValue())));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(id.stringValue())));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(name.stringValue())));
    }
    if (only_defaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "only_defaults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("only_defaults")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(only_defaults.stringValue())));
    }
    if (usage_end.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_end", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_end")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_end.stringValue())));
    }
    if (usage_start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "usage_start", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("usage_start")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(usage_start.stringValue())));
    }
    if (user.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(user.stringValue())));
    }
    if (with_usage.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_usage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_usage")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_usage.stringValue())));
    }
    if (with_deleted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "with_deleted", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("with_deleted")).append(querySuffix).append(QUrl::toPercentEncoding(::hm:slurm:client::toStringValue(with_deleted.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oaiv0_0_41_openapi_wckey_resp.hasValue()){

        
        QByteArray output = oaiv0_0_41_openapi_wckey_resp.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISlurmdbApi::slurmdbV0041PostWckeysCallback);
    connect(this, &OAISlurmdbApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISlurmdbApi::slurmdbV0041PostWckeysCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIV0_0_41_openapi_resp output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT slurmdbV0041PostWckeysSignal(output);
        Q_EMIT slurmdbV0041PostWckeysSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT slurmdbV0041PostWckeysSignalE(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostWckeysSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT slurmdbV0041PostWckeysSignalError(output, error_type, error_str);
        Q_EMIT slurmdbV0041PostWckeysSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISlurmdbApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace hm:slurm:client
