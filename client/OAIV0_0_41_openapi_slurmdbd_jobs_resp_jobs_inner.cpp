/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner() {
    this->initializeModel();
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::~OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner() {}

void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_allocation_nodes_isSet = false;
    m_allocation_nodes_isValid = false;

    m_array_isSet = false;
    m_array_isValid = false;

    m_association_isSet = false;
    m_association_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_derived_exit_code_isSet = false;
    m_derived_exit_code_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_failed_node_isSet = false;
    m_failed_node_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_het_isSet = false;
    m_het_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_mcs_isSet = false;
    m_mcs_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_qos_isSet = false;
    m_qos_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_kill_request_user_isSet = false;
    m_kill_request_user_isValid = false;

    m_reservation_isSet = false;
    m_reservation_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_stdin_expanded_isSet = false;
    m_stdin_expanded_isValid = false;

    m_stdout_expanded_isSet = false;
    m_stdout_expanded_isValid = false;

    m_stderr_expanded_isSet = false;
    m_stderr_expanded_isValid = false;

    m_stdout_isSet = false;
    m_stdout_isValid = false;

    m_stderr_isSet = false;
    m_stderr_isValid = false;

    m_stdin_isSet = false;
    m_stdin_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_submit_line_isSet = false;
    m_submit_line_isValid = false;

    m_tres_isSet = false;
    m_tres_isValid = false;

    m_used_gres_isSet = false;
    m_used_gres_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_wckey_isSet = false;
    m_wckey_isValid = false;

    m_working_directory_isSet = false;
    m_working_directory_isValid = false;
}

void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_allocation_nodes_isValid = ::OpenAPI::fromJsonValue(m_allocation_nodes, json[QString("allocation_nodes")]);
    m_allocation_nodes_isSet = !json[QString("allocation_nodes")].isNull() && m_allocation_nodes_isValid;

    m_array_isValid = ::OpenAPI::fromJsonValue(m_array, json[QString("array")]);
    m_array_isSet = !json[QString("array")].isNull() && m_array_isValid;

    m_association_isValid = ::OpenAPI::fromJsonValue(m_association, json[QString("association")]);
    m_association_isSet = !json[QString("association")].isNull() && m_association_isValid;

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_derived_exit_code_isValid = ::OpenAPI::fromJsonValue(m_derived_exit_code, json[QString("derived_exit_code")]);
    m_derived_exit_code_isSet = !json[QString("derived_exit_code")].isNull() && m_derived_exit_code_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exit_code")]);
    m_exit_code_isSet = !json[QString("exit_code")].isNull() && m_exit_code_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_failed_node_isValid = ::OpenAPI::fromJsonValue(m_failed_node, json[QString("failed_node")]);
    m_failed_node_isSet = !json[QString("failed_node")].isNull() && m_failed_node_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_het_isValid = ::OpenAPI::fromJsonValue(m_het, json[QString("het")]);
    m_het_isSet = !json[QString("het")].isNull() && m_het_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("job_id")]);
    m_job_id_isSet = !json[QString("job_id")].isNull() && m_job_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_mcs_isValid = ::OpenAPI::fromJsonValue(m_mcs, json[QString("mcs")]);
    m_mcs_isSet = !json[QString("mcs")].isNull() && m_mcs_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_qos_isValid = ::OpenAPI::fromJsonValue(m_qos, json[QString("qos")]);
    m_qos_isSet = !json[QString("qos")].isNull() && m_qos_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_kill_request_user_isValid = ::OpenAPI::fromJsonValue(m_kill_request_user, json[QString("kill_request_user")]);
    m_kill_request_user_isSet = !json[QString("kill_request_user")].isNull() && m_kill_request_user_isValid;

    m_reservation_isValid = ::OpenAPI::fromJsonValue(m_reservation, json[QString("reservation")]);
    m_reservation_isSet = !json[QString("reservation")].isNull() && m_reservation_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_stdin_expanded_isValid = ::OpenAPI::fromJsonValue(m_stdin_expanded, json[QString("stdin_expanded")]);
    m_stdin_expanded_isSet = !json[QString("stdin_expanded")].isNull() && m_stdin_expanded_isValid;

    m_stdout_expanded_isValid = ::OpenAPI::fromJsonValue(m_stdout_expanded, json[QString("stdout_expanded")]);
    m_stdout_expanded_isSet = !json[QString("stdout_expanded")].isNull() && m_stdout_expanded_isValid;

    m_stderr_expanded_isValid = ::OpenAPI::fromJsonValue(m_stderr_expanded, json[QString("stderr_expanded")]);
    m_stderr_expanded_isSet = !json[QString("stderr_expanded")].isNull() && m_stderr_expanded_isValid;

    m_stdout_isValid = ::OpenAPI::fromJsonValue(m_stdout, json[QString("stdout")]);
    m_stdout_isSet = !json[QString("stdout")].isNull() && m_stdout_isValid;

    m_stderr_isValid = ::OpenAPI::fromJsonValue(m_stderr, json[QString("stderr")]);
    m_stderr_isSet = !json[QString("stderr")].isNull() && m_stderr_isValid;

    m_stdin_isValid = ::OpenAPI::fromJsonValue(m_stdin, json[QString("stdin")]);
    m_stdin_isSet = !json[QString("stdin")].isNull() && m_stdin_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;

    m_submit_line_isValid = ::OpenAPI::fromJsonValue(m_submit_line, json[QString("submit_line")]);
    m_submit_line_isSet = !json[QString("submit_line")].isNull() && m_submit_line_isValid;

    m_tres_isValid = ::OpenAPI::fromJsonValue(m_tres, json[QString("tres")]);
    m_tres_isSet = !json[QString("tres")].isNull() && m_tres_isValid;

    m_used_gres_isValid = ::OpenAPI::fromJsonValue(m_used_gres, json[QString("used_gres")]);
    m_used_gres_isSet = !json[QString("used_gres")].isNull() && m_used_gres_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_wckey_isValid = ::OpenAPI::fromJsonValue(m_wckey, json[QString("wckey")]);
    m_wckey_isSet = !json[QString("wckey")].isNull() && m_wckey_isValid;

    m_working_directory_isValid = ::OpenAPI::fromJsonValue(m_working_directory, json[QString("working_directory")]);
    m_working_directory_isSet = !json[QString("working_directory")].isNull() && m_working_directory_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_allocation_nodes_isSet) {
        obj.insert(QString("allocation_nodes"), ::OpenAPI::toJsonValue(m_allocation_nodes));
    }
    if (m_array.isSet()) {
        obj.insert(QString("array"), ::OpenAPI::toJsonValue(m_array));
    }
    if (m_association.isSet()) {
        obj.insert(QString("association"), ::OpenAPI::toJsonValue(m_association));
    }
    if (m_block_isSet) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_constraints_isSet) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_derived_exit_code.isSet()) {
        obj.insert(QString("derived_exit_code"), ::OpenAPI::toJsonValue(m_derived_exit_code));
    }
    if (m_time.isSet()) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_exit_code.isSet()) {
        obj.insert(QString("exit_code"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_failed_node_isSet) {
        obj.insert(QString("failed_node"), ::OpenAPI::toJsonValue(m_failed_node));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_het.isSet()) {
        obj.insert(QString("het"), ::OpenAPI::toJsonValue(m_het));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("job_id"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_licenses_isSet) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_mcs.isSet()) {
        obj.insert(QString("mcs"), ::OpenAPI::toJsonValue(m_mcs));
    }
    if (m_nodes_isSet) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_qos_isSet) {
        obj.insert(QString("qos"), ::OpenAPI::toJsonValue(m_qos));
    }
    if (m_required.isSet()) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_kill_request_user_isSet) {
        obj.insert(QString("kill_request_user"), ::OpenAPI::toJsonValue(m_kill_request_user));
    }
    if (m_reservation.isSet()) {
        obj.insert(QString("reservation"), ::OpenAPI::toJsonValue(m_reservation));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_stdin_expanded_isSet) {
        obj.insert(QString("stdin_expanded"), ::OpenAPI::toJsonValue(m_stdin_expanded));
    }
    if (m_stdout_expanded_isSet) {
        obj.insert(QString("stdout_expanded"), ::OpenAPI::toJsonValue(m_stdout_expanded));
    }
    if (m_stderr_expanded_isSet) {
        obj.insert(QString("stderr_expanded"), ::OpenAPI::toJsonValue(m_stderr_expanded));
    }
    if (m_stdout_isSet) {
        obj.insert(QString("stdout"), ::OpenAPI::toJsonValue(m_stdout));
    }
    if (m_stderr_isSet) {
        obj.insert(QString("stderr"), ::OpenAPI::toJsonValue(m_stderr));
    }
    if (m_stdin_isSet) {
        obj.insert(QString("stdin"), ::OpenAPI::toJsonValue(m_stdin));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_submit_line_isSet) {
        obj.insert(QString("submit_line"), ::OpenAPI::toJsonValue(m_submit_line));
    }
    if (m_tres.isSet()) {
        obj.insert(QString("tres"), ::OpenAPI::toJsonValue(m_tres));
    }
    if (m_used_gres_isSet) {
        obj.insert(QString("used_gres"), ::OpenAPI::toJsonValue(m_used_gres));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_wckey.isSet()) {
        obj.insert(QString("wckey"), ::OpenAPI::toJsonValue(m_wckey));
    }
    if (m_working_directory_isSet) {
        obj.insert(QString("working_directory"), ::OpenAPI::toJsonValue(m_working_directory));
    }
    return obj;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getAccount() const {
    return m_account;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_account_Set() const{
    return m_account_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_account_Valid() const{
    return m_account_isValid;
}

OAIV0_0_40_job_comment OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getComment() const {
    return m_comment;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setComment(const OAIV0_0_40_job_comment &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_comment_Valid() const{
    return m_comment_isValid;
}

qint32 OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getAllocationNodes() const {
    return m_allocation_nodes;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setAllocationNodes(const qint32 &allocation_nodes) {
    m_allocation_nodes = allocation_nodes;
    m_allocation_nodes_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_allocation_nodes_Set() const{
    return m_allocation_nodes_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_allocation_nodes_Valid() const{
    return m_allocation_nodes_isValid;
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_array OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getArray() const {
    return m_array;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setArray(const OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_array &array) {
    m_array = array;
    m_array_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_array_Set() const{
    return m_array_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_array_Valid() const{
    return m_array_isValid;
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_association OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getAssociation() const {
    return m_association;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setAssociation(const OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_association &association) {
    m_association = association;
    m_association_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_association_Set() const{
    return m_association_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_association_Valid() const{
    return m_association_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getBlock() const {
    return m_block;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setBlock(const QString &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_block_Set() const{
    return m_block_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_block_Valid() const{
    return m_block_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getCluster() const {
    return m_cluster;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getConstraints() const {
    return m_constraints;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setConstraints(const QString &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getContainer() const {
    return m_container;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_container_Set() const{
    return m_container_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_container_Valid() const{
    return m_container_isValid;
}

OAIV0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getDerivedExitCode() const {
    return m_derived_exit_code;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setDerivedExitCode(const OAIV0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code &derived_exit_code) {
    m_derived_exit_code = derived_exit_code;
    m_derived_exit_code_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_derived_exit_code_Set() const{
    return m_derived_exit_code_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_derived_exit_code_Valid() const{
    return m_derived_exit_code_isValid;
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getTime() const {
    return m_time;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setTime(const OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_time_Set() const{
    return m_time_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_time_Valid() const{
    return m_time_isValid;
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_exit_code OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getExitCode() const {
    return m_exit_code;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setExitCode(const OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_exit_code &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getExtra() const {
    return m_extra;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setExtra(const QString &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_extra_Valid() const{
    return m_extra_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getFailedNode() const {
    return m_failed_node;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setFailedNode(const QString &failed_node) {
    m_failed_node = failed_node;
    m_failed_node_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_failed_node_Set() const{
    return m_failed_node_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_failed_node_Valid() const{
    return m_failed_node_isValid;
}

QList<QString> OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getFlags() const {
    return m_flags;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getGroup() const {
    return m_group;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_group_Set() const{
    return m_group_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_group_Valid() const{
    return m_group_isValid;
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_het OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getHet() const {
    return m_het;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setHet(const OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_het &het) {
    m_het = het;
    m_het_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_het_Set() const{
    return m_het_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_het_Valid() const{
    return m_het_isValid;
}

qint32 OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getJobId() const {
    return m_job_id;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setJobId(const qint32 &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getName() const {
    return m_name;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getLicenses() const {
    return m_licenses;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setLicenses(const QString &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_licenses_Valid() const{
    return m_licenses_isValid;
}

OAIV0_0_40_job_mcs OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getMcs() const {
    return m_mcs;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setMcs(const OAIV0_0_40_job_mcs &mcs) {
    m_mcs = mcs;
    m_mcs_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_mcs_Set() const{
    return m_mcs_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_mcs_Valid() const{
    return m_mcs_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getNodes() const {
    return m_nodes;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setNodes(const QString &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_nodes_Valid() const{
    return m_nodes_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getPartition() const {
    return m_partition;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_partition_Valid() const{
    return m_partition_isValid;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::isHold() const {
    return m_hold;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIV0_0_41_job_desc_msg_priority OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getPriority() const {
    return m_priority;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setPriority(const OAIV0_0_41_job_desc_msg_priority &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getQos() const {
    return m_qos;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setQos(const QString &qos) {
    m_qos = qos;
    m_qos_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_qos_Set() const{
    return m_qos_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_qos_Valid() const{
    return m_qos_isValid;
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_required OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getRequired() const {
    return m_required;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setRequired(const OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_required &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_required_Set() const{
    return m_required_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getKillRequestUser() const {
    return m_kill_request_user;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setKillRequestUser(const QString &kill_request_user) {
    m_kill_request_user = kill_request_user;
    m_kill_request_user_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_kill_request_user_Set() const{
    return m_kill_request_user_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_kill_request_user_Valid() const{
    return m_kill_request_user_isValid;
}

OAIV0_0_40_job_reservation OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getReservation() const {
    return m_reservation;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setReservation(const OAIV0_0_40_job_reservation &reservation) {
    m_reservation = reservation;
    m_reservation_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_reservation_Set() const{
    return m_reservation_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_reservation_Valid() const{
    return m_reservation_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getScript() const {
    return m_script;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_script_Set() const{
    return m_script_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStdinExpanded() const {
    return m_stdin_expanded;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStdinExpanded(const QString &stdin_expanded) {
    m_stdin_expanded = stdin_expanded;
    m_stdin_expanded_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stdin_expanded_Set() const{
    return m_stdin_expanded_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stdin_expanded_Valid() const{
    return m_stdin_expanded_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStdoutExpanded() const {
    return m_stdout_expanded;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStdoutExpanded(const QString &stdout_expanded) {
    m_stdout_expanded = stdout_expanded;
    m_stdout_expanded_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stdout_expanded_Set() const{
    return m_stdout_expanded_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stdout_expanded_Valid() const{
    return m_stdout_expanded_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStderrExpanded() const {
    return m_stderr_expanded;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStderrExpanded(const QString &stderr_expanded) {
    m_stderr_expanded = stderr_expanded;
    m_stderr_expanded_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stderr_expanded_Set() const{
    return m_stderr_expanded_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stderr_expanded_Valid() const{
    return m_stderr_expanded_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStdout() const {
    return m_stdout;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStdout(const QString &stdout) {
    m_stdout = stdout;
    m_stdout_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stdout_Set() const{
    return m_stdout_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stdout_Valid() const{
    return m_stdout_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStderr() const {
    return m_stderr;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStderr(const QString &stderr) {
    m_stderr = stderr;
    m_stderr_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stderr_Set() const{
    return m_stderr_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stderr_Valid() const{
    return m_stderr_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStdin() const {
    return m_stdin;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStdin(const QString &stdin) {
    m_stdin = stdin;
    m_stdin_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stdin_Set() const{
    return m_stdin_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_stdin_Valid() const{
    return m_stdin_isValid;
}

OAIV0_0_40_job_state OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getState() const {
    return m_state;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setState(const OAIV0_0_40_job_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner> OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getSteps() const {
    return m_steps;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setSteps(const QList<OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_steps_Valid() const{
    return m_steps_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getSubmitLine() const {
    return m_submit_line;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setSubmitLine(const QString &submit_line) {
    m_submit_line = submit_line;
    m_submit_line_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_submit_line_Set() const{
    return m_submit_line_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_submit_line_Valid() const{
    return m_submit_line_isValid;
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_tres OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getTres() const {
    return m_tres;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setTres(const OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_tres &tres) {
    m_tres = tres;
    m_tres_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_tres_Set() const{
    return m_tres_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_tres_Valid() const{
    return m_tres_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getUsedGres() const {
    return m_used_gres;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setUsedGres(const QString &used_gres) {
    m_used_gres = used_gres;
    m_used_gres_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_used_gres_Set() const{
    return m_used_gres_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_used_gres_Valid() const{
    return m_used_gres_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getUser() const {
    return m_user;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_user_Valid() const{
    return m_user_isValid;
}

OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_wckey OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getWckey() const {
    return m_wckey;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setWckey(const OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_wckey &wckey) {
    m_wckey = wckey;
    m_wckey_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_wckey_Set() const{
    return m_wckey_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_wckey_Valid() const{
    return m_wckey_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getWorkingDirectory() const {
    return m_working_directory;
}
void OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setWorkingDirectory(const QString &working_directory) {
    m_working_directory = working_directory;
    m_working_directory_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_working_directory_Set() const{
    return m_working_directory_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::is_working_directory_Valid() const{
    return m_working_directory_isValid;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocation_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_array.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived_exit_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_het.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kill_request_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdin_expanded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdout_expanded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stderr_expanded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stderr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tres.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_gres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wckey.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_directory_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
