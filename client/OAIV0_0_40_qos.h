/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV0_0_40_qos.h
 *
 * 
 */

#ifndef OAIV0_0_40_qos_H
#define OAIV0_0_40_qos_H

#include <QJsonObject>

#include "OAIV0_0_40_float64_no_val.h"
#include "OAIV0_0_40_qos_limits.h"
#include "OAIV0_0_40_qos_preempt.h"
#include "OAIV0_0_40_uint32_no_val.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace hm:slurm:client {
class OAIV0_0_40_qos_limits;
class OAIV0_0_40_qos_preempt;
class OAIV0_0_40_uint32_no_val;
class OAIV0_0_40_float64_no_val;

class OAIV0_0_40_qos : public OAIObject {
public:
    OAIV0_0_40_qos();
    OAIV0_0_40_qos(QString json);
    ~OAIV0_0_40_qos() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QString> getFlags() const;
    void setFlags(const QList<QString> &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIV0_0_40_qos_limits getLimits() const;
    void setLimits(const OAIV0_0_40_qos_limits &limits);
    bool is_limits_Set() const;
    bool is_limits_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIV0_0_40_qos_preempt getPreempt() const;
    void setPreempt(const OAIV0_0_40_qos_preempt &preempt);
    bool is_preempt_Set() const;
    bool is_preempt_Valid() const;

    OAIV0_0_40_uint32_no_val getPriority() const;
    void setPriority(const OAIV0_0_40_uint32_no_val &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    OAIV0_0_40_float64_no_val getUsageFactor() const;
    void setUsageFactor(const OAIV0_0_40_float64_no_val &usage_factor);
    bool is_usage_factor_Set() const;
    bool is_usage_factor_Valid() const;

    OAIV0_0_40_float64_no_val getUsageThreshold() const;
    void setUsageThreshold(const OAIV0_0_40_float64_no_val &usage_threshold);
    bool is_usage_threshold_Set() const;
    bool is_usage_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QString> m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIV0_0_40_qos_limits m_limits;
    bool m_limits_isSet;
    bool m_limits_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIV0_0_40_qos_preempt m_preempt;
    bool m_preempt_isSet;
    bool m_preempt_isValid;

    OAIV0_0_40_uint32_no_val m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    OAIV0_0_40_float64_no_val m_usage_factor;
    bool m_usage_factor_isSet;
    bool m_usage_factor_isValid;

    OAIV0_0_40_float64_no_val m_usage_threshold;
    bool m_usage_threshold_isSet;
    bool m_usage_threshold_isValid;
};

} // namespace hm:slurm:client

Q_DECLARE_METATYPE(hm:slurm:client::OAIV0_0_40_qos)

#endif // OAIV0_0_40_qos_H
