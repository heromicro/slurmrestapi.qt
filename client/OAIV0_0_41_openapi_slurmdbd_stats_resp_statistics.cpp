/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics() {
    this->initializeModel();
}

OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::~OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics() {}

void OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::initializeModel() {

    m_time_start_isSet = false;
    m_time_start_isValid = false;

    m_rollups_isSet = false;
    m_rollups_isValid = false;

    m_rpcs_isSet = false;
    m_rpcs_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::fromJsonObject(QJsonObject json) {

    m_time_start_isValid = ::OpenAPI::fromJsonValue(m_time_start, json[QString("time_start")]);
    m_time_start_isSet = !json[QString("time_start")].isNull() && m_time_start_isValid;

    m_rollups_isValid = ::OpenAPI::fromJsonValue(m_rollups, json[QString("rollups")]);
    m_rollups_isSet = !json[QString("rollups")].isNull() && m_rollups_isValid;

    m_rpcs_isValid = ::OpenAPI::fromJsonValue(m_rpcs, json[QString("RPCs")]);
    m_rpcs_isSet = !json[QString("RPCs")].isNull() && m_rpcs_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::asJsonObject() const {
    QJsonObject obj;
    if (m_time_start_isSet) {
        obj.insert(QString("time_start"), ::OpenAPI::toJsonValue(m_time_start));
    }
    if (m_rollups.isSet()) {
        obj.insert(QString("rollups"), ::OpenAPI::toJsonValue(m_rollups));
    }
    if (m_rpcs.size() > 0) {
        obj.insert(QString("RPCs"), ::OpenAPI::toJsonValue(m_rpcs));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

qint64 OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::getTimeStart() const {
    return m_time_start;
}
void OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::setTimeStart(const qint64 &time_start) {
    m_time_start = time_start;
    m_time_start_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::is_time_start_Set() const{
    return m_time_start_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::is_time_start_Valid() const{
    return m_time_start_isValid;
}

OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::getRollups() const {
    return m_rollups;
}
void OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::setRollups(const OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups &rollups) {
    m_rollups = rollups;
    m_rollups_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::is_rollups_Set() const{
    return m_rollups_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::is_rollups_Valid() const{
    return m_rollups_isValid;
}

QList<OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics_RPCs_inner> OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::getRpcs() const {
    return m_rpcs;
}
void OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::setRpcs(const QList<OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics_RPCs_inner> &rpcs) {
    m_rpcs = rpcs;
    m_rpcs_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::is_rpcs_Set() const{
    return m_rpcs_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::is_rpcs_Valid() const{
    return m_rpcs_isValid;
}

QList<OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics_users_inner> OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::getUsers() const {
    return m_users;
}
void OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::setUsers(const QList<OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics_users_inner> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::is_users_Set() const{
    return m_users_isSet;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpcs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_41_openapi_slurmdbd_stats_resp_statistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
