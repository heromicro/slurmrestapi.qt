/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_40_qos.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_40_qos::OAIV0_0_40_qos(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_40_qos::OAIV0_0_40_qos() {
    this->initializeModel();
}

OAIV0_0_40_qos::~OAIV0_0_40_qos() {}

void OAIV0_0_40_qos::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preempt_isSet = false;
    m_preempt_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_usage_factor_isSet = false;
    m_usage_factor_isValid = false;

    m_usage_threshold_isSet = false;
    m_usage_threshold_isValid = false;
}

void OAIV0_0_40_qos::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_40_qos::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preempt_isValid = ::OpenAPI::fromJsonValue(m_preempt, json[QString("preempt")]);
    m_preempt_isSet = !json[QString("preempt")].isNull() && m_preempt_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_usage_factor_isValid = ::OpenAPI::fromJsonValue(m_usage_factor, json[QString("usage_factor")]);
    m_usage_factor_isSet = !json[QString("usage_factor")].isNull() && m_usage_factor_isValid;

    m_usage_threshold_isValid = ::OpenAPI::fromJsonValue(m_usage_threshold, json[QString("usage_threshold")]);
    m_usage_threshold_isSet = !json[QString("usage_threshold")].isNull() && m_usage_threshold_isValid;
}

QString OAIV0_0_40_qos::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_40_qos::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_limits.isSet()) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preempt.isSet()) {
        obj.insert(QString("preempt"), ::OpenAPI::toJsonValue(m_preempt));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_usage_factor.isSet()) {
        obj.insert(QString("usage_factor"), ::OpenAPI::toJsonValue(m_usage_factor));
    }
    if (m_usage_threshold.isSet()) {
        obj.insert(QString("usage_threshold"), ::OpenAPI::toJsonValue(m_usage_threshold));
    }
    return obj;
}

QString OAIV0_0_40_qos::getDescription() const {
    return m_description;
}
void OAIV0_0_40_qos::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIV0_0_40_qos::is_description_Set() const{
    return m_description_isSet;
}

bool OAIV0_0_40_qos::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIV0_0_40_qos::getFlags() const {
    return m_flags;
}
void OAIV0_0_40_qos::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIV0_0_40_qos::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIV0_0_40_qos::is_flags_Valid() const{
    return m_flags_isValid;
}

qint32 OAIV0_0_40_qos::getId() const {
    return m_id;
}
void OAIV0_0_40_qos::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIV0_0_40_qos::is_id_Set() const{
    return m_id_isSet;
}

bool OAIV0_0_40_qos::is_id_Valid() const{
    return m_id_isValid;
}

OAIV0_0_40_qos_limits OAIV0_0_40_qos::getLimits() const {
    return m_limits;
}
void OAIV0_0_40_qos::setLimits(const OAIV0_0_40_qos_limits &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIV0_0_40_qos::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIV0_0_40_qos::is_limits_Valid() const{
    return m_limits_isValid;
}

QString OAIV0_0_40_qos::getName() const {
    return m_name;
}
void OAIV0_0_40_qos::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV0_0_40_qos::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV0_0_40_qos::is_name_Valid() const{
    return m_name_isValid;
}

OAIV0_0_40_qos_preempt OAIV0_0_40_qos::getPreempt() const {
    return m_preempt;
}
void OAIV0_0_40_qos::setPreempt(const OAIV0_0_40_qos_preempt &preempt) {
    m_preempt = preempt;
    m_preempt_isSet = true;
}

bool OAIV0_0_40_qos::is_preempt_Set() const{
    return m_preempt_isSet;
}

bool OAIV0_0_40_qos::is_preempt_Valid() const{
    return m_preempt_isValid;
}

OAIV0_0_40_uint32_no_val OAIV0_0_40_qos::getPriority() const {
    return m_priority;
}
void OAIV0_0_40_qos::setPriority(const OAIV0_0_40_uint32_no_val &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIV0_0_40_qos::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIV0_0_40_qos::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIV0_0_40_float64_no_val OAIV0_0_40_qos::getUsageFactor() const {
    return m_usage_factor;
}
void OAIV0_0_40_qos::setUsageFactor(const OAIV0_0_40_float64_no_val &usage_factor) {
    m_usage_factor = usage_factor;
    m_usage_factor_isSet = true;
}

bool OAIV0_0_40_qos::is_usage_factor_Set() const{
    return m_usage_factor_isSet;
}

bool OAIV0_0_40_qos::is_usage_factor_Valid() const{
    return m_usage_factor_isValid;
}

OAIV0_0_40_float64_no_val OAIV0_0_40_qos::getUsageThreshold() const {
    return m_usage_threshold;
}
void OAIV0_0_40_qos::setUsageThreshold(const OAIV0_0_40_float64_no_val &usage_threshold) {
    m_usage_threshold = usage_threshold;
    m_usage_threshold_isSet = true;
}

bool OAIV0_0_40_qos::is_usage_threshold_Set() const{
    return m_usage_threshold_isSet;
}

bool OAIV0_0_40_qos::is_usage_threshold_Valid() const{
    return m_usage_threshold_isValid;
}

bool OAIV0_0_40_qos::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preempt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_factor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_40_qos::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
