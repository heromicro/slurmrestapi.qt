/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_39_job_state.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace hm:slurm:client {

OAIV0_0_39_job_state::OAIV0_0_39_job_state(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_39_job_state::OAIV0_0_39_job_state() {
    this->initializeModel();
}

OAIV0_0_39_job_state::~OAIV0_0_39_job_state() {}

void OAIV0_0_39_job_state::initializeModel() {

    m_current_isSet = false;
    m_current_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIV0_0_39_job_state::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_39_job_state::fromJsonObject(QJsonObject json) {

    m_current_isValid = ::hm:slurm:client::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_reason_isValid = ::hm:slurm:client::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIV0_0_39_job_state::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_39_job_state::asJsonObject() const {
    QJsonObject obj;
    if (m_current_isSet) {
        obj.insert(QString("current"), ::hm:slurm:client::toJsonValue(m_current));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::hm:slurm:client::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIV0_0_39_job_state::getCurrent() const {
    return m_current;
}
void OAIV0_0_39_job_state::setCurrent(const QString &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIV0_0_39_job_state::is_current_Set() const{
    return m_current_isSet;
}

bool OAIV0_0_39_job_state::is_current_Valid() const{
    return m_current_isValid;
}

QString OAIV0_0_39_job_state::getReason() const {
    return m_reason;
}
void OAIV0_0_39_job_state::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIV0_0_39_job_state::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIV0_0_39_job_state::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIV0_0_39_job_state::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_39_job_state::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace hm:slurm:client
