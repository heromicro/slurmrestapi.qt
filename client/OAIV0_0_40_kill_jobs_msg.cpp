/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_40_kill_jobs_msg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_40_kill_jobs_msg::OAIV0_0_40_kill_jobs_msg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_40_kill_jobs_msg::OAIV0_0_40_kill_jobs_msg() {
    this->initializeModel();
}

OAIV0_0_40_kill_jobs_msg::~OAIV0_0_40_kill_jobs_msg() {}

void OAIV0_0_40_kill_jobs_msg::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_qos_isSet = false;
    m_qos_isValid = false;

    m_reservation_isSet = false;
    m_reservation_isValid = false;

    m_signal_isSet = false;
    m_signal_isValid = false;

    m_job_state_isSet = false;
    m_job_state_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_wckey_isSet = false;
    m_wckey_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;
}

void OAIV0_0_40_kill_jobs_msg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_40_kill_jobs_msg::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("job_name")]);
    m_job_name_isSet = !json[QString("job_name")].isNull() && m_job_name_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_qos_isValid = ::OpenAPI::fromJsonValue(m_qos, json[QString("qos")]);
    m_qos_isSet = !json[QString("qos")].isNull() && m_qos_isValid;

    m_reservation_isValid = ::OpenAPI::fromJsonValue(m_reservation, json[QString("reservation")]);
    m_reservation_isSet = !json[QString("reservation")].isNull() && m_reservation_isValid;

    m_signal_isValid = ::OpenAPI::fromJsonValue(m_signal, json[QString("signal")]);
    m_signal_isSet = !json[QString("signal")].isNull() && m_signal_isValid;

    m_job_state_isValid = ::OpenAPI::fromJsonValue(m_job_state, json[QString("job_state")]);
    m_job_state_isSet = !json[QString("job_state")].isNull() && m_job_state_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;

    m_wckey_isValid = ::OpenAPI::fromJsonValue(m_wckey, json[QString("wckey")]);
    m_wckey_isSet = !json[QString("wckey")].isNull() && m_wckey_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;
}

QString OAIV0_0_40_kill_jobs_msg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_40_kill_jobs_msg::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("job_name"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_qos_isSet) {
        obj.insert(QString("qos"), ::OpenAPI::toJsonValue(m_qos));
    }
    if (m_reservation_isSet) {
        obj.insert(QString("reservation"), ::OpenAPI::toJsonValue(m_reservation));
    }
    if (m_signal_isSet) {
        obj.insert(QString("signal"), ::OpenAPI::toJsonValue(m_signal));
    }
    if (m_job_state.size() > 0) {
        obj.insert(QString("job_state"), ::OpenAPI::toJsonValue(m_job_state));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_wckey_isSet) {
        obj.insert(QString("wckey"), ::OpenAPI::toJsonValue(m_wckey));
    }
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    return obj;
}

QString OAIV0_0_40_kill_jobs_msg::getAccount() const {
    return m_account;
}
void OAIV0_0_40_kill_jobs_msg::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_account_Set() const{
    return m_account_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_account_Valid() const{
    return m_account_isValid;
}

QList<QString> OAIV0_0_40_kill_jobs_msg::getFlags() const {
    return m_flags;
}
void OAIV0_0_40_kill_jobs_msg::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIV0_0_40_kill_jobs_msg::getJobName() const {
    return m_job_name;
}
void OAIV0_0_40_kill_jobs_msg::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QList<QString> OAIV0_0_40_kill_jobs_msg::getJobs() const {
    return m_jobs;
}
void OAIV0_0_40_kill_jobs_msg::setJobs(const QList<QString> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_jobs_Valid() const{
    return m_jobs_isValid;
}

QString OAIV0_0_40_kill_jobs_msg::getPartition() const {
    return m_partition;
}
void OAIV0_0_40_kill_jobs_msg::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_partition_Valid() const{
    return m_partition_isValid;
}

QString OAIV0_0_40_kill_jobs_msg::getQos() const {
    return m_qos;
}
void OAIV0_0_40_kill_jobs_msg::setQos(const QString &qos) {
    m_qos = qos;
    m_qos_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_qos_Set() const{
    return m_qos_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_qos_Valid() const{
    return m_qos_isValid;
}

QString OAIV0_0_40_kill_jobs_msg::getReservation() const {
    return m_reservation;
}
void OAIV0_0_40_kill_jobs_msg::setReservation(const QString &reservation) {
    m_reservation = reservation;
    m_reservation_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_reservation_Set() const{
    return m_reservation_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_reservation_Valid() const{
    return m_reservation_isValid;
}

QString OAIV0_0_40_kill_jobs_msg::getSignal() const {
    return m_signal;
}
void OAIV0_0_40_kill_jobs_msg::setSignal(const QString &signal) {
    m_signal = signal;
    m_signal_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_signal_Set() const{
    return m_signal_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_signal_Valid() const{
    return m_signal_isValid;
}

QList<QString> OAIV0_0_40_kill_jobs_msg::getJobState() const {
    return m_job_state;
}
void OAIV0_0_40_kill_jobs_msg::setJobState(const QList<QString> &job_state) {
    m_job_state = job_state;
    m_job_state_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_job_state_Set() const{
    return m_job_state_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_job_state_Valid() const{
    return m_job_state_isValid;
}

QString OAIV0_0_40_kill_jobs_msg::getUserId() const {
    return m_user_id;
}
void OAIV0_0_40_kill_jobs_msg::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIV0_0_40_kill_jobs_msg::getUserName() const {
    return m_user_name;
}
void OAIV0_0_40_kill_jobs_msg::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIV0_0_40_kill_jobs_msg::getWckey() const {
    return m_wckey;
}
void OAIV0_0_40_kill_jobs_msg::setWckey(const QString &wckey) {
    m_wckey = wckey;
    m_wckey_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_wckey_Set() const{
    return m_wckey_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_wckey_Valid() const{
    return m_wckey_isValid;
}

QList<QString> OAIV0_0_40_kill_jobs_msg::getNodes() const {
    return m_nodes;
}
void OAIV0_0_40_kill_jobs_msg::setNodes(const QList<QString> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIV0_0_40_kill_jobs_msg::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIV0_0_40_kill_jobs_msg::is_nodes_Valid() const{
    return m_nodes_isValid;
}

bool OAIV0_0_40_kill_jobs_msg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_state.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wckey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_40_kill_jobs_msg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
