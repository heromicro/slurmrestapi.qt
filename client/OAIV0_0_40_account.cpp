/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_40_account.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_40_account::OAIV0_0_40_account(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_40_account::OAIV0_0_40_account() {
    this->initializeModel();
}

OAIV0_0_40_account::~OAIV0_0_40_account() {}

void OAIV0_0_40_account::initializeModel() {

    m_associations_isSet = false;
    m_associations_isValid = false;

    m_coordinators_isSet = false;
    m_coordinators_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;
}

void OAIV0_0_40_account::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_40_account::fromJsonObject(QJsonObject json) {

    m_associations_isValid = ::OpenAPI::fromJsonValue(m_associations, json[QString("associations")]);
    m_associations_isSet = !json[QString("associations")].isNull() && m_associations_isValid;

    m_coordinators_isValid = ::OpenAPI::fromJsonValue(m_coordinators, json[QString("coordinators")]);
    m_coordinators_isSet = !json[QString("coordinators")].isNull() && m_coordinators_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;
}

QString OAIV0_0_40_account::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_40_account::asJsonObject() const {
    QJsonObject obj;
    if (m_associations.size() > 0) {
        obj.insert(QString("associations"), ::OpenAPI::toJsonValue(m_associations));
    }
    if (m_coordinators.size() > 0) {
        obj.insert(QString("coordinators"), ::OpenAPI::toJsonValue(m_coordinators));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    return obj;
}

QList<OAIV0_0_40_assoc_short> OAIV0_0_40_account::getAssociations() const {
    return m_associations;
}
void OAIV0_0_40_account::setAssociations(const QList<OAIV0_0_40_assoc_short> &associations) {
    m_associations = associations;
    m_associations_isSet = true;
}

bool OAIV0_0_40_account::is_associations_Set() const{
    return m_associations_isSet;
}

bool OAIV0_0_40_account::is_associations_Valid() const{
    return m_associations_isValid;
}

QList<OAIV0_0_40_coord> OAIV0_0_40_account::getCoordinators() const {
    return m_coordinators;
}
void OAIV0_0_40_account::setCoordinators(const QList<OAIV0_0_40_coord> &coordinators) {
    m_coordinators = coordinators;
    m_coordinators_isSet = true;
}

bool OAIV0_0_40_account::is_coordinators_Set() const{
    return m_coordinators_isSet;
}

bool OAIV0_0_40_account::is_coordinators_Valid() const{
    return m_coordinators_isValid;
}

QString OAIV0_0_40_account::getDescription() const {
    return m_description;
}
void OAIV0_0_40_account::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIV0_0_40_account::is_description_Set() const{
    return m_description_isSet;
}

bool OAIV0_0_40_account::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIV0_0_40_account::getName() const {
    return m_name;
}
void OAIV0_0_40_account::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV0_0_40_account::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV0_0_40_account::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIV0_0_40_account::getOrganization() const {
    return m_organization;
}
void OAIV0_0_40_account::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIV0_0_40_account::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIV0_0_40_account::is_organization_Valid() const{
    return m_organization_isValid;
}

QList<QString> OAIV0_0_40_account::getFlags() const {
    return m_flags;
}
void OAIV0_0_40_account::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIV0_0_40_account::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIV0_0_40_account::is_flags_Valid() const{
    return m_flags_isValid;
}

bool OAIV0_0_40_account::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_40_account::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && m_organization_isValid && true;
}

} // namespace OpenAPI
