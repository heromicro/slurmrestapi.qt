/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV0_0_39_node.h
 *
 * 
 */

#ifndef OAIV0_0_39_node_H
#define OAIV0_0_39_node_H

#include <QJsonObject>

#include "OAIV0_0_39_acct_gather_energy.h"
#include "OAIV0_0_39_ext_sensors_data.h"
#include "OAIV0_0_39_power_mgmt_data.h"
#include "OAIV0_0_39_uint32_no_val.h"
#include "OAIV0_0_39_uint64_no_val.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIV0_0_39_uint32_no_val;
class OAIV0_0_39_uint64_no_val;
class OAIV0_0_39_acct_gather_energy;
class OAIV0_0_39_ext_sensors_data;
class OAIV0_0_39_power_mgmt_data;

class OAIV0_0_39_node : public OAIObject {
public:
    OAIV0_0_39_node();
    OAIV0_0_39_node(QString json);
    ~OAIV0_0_39_node() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QString getBurstbufferNetworkAddress() const;
    void setBurstbufferNetworkAddress(const QString &burstbuffer_network_address);
    bool is_burstbuffer_network_address_Set() const;
    bool is_burstbuffer_network_address_Valid() const;

    qint32 getBoards() const;
    void setBoards(const qint32 &boards);
    bool is_boards_Set() const;
    bool is_boards_Valid() const;

    qint64 getBootTime() const;
    void setBootTime(const qint64 &boot_time);
    bool is_boot_time_Set() const;
    bool is_boot_time_Valid() const;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    qint32 getCores() const;
    void setCores(const qint32 &cores);
    bool is_cores_Set() const;
    bool is_cores_Valid() const;

    qint32 getSpecializedCores() const;
    void setSpecializedCores(const qint32 &specialized_cores);
    bool is_specialized_cores_Set() const;
    bool is_specialized_cores_Valid() const;

    qint32 getCpuBinding() const;
    void setCpuBinding(const qint32 &cpu_binding);
    bool is_cpu_binding_Set() const;
    bool is_cpu_binding_Valid() const;

    OAIV0_0_39_uint32_no_val getCpuLoad() const;
    void setCpuLoad(const OAIV0_0_39_uint32_no_val &cpu_load);
    bool is_cpu_load_Set() const;
    bool is_cpu_load_Valid() const;

    OAIV0_0_39_uint64_no_val getFreeMem() const;
    void setFreeMem(const OAIV0_0_39_uint64_no_val &free_mem);
    bool is_free_mem_Set() const;
    bool is_free_mem_Valid() const;

    qint32 getCpus() const;
    void setCpus(const qint32 &cpus);
    bool is_cpus_Set() const;
    bool is_cpus_Valid() const;

    qint32 getEffectiveCpus() const;
    void setEffectiveCpus(const qint32 &effective_cpus);
    bool is_effective_cpus_Set() const;
    bool is_effective_cpus_Valid() const;

    QString getSpecializedCpus() const;
    void setSpecializedCpus(const QString &specialized_cpus);
    bool is_specialized_cpus_Set() const;
    bool is_specialized_cpus_Valid() const;

    OAIV0_0_39_acct_gather_energy getEnergy() const;
    void setEnergy(const OAIV0_0_39_acct_gather_energy &energy);
    bool is_energy_Set() const;
    bool is_energy_Valid() const;

    OAIV0_0_39_ext_sensors_data getExternalSensors() const;
    void setExternalSensors(const OAIV0_0_39_ext_sensors_data &external_sensors);
    bool is_external_sensors_Set() const;
    bool is_external_sensors_Valid() const;

    QString getExtra() const;
    void setExtra(const QString &extra);
    bool is_extra_Set() const;
    bool is_extra_Valid() const;

    OAIV0_0_39_power_mgmt_data getPower() const;
    void setPower(const OAIV0_0_39_power_mgmt_data &power);
    bool is_power_Set() const;
    bool is_power_Valid() const;

    QList<QString> getFeatures() const;
    void setFeatures(const QList<QString> &features);
    bool is_features_Set() const;
    bool is_features_Valid() const;

    QList<QString> getActiveFeatures() const;
    void setActiveFeatures(const QList<QString> &active_features);
    bool is_active_features_Set() const;
    bool is_active_features_Valid() const;

    QString getGres() const;
    void setGres(const QString &gres);
    bool is_gres_Set() const;
    bool is_gres_Valid() const;

    QString getGresDrained() const;
    void setGresDrained(const QString &gres_drained);
    bool is_gres_drained_Set() const;
    bool is_gres_drained_Valid() const;

    QString getGresUsed() const;
    void setGresUsed(const QString &gres_used);
    bool is_gres_used_Set() const;
    bool is_gres_used_Valid() const;

    qint64 getLastBusy() const;
    void setLastBusy(const qint64 &last_busy);
    bool is_last_busy_Set() const;
    bool is_last_busy_Valid() const;

    QString getMcsLabel() const;
    void setMcsLabel(const QString &mcs_label);
    bool is_mcs_label_Set() const;
    bool is_mcs_label_Valid() const;

    qint64 getSpecializedMemory() const;
    void setSpecializedMemory(const qint64 &specialized_memory);
    bool is_specialized_memory_Set() const;
    bool is_specialized_memory_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getNextStateAfterReboot() const;
    void setNextStateAfterReboot(const QList<QString> &next_state_after_reboot);
    bool is_next_state_after_reboot_Set() const;
    bool is_next_state_after_reboot_Valid() const;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QList<QString> getState() const;
    void setState(const QList<QString> &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getOperatingSystem() const;
    void setOperatingSystem(const QString &operating_system);
    bool is_operating_system_Set() const;
    bool is_operating_system_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QList<QString> getPartitions() const;
    void setPartitions(const QList<QString> &partitions);
    bool is_partitions_Set() const;
    bool is_partitions_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    qint64 getRealMemory() const;
    void setRealMemory(const qint64 &real_memory);
    bool is_real_memory_Set() const;
    bool is_real_memory_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    qint64 getReasonChangedAt() const;
    void setReasonChangedAt(const qint64 &reason_changed_at);
    bool is_reason_changed_at_Set() const;
    bool is_reason_changed_at_Valid() const;

    QString getReasonSetByUser() const;
    void setReasonSetByUser(const QString &reason_set_by_user);
    bool is_reason_set_by_user_Set() const;
    bool is_reason_set_by_user_Valid() const;

    OAIV0_0_39_uint64_no_val getResumeAfter() const;
    void setResumeAfter(const OAIV0_0_39_uint64_no_val &resume_after);
    bool is_resume_after_Set() const;
    bool is_resume_after_Valid() const;

    QString getReservation() const;
    void setReservation(const QString &reservation);
    bool is_reservation_Set() const;
    bool is_reservation_Valid() const;

    qint64 getAllocMemory() const;
    void setAllocMemory(const qint64 &alloc_memory);
    bool is_alloc_memory_Set() const;
    bool is_alloc_memory_Valid() const;

    qint32 getAllocCpus() const;
    void setAllocCpus(const qint32 &alloc_cpus);
    bool is_alloc_cpus_Set() const;
    bool is_alloc_cpus_Valid() const;

    qint32 getAllocIdleCpus() const;
    void setAllocIdleCpus(const qint32 &alloc_idle_cpus);
    bool is_alloc_idle_cpus_Set() const;
    bool is_alloc_idle_cpus_Valid() const;

    QString getTresUsed() const;
    void setTresUsed(const QString &tres_used);
    bool is_tres_used_Set() const;
    bool is_tres_used_Valid() const;

    double getTresWeighted() const;
    void setTresWeighted(const double &tres_weighted);
    bool is_tres_weighted_Set() const;
    bool is_tres_weighted_Valid() const;

    qint64 getSlurmdStartTime() const;
    void setSlurmdStartTime(const qint64 &slurmd_start_time);
    bool is_slurmd_start_time_Set() const;
    bool is_slurmd_start_time_Valid() const;

    qint32 getSockets() const;
    void setSockets(const qint32 &sockets);
    bool is_sockets_Set() const;
    bool is_sockets_Valid() const;

    qint32 getThreads() const;
    void setThreads(const qint32 &threads);
    bool is_threads_Set() const;
    bool is_threads_Valid() const;

    qint32 getTemporaryDisk() const;
    void setTemporaryDisk(const qint32 &temporary_disk);
    bool is_temporary_disk_Set() const;
    bool is_temporary_disk_Valid() const;

    qint32 getWeight() const;
    void setWeight(const qint32 &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    QString getTres() const;
    void setTres(const QString &tres);
    bool is_tres_Set() const;
    bool is_tres_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QString m_burstbuffer_network_address;
    bool m_burstbuffer_network_address_isSet;
    bool m_burstbuffer_network_address_isValid;

    qint32 m_boards;
    bool m_boards_isSet;
    bool m_boards_isValid;

    qint64 m_boot_time;
    bool m_boot_time_isSet;
    bool m_boot_time_isValid;

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    qint32 m_cores;
    bool m_cores_isSet;
    bool m_cores_isValid;

    qint32 m_specialized_cores;
    bool m_specialized_cores_isSet;
    bool m_specialized_cores_isValid;

    qint32 m_cpu_binding;
    bool m_cpu_binding_isSet;
    bool m_cpu_binding_isValid;

    OAIV0_0_39_uint32_no_val m_cpu_load;
    bool m_cpu_load_isSet;
    bool m_cpu_load_isValid;

    OAIV0_0_39_uint64_no_val m_free_mem;
    bool m_free_mem_isSet;
    bool m_free_mem_isValid;

    qint32 m_cpus;
    bool m_cpus_isSet;
    bool m_cpus_isValid;

    qint32 m_effective_cpus;
    bool m_effective_cpus_isSet;
    bool m_effective_cpus_isValid;

    QString m_specialized_cpus;
    bool m_specialized_cpus_isSet;
    bool m_specialized_cpus_isValid;

    OAIV0_0_39_acct_gather_energy m_energy;
    bool m_energy_isSet;
    bool m_energy_isValid;

    OAIV0_0_39_ext_sensors_data m_external_sensors;
    bool m_external_sensors_isSet;
    bool m_external_sensors_isValid;

    QString m_extra;
    bool m_extra_isSet;
    bool m_extra_isValid;

    OAIV0_0_39_power_mgmt_data m_power;
    bool m_power_isSet;
    bool m_power_isValid;

    QList<QString> m_features;
    bool m_features_isSet;
    bool m_features_isValid;

    QList<QString> m_active_features;
    bool m_active_features_isSet;
    bool m_active_features_isValid;

    QString m_gres;
    bool m_gres_isSet;
    bool m_gres_isValid;

    QString m_gres_drained;
    bool m_gres_drained_isSet;
    bool m_gres_drained_isValid;

    QString m_gres_used;
    bool m_gres_used_isSet;
    bool m_gres_used_isValid;

    qint64 m_last_busy;
    bool m_last_busy_isSet;
    bool m_last_busy_isValid;

    QString m_mcs_label;
    bool m_mcs_label_isSet;
    bool m_mcs_label_isValid;

    qint64 m_specialized_memory;
    bool m_specialized_memory_isSet;
    bool m_specialized_memory_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_next_state_after_reboot;
    bool m_next_state_after_reboot_isSet;
    bool m_next_state_after_reboot_isValid;

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QList<QString> m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_operating_system;
    bool m_operating_system_isSet;
    bool m_operating_system_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QList<QString> m_partitions;
    bool m_partitions_isSet;
    bool m_partitions_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    qint64 m_real_memory;
    bool m_real_memory_isSet;
    bool m_real_memory_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    qint64 m_reason_changed_at;
    bool m_reason_changed_at_isSet;
    bool m_reason_changed_at_isValid;

    QString m_reason_set_by_user;
    bool m_reason_set_by_user_isSet;
    bool m_reason_set_by_user_isValid;

    OAIV0_0_39_uint64_no_val m_resume_after;
    bool m_resume_after_isSet;
    bool m_resume_after_isValid;

    QString m_reservation;
    bool m_reservation_isSet;
    bool m_reservation_isValid;

    qint64 m_alloc_memory;
    bool m_alloc_memory_isSet;
    bool m_alloc_memory_isValid;

    qint32 m_alloc_cpus;
    bool m_alloc_cpus_isSet;
    bool m_alloc_cpus_isValid;

    qint32 m_alloc_idle_cpus;
    bool m_alloc_idle_cpus_isSet;
    bool m_alloc_idle_cpus_isValid;

    QString m_tres_used;
    bool m_tres_used_isSet;
    bool m_tres_used_isValid;

    double m_tres_weighted;
    bool m_tres_weighted_isSet;
    bool m_tres_weighted_isValid;

    qint64 m_slurmd_start_time;
    bool m_slurmd_start_time_isSet;
    bool m_slurmd_start_time_isValid;

    qint32 m_sockets;
    bool m_sockets_isSet;
    bool m_sockets_isValid;

    qint32 m_threads;
    bool m_threads_isSet;
    bool m_threads_isValid;

    qint32 m_temporary_disk;
    bool m_temporary_disk_isSet;
    bool m_temporary_disk_isValid;

    qint32 m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;

    QString m_tres;
    bool m_tres_isSet;
    bool m_tres_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV0_0_39_node)

#endif // OAIV0_0_39_node_H
