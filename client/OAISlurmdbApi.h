/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISlurmdbApi_H
#define OAI_OAISlurmdbApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIV0_0_40_openapi_accounts_add_cond_resp.h"
#include "OAIV0_0_40_openapi_accounts_add_cond_resp_str.h"
#include "OAIV0_0_40_openapi_accounts_removed_resp.h"
#include "OAIV0_0_40_openapi_accounts_resp.h"
#include "OAIV0_0_40_openapi_assocs_removed_resp.h"
#include "OAIV0_0_40_openapi_assocs_resp.h"
#include "OAIV0_0_40_openapi_clusters_removed_resp.h"
#include "OAIV0_0_40_openapi_clusters_resp.h"
#include "OAIV0_0_40_openapi_instances_resp.h"
#include "OAIV0_0_40_openapi_resp.h"
#include "OAIV0_0_40_openapi_slurmdbd_config_resp.h"
#include "OAIV0_0_40_openapi_slurmdbd_jobs_resp.h"
#include "OAIV0_0_40_openapi_slurmdbd_qos_removed_resp.h"
#include "OAIV0_0_40_openapi_slurmdbd_qos_resp.h"
#include "OAIV0_0_40_openapi_slurmdbd_stats_resp.h"
#include "OAIV0_0_40_openapi_tres_resp.h"
#include "OAIV0_0_40_openapi_users_add_cond_resp.h"
#include "OAIV0_0_40_openapi_users_add_cond_resp_str.h"
#include "OAIV0_0_40_openapi_users_resp.h"
#include "OAIV0_0_40_openapi_wckey_removed_resp.h"
#include "OAIV0_0_40_openapi_wckey_resp.h"
#include "OAIV0_0_41_openapi_accounts_add_cond_resp.h"
#include "OAIV0_0_41_openapi_accounts_add_cond_resp_str.h"
#include "OAIV0_0_41_openapi_accounts_removed_resp.h"
#include "OAIV0_0_41_openapi_accounts_resp.h"
#include "OAIV0_0_41_openapi_assocs_removed_resp.h"
#include "OAIV0_0_41_openapi_assocs_resp.h"
#include "OAIV0_0_41_openapi_clusters_removed_resp.h"
#include "OAIV0_0_41_openapi_clusters_resp.h"
#include "OAIV0_0_41_openapi_instances_resp.h"
#include "OAIV0_0_41_openapi_resp.h"
#include "OAIV0_0_41_openapi_slurmdbd_config_resp.h"
#include "OAIV0_0_41_openapi_slurmdbd_jobs_resp.h"
#include "OAIV0_0_41_openapi_slurmdbd_qos_removed_resp.h"
#include "OAIV0_0_41_openapi_slurmdbd_qos_resp.h"
#include "OAIV0_0_41_openapi_slurmdbd_stats_resp.h"
#include "OAIV0_0_41_openapi_tres_resp.h"
#include "OAIV0_0_41_openapi_users_add_cond_resp.h"
#include "OAIV0_0_41_openapi_users_add_cond_resp_str.h"
#include "OAIV0_0_41_openapi_users_resp.h"
#include "OAIV0_0_41_openapi_wckey_removed_resp.h"
#include "OAIV0_0_41_openapi_wckey_resp.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISlurmdbApi : public QObject {
    Q_OBJECT

public:
    OAISlurmdbApi(const int timeOut = 0);
    ~OAISlurmdbApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_name QString [required]
    */
    virtual void slurmdbV0040DeleteAccount(const QString &account_name);

    /**
    * @param[in]  account QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  default_qos QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  parent_account QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_raw_qos QString [optional]
    * @param[in]  with_sub_accts QString [optional]
    * @param[in]  without_parent_info QString [optional]
    * @param[in]  without_parent_limits QString [optional]
    */
    virtual void slurmdbV0040DeleteAssociation(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_raw_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_sub_accts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_limits = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  default_qos QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  parent_account QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_raw_qos QString [optional]
    * @param[in]  with_sub_accts QString [optional]
    * @param[in]  without_parent_info QString [optional]
    * @param[in]  without_parent_limits QString [optional]
    */
    virtual void slurmdbV0040DeleteAssociations(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_raw_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_sub_accts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_limits = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_name QString [required]
    * @param[in]  classification QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  federation QString [optional]
    * @param[in]  flags QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  rpc_version QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_usage QString [optional]
    */
    virtual void slurmdbV0040DeleteCluster(const QString &cluster_name, const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &federation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &flags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rpc_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qos QString [required]
    */
    virtual void slurmdbV0040DeleteSingleQos(const QString &qos);

    /**
    * @param[in]  name QString [required]
    */
    virtual void slurmdbV0040DeleteUser(const QString &name);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slurmdbV0040DeleteWckey(const QString &id);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  with_assocs QString [optional]
    * @param[in]  with_coords QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void slurmdbV0040GetAccount(const QString &account_name, const ::OpenAPI::OptionalParam<QString> &with_assocs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_coords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  description QString [optional]
    * @param[in]  with_assocs QString [optional]
    * @param[in]  with_coords QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void slurmdbV0040GetAccounts(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_assocs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_coords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  default_qos QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  parent_account QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_raw_qos QString [optional]
    * @param[in]  with_sub_accts QString [optional]
    * @param[in]  without_parent_info QString [optional]
    * @param[in]  without_parent_limits QString [optional]
    */
    virtual void slurmdbV0040GetAssociation(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_raw_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_sub_accts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_limits = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  default_qos QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  parent_account QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_raw_qos QString [optional]
    * @param[in]  with_sub_accts QString [optional]
    * @param[in]  without_parent_info QString [optional]
    * @param[in]  without_parent_limits QString [optional]
    */
    virtual void slurmdbV0040GetAssociations(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_raw_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_sub_accts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_limits = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_name QString [required]
    * @param[in]  classification QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  federation QString [optional]
    * @param[in]  flags QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  rpc_version QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_usage QString [optional]
    */
    virtual void slurmdbV0040GetCluster(const QString &cluster_name, const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &federation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &flags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rpc_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    */
    virtual void slurmdbV0040GetClusters(const ::OpenAPI::OptionalParam<QString> &update_time = ::OpenAPI::OptionalParam<QString>());


    virtual void slurmdbV0040GetConfig();


    virtual void slurmdbV0040GetDiag();

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  extra QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  instance_id QString [optional]
    * @param[in]  instance_type QString [optional]
    * @param[in]  node_list QString [optional]
    * @param[in]  time_end QString [optional]
    * @param[in]  time_start QString [optional]
    */
    virtual void slurmdbV0040GetInstance(const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extra = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_list = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_start = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  extra QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  instance_id QString [optional]
    * @param[in]  instance_type QString [optional]
    * @param[in]  node_list QString [optional]
    * @param[in]  time_end QString [optional]
    * @param[in]  time_start QString [optional]
    */
    virtual void slurmdbV0040GetInstances(const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extra = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_list = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_start = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void slurmdbV0040GetJob(const QString &job_id);

    /**
    * @param[in]  account QString [optional]
    * @param[in]  association QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  constraints QString [optional]
    * @param[in]  cpus_max QString [optional]
    * @param[in]  cpus_min QString [optional]
    * @param[in]  scheduler_unset QString [optional]
    * @param[in]  scheduled_on_submit QString [optional]
    * @param[in]  scheduled_by_main QString [optional]
    * @param[in]  scheduled_by_backfill QString [optional]
    * @param[in]  job_started QString [optional]
    * @param[in]  exit_code QString [optional]
    * @param[in]  show_duplicates QString [optional]
    * @param[in]  skip_steps QString [optional]
    * @param[in]  disable_truncate_usage_time QString [optional]
    * @param[in]  whole_hetjob QString [optional]
    * @param[in]  disable_whole_hetjob QString [optional]
    * @param[in]  disable_wait_for_result QString [optional]
    * @param[in]  usage_time_as_submit_time QString [optional]
    * @param[in]  show_batch_script QString [optional]
    * @param[in]  show_job_environment QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  groups QString [optional]
    * @param[in]  job_name QString [optional]
    * @param[in]  nodes_max QString [optional]
    * @param[in]  nodes_min QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  reason QString [optional]
    * @param[in]  reservation QString [optional]
    * @param[in]  reservation_id QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  step QString [optional]
    * @param[in]  timelimit_max QString [optional]
    * @param[in]  timelimit_min QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  submit_time QString [optional]
    * @param[in]  node QString [optional]
    * @param[in]  users QString [optional]
    * @param[in]  wckey QString [optional]
    */
    virtual void slurmdbV0040GetJobs(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &association = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &constraints = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cpus_max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cpus_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduler_unset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduled_on_submit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduled_by_main = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduled_by_backfill = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &job_started = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exit_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &show_duplicates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_steps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable_truncate_usage_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &whole_hetjob = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable_whole_hetjob = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable_wait_for_result = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_time_as_submit_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &show_batch_script = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &show_job_environment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &groups = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &job_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nodes_max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nodes_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reason = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reservation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reservation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &step = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timelimit_max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timelimit_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &submit_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &users = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wckey = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  description QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  preempt_mode QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void slurmdbV0040GetQos(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preempt_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qos QString [required]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void slurmdbV0040GetSingleQos(const QString &qos, const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());


    virtual void slurmdbV0040GetTres();

    /**
    * @param[in]  name QString [required]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_assocs QString [optional]
    * @param[in]  with_coords QString [optional]
    * @param[in]  with_wckeys QString [optional]
    */
    virtual void slurmdbV0040GetUser(const QString &name, const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_assocs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_coords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_wckeys = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  admin_level QString [optional]
    * @param[in]  default_account QString [optional]
    * @param[in]  default_wckey QString [optional]
    * @param[in]  with_assocs QString [optional]
    * @param[in]  with_coords QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_wckeys QString [optional]
    * @param[in]  without_defaults QString [optional]
    */
    virtual void slurmdbV0040GetUsers(const ::OpenAPI::OptionalParam<QString> &admin_level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_wckey = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_assocs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_coords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_wckeys = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_defaults = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void slurmdbV0040GetWckey(const QString &id);

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void slurmdbV0040GetWckeys(const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaiv0_0_40_openapi_accounts_resp OAIV0_0_40_openapi_accounts_resp [optional]
    */
    virtual void slurmdbV0040PostAccounts(const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_accounts_resp> &oaiv0_0_40_openapi_accounts_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_accounts_resp>());

    /**
    * @param[in]  oaiv0_0_40_openapi_accounts_add_cond_resp OAIV0_0_40_openapi_accounts_add_cond_resp [optional]
    */
    virtual void slurmdbV0040PostAccountsAssociation(const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_accounts_add_cond_resp> &oaiv0_0_40_openapi_accounts_add_cond_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_accounts_add_cond_resp>());

    /**
    * @param[in]  oaiv0_0_40_openapi_assocs_resp OAIV0_0_40_openapi_assocs_resp [optional]
    */
    virtual void slurmdbV0040PostAssociations(const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_assocs_resp> &oaiv0_0_40_openapi_assocs_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_assocs_resp>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  oaiv0_0_40_openapi_clusters_resp OAIV0_0_40_openapi_clusters_resp [optional]
    */
    virtual void slurmdbV0040PostClusters(const ::OpenAPI::OptionalParam<QString> &update_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_clusters_resp> &oaiv0_0_40_openapi_clusters_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_clusters_resp>());

    /**
    * @param[in]  oaiv0_0_40_openapi_slurmdbd_config_resp OAIV0_0_40_openapi_slurmdbd_config_resp [optional]
    */
    virtual void slurmdbV0040PostConfig(const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_slurmdbd_config_resp> &oaiv0_0_40_openapi_slurmdbd_config_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_slurmdbd_config_resp>());

    /**
    * @param[in]  description QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  preempt_mode QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  oaiv0_0_40_openapi_slurmdbd_qos_resp OAIV0_0_40_openapi_slurmdbd_qos_resp [optional]
    */
    virtual void slurmdbV0040PostQos(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preempt_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_slurmdbd_qos_resp> &oaiv0_0_40_openapi_slurmdbd_qos_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_slurmdbd_qos_resp>());

    /**
    * @param[in]  oaiv0_0_40_openapi_tres_resp OAIV0_0_40_openapi_tres_resp [optional]
    */
    virtual void slurmdbV0040PostTres(const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_tres_resp> &oaiv0_0_40_openapi_tres_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_tres_resp>());

    /**
    * @param[in]  oaiv0_0_40_openapi_users_resp OAIV0_0_40_openapi_users_resp [optional]
    */
    virtual void slurmdbV0040PostUsers(const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_users_resp> &oaiv0_0_40_openapi_users_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_users_resp>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    * @param[in]  oaiv0_0_40_openapi_users_add_cond_resp OAIV0_0_40_openapi_users_add_cond_resp [optional]
    */
    virtual void slurmdbV0040PostUsersAssociation(const ::OpenAPI::OptionalParam<QString> &update_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &flags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_users_add_cond_resp> &oaiv0_0_40_openapi_users_add_cond_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_users_add_cond_resp>());

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  oaiv0_0_40_openapi_wckey_resp OAIV0_0_40_openapi_wckey_resp [optional]
    */
    virtual void slurmdbV0040PostWckeys(const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_wckey_resp> &oaiv0_0_40_openapi_wckey_resp = ::OpenAPI::OptionalParam<OAIV0_0_40_openapi_wckey_resp>());

    /**
    * @param[in]  account_name QString [required]
    */
    virtual void slurmdbV0041DeleteAccount(const QString &account_name);

    /**
    * @param[in]  account QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  default_qos QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  parent_account QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_raw_qos QString [optional]
    * @param[in]  with_sub_accts QString [optional]
    * @param[in]  without_parent_info QString [optional]
    * @param[in]  without_parent_limits QString [optional]
    */
    virtual void slurmdbV0041DeleteAssociation(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_raw_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_sub_accts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_limits = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  default_qos QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  parent_account QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_raw_qos QString [optional]
    * @param[in]  with_sub_accts QString [optional]
    * @param[in]  without_parent_info QString [optional]
    * @param[in]  without_parent_limits QString [optional]
    */
    virtual void slurmdbV0041DeleteAssociations(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_raw_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_sub_accts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_limits = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_name QString [required]
    * @param[in]  classification QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  federation QString [optional]
    * @param[in]  flags QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  rpc_version QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_usage QString [optional]
    */
    virtual void slurmdbV0041DeleteCluster(const QString &cluster_name, const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &federation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &flags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rpc_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qos QString [required]
    */
    virtual void slurmdbV0041DeleteSingleQos(const QString &qos);

    /**
    * @param[in]  name QString [required]
    */
    virtual void slurmdbV0041DeleteUser(const QString &name);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slurmdbV0041DeleteWckey(const QString &id);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  with_assocs QString [optional]
    * @param[in]  with_coords QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void slurmdbV0041GetAccount(const QString &account_name, const ::OpenAPI::OptionalParam<QString> &with_assocs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_coords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  description QString [optional]
    * @param[in]  deleted QString [optional]
    * @param[in]  with_associations QString [optional]
    * @param[in]  with_coordinators QString [optional]
    * @param[in]  no_users_are_coords QString [optional]
    * @param[in]  users_are_coords QString [optional]
    */
    virtual void slurmdbV0041GetAccounts(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_coordinators = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &no_users_are_coords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &users_are_coords = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  default_qos QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  parent_account QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_raw_qos QString [optional]
    * @param[in]  with_sub_accts QString [optional]
    * @param[in]  without_parent_info QString [optional]
    * @param[in]  without_parent_limits QString [optional]
    */
    virtual void slurmdbV0041GetAssociation(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_raw_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_sub_accts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_limits = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  default_qos QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  parent_account QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_raw_qos QString [optional]
    * @param[in]  with_sub_accts QString [optional]
    * @param[in]  without_parent_info QString [optional]
    * @param[in]  without_parent_limits QString [optional]
    */
    virtual void slurmdbV0041GetAssociations(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_raw_qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_sub_accts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_parent_limits = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_name QString [required]
    * @param[in]  classification QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  federation QString [optional]
    * @param[in]  flags QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  rpc_version QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_usage QString [optional]
    */
    virtual void slurmdbV0041GetCluster(const QString &cluster_name, const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &federation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &flags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rpc_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  update_time QString [optional]
    */
    virtual void slurmdbV0041GetClusters(const ::OpenAPI::OptionalParam<QString> &update_time = ::OpenAPI::OptionalParam<QString>());


    virtual void slurmdbV0041GetConfig();


    virtual void slurmdbV0041GetDiag();

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  extra QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  instance_id QString [optional]
    * @param[in]  instance_type QString [optional]
    * @param[in]  node_list QString [optional]
    * @param[in]  time_end QString [optional]
    * @param[in]  time_start QString [optional]
    */
    virtual void slurmdbV0041GetInstance(const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extra = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_list = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_start = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  extra QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  instance_id QString [optional]
    * @param[in]  instance_type QString [optional]
    * @param[in]  node_list QString [optional]
    * @param[in]  time_end QString [optional]
    * @param[in]  time_start QString [optional]
    */
    virtual void slurmdbV0041GetInstances(const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extra = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_list = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_start = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void slurmdbV0041GetJob(const QString &job_id);

    /**
    * @param[in]  account QString [optional]
    * @param[in]  association QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  constraints QString [optional]
    * @param[in]  scheduler_unset QString [optional]
    * @param[in]  scheduled_on_submit QString [optional]
    * @param[in]  scheduled_by_main QString [optional]
    * @param[in]  scheduled_by_backfill QString [optional]
    * @param[in]  job_started QString [optional]
    * @param[in]  exit_code QString [optional]
    * @param[in]  show_duplicates QString [optional]
    * @param[in]  skip_steps QString [optional]
    * @param[in]  disable_truncate_usage_time QString [optional]
    * @param[in]  whole_hetjob QString [optional]
    * @param[in]  disable_whole_hetjob QString [optional]
    * @param[in]  disable_wait_for_result QString [optional]
    * @param[in]  usage_time_as_submit_time QString [optional]
    * @param[in]  show_batch_script QString [optional]
    * @param[in]  show_job_environment QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  groups QString [optional]
    * @param[in]  job_name QString [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  qos QString [optional]
    * @param[in]  reason QString [optional]
    * @param[in]  reservation QString [optional]
    * @param[in]  reservation_id QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  step QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  node QString [optional]
    * @param[in]  users QString [optional]
    * @param[in]  wckey QString [optional]
    */
    virtual void slurmdbV0041GetJobs(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &association = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &constraints = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduler_unset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduled_on_submit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduled_by_main = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduled_by_backfill = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &job_started = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exit_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &show_duplicates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_steps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable_truncate_usage_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &whole_hetjob = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable_whole_hetjob = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable_wait_for_result = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_time_as_submit_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &show_batch_script = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &show_job_environment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &groups = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &job_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &qos = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reason = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reservation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reservation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &step = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &users = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wckey = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  description QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  preempt_mode QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void slurmdbV0041GetQos(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preempt_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qos QString [required]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void slurmdbV0041GetSingleQos(const QString &qos, const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());


    virtual void slurmdbV0041GetTres();

    /**
    * @param[in]  name QString [required]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_assocs QString [optional]
    * @param[in]  with_coords QString [optional]
    * @param[in]  with_wckeys QString [optional]
    */
    virtual void slurmdbV0041GetUser(const QString &name, const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_assocs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_coords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_wckeys = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  admin_level QString [optional]
    * @param[in]  default_account QString [optional]
    * @param[in]  default_wckey QString [optional]
    * @param[in]  with_assocs QString [optional]
    * @param[in]  with_coords QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  with_wckeys QString [optional]
    * @param[in]  without_defaults QString [optional]
    */
    virtual void slurmdbV0041GetUsers(const ::OpenAPI::OptionalParam<QString> &admin_level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_wckey = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_assocs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_coords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_wckeys = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_defaults = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void slurmdbV0041GetWckey(const QString &id);

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void slurmdbV0041GetWckeys(const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaiv0_0_41_openapi_accounts_resp OAIV0_0_41_openapi_accounts_resp [optional]
    */
    virtual void slurmdbV0041PostAccounts(const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_accounts_resp> &oaiv0_0_41_openapi_accounts_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_accounts_resp>());

    /**
    * @param[in]  oaiv0_0_41_openapi_accounts_add_cond_resp OAIV0_0_41_openapi_accounts_add_cond_resp [optional]
    */
    virtual void slurmdbV0041PostAccountsAssociation(const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_accounts_add_cond_resp> &oaiv0_0_41_openapi_accounts_add_cond_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_accounts_add_cond_resp>());

    /**
    * @param[in]  oaiv0_0_41_openapi_assocs_resp OAIV0_0_41_openapi_assocs_resp [optional]
    */
    virtual void slurmdbV0041PostAssociations(const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_assocs_resp> &oaiv0_0_41_openapi_assocs_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_assocs_resp>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  oaiv0_0_41_openapi_clusters_resp OAIV0_0_41_openapi_clusters_resp [optional]
    */
    virtual void slurmdbV0041PostClusters(const ::OpenAPI::OptionalParam<QString> &update_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_clusters_resp> &oaiv0_0_41_openapi_clusters_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_clusters_resp>());

    /**
    * @param[in]  oaiv0_0_41_openapi_slurmdbd_config_resp OAIV0_0_41_openapi_slurmdbd_config_resp [optional]
    */
    virtual void slurmdbV0041PostConfig(const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_slurmdbd_config_resp> &oaiv0_0_41_openapi_slurmdbd_config_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_slurmdbd_config_resp>());

    /**
    * @param[in]  description QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  preempt_mode QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  oaiv0_0_41_openapi_slurmdbd_qos_resp OAIV0_0_41_openapi_slurmdbd_qos_resp [optional]
    */
    virtual void slurmdbV0041PostQos(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preempt_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_slurmdbd_qos_resp> &oaiv0_0_41_openapi_slurmdbd_qos_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_slurmdbd_qos_resp>());

    /**
    * @param[in]  oaiv0_0_41_openapi_tres_resp OAIV0_0_41_openapi_tres_resp [optional]
    */
    virtual void slurmdbV0041PostTres(const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_tres_resp> &oaiv0_0_41_openapi_tres_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_tres_resp>());

    /**
    * @param[in]  oaiv0_0_41_openapi_users_resp OAIV0_0_41_openapi_users_resp [optional]
    */
    virtual void slurmdbV0041PostUsers(const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_users_resp> &oaiv0_0_41_openapi_users_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_users_resp>());

    /**
    * @param[in]  update_time QString [optional]
    * @param[in]  flags QString [optional]
    * @param[in]  oaiv0_0_41_openapi_users_add_cond_resp OAIV0_0_41_openapi_users_add_cond_resp [optional]
    */
    virtual void slurmdbV0041PostUsersAssociation(const ::OpenAPI::OptionalParam<QString> &update_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &flags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_users_add_cond_resp> &oaiv0_0_41_openapi_users_add_cond_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_users_add_cond_resp>());

    /**
    * @param[in]  cluster QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  only_defaults QString [optional]
    * @param[in]  usage_end QString [optional]
    * @param[in]  usage_start QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  with_usage QString [optional]
    * @param[in]  with_deleted QString [optional]
    * @param[in]  oaiv0_0_41_openapi_wckey_resp OAIV0_0_41_openapi_wckey_resp [optional]
    */
    virtual void slurmdbV0041PostWckeys(const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &only_defaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_wckey_resp> &oaiv0_0_41_openapi_wckey_resp = ::OpenAPI::OptionalParam<OAIV0_0_41_openapi_wckey_resp>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void slurmdbV0040DeleteAccountCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040DeleteAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040DeleteAssociationsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040DeleteClusterCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040DeleteSingleQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040DeleteUserCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040DeleteWckeyCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetAccountCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetAccountsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetAssociationsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetClusterCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetClustersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetConfigCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetDiagCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetInstanceCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetInstancesCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetJobCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetJobsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetSingleQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetTresCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetUserCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetUsersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetWckeyCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040GetWckeysCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostAccountsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostAccountsAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostAssociationsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostClustersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostConfigCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostTresCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostUsersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostUsersAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0040PostWckeysCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041DeleteAccountCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041DeleteAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041DeleteAssociationsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041DeleteClusterCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041DeleteSingleQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041DeleteUserCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041DeleteWckeyCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetAccountCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetAccountsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetAssociationsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetClusterCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetClustersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetConfigCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetDiagCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetInstanceCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetInstancesCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetJobCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetJobsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetSingleQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetTresCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetUserCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetUsersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetWckeyCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041GetWckeysCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostAccountsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostAccountsAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostAssociationsCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostClustersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostConfigCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostQosCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostTresCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostUsersCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostUsersAssociationCallback(OAIHttpRequestWorker *worker);
    void slurmdbV0041PostWckeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void slurmdbV0040DeleteAccountSignal(OAIV0_0_40_openapi_accounts_removed_resp summary);
    void slurmdbV0040DeleteAssociationSignal(OAIV0_0_40_openapi_assocs_removed_resp summary);
    void slurmdbV0040DeleteAssociationsSignal(OAIV0_0_40_openapi_assocs_removed_resp summary);
    void slurmdbV0040DeleteClusterSignal(OAIV0_0_40_openapi_clusters_removed_resp summary);
    void slurmdbV0040DeleteSingleQosSignal(OAIV0_0_40_openapi_slurmdbd_qos_removed_resp summary);
    void slurmdbV0040DeleteUserSignal(OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040DeleteWckeySignal(OAIV0_0_40_openapi_wckey_removed_resp summary);
    void slurmdbV0040GetAccountSignal(OAIV0_0_40_openapi_accounts_resp summary);
    void slurmdbV0040GetAccountsSignal(OAIV0_0_40_openapi_accounts_resp summary);
    void slurmdbV0040GetAssociationSignal(OAIV0_0_40_openapi_assocs_resp summary);
    void slurmdbV0040GetAssociationsSignal(OAIV0_0_40_openapi_assocs_resp summary);
    void slurmdbV0040GetClusterSignal(OAIV0_0_40_openapi_clusters_resp summary);
    void slurmdbV0040GetClustersSignal(OAIV0_0_40_openapi_clusters_resp summary);
    void slurmdbV0040GetConfigSignal(OAIV0_0_40_openapi_slurmdbd_config_resp summary);
    void slurmdbV0040GetDiagSignal(OAIV0_0_40_openapi_slurmdbd_stats_resp summary);
    void slurmdbV0040GetInstanceSignal(OAIV0_0_40_openapi_instances_resp summary);
    void slurmdbV0040GetInstancesSignal(OAIV0_0_40_openapi_instances_resp summary);
    void slurmdbV0040GetJobSignal(OAIV0_0_40_openapi_slurmdbd_jobs_resp summary);
    void slurmdbV0040GetJobsSignal(OAIV0_0_40_openapi_slurmdbd_jobs_resp summary);
    void slurmdbV0040GetQosSignal(OAIV0_0_40_openapi_slurmdbd_qos_resp summary);
    void slurmdbV0040GetSingleQosSignal(OAIV0_0_40_openapi_slurmdbd_qos_resp summary);
    void slurmdbV0040GetTresSignal(OAIV0_0_40_openapi_tres_resp summary);
    void slurmdbV0040GetUserSignal(OAIV0_0_40_openapi_users_resp summary);
    void slurmdbV0040GetUsersSignal(OAIV0_0_40_openapi_users_resp summary);
    void slurmdbV0040GetWckeySignal(OAIV0_0_40_openapi_wckey_resp summary);
    void slurmdbV0040GetWckeysSignal(OAIV0_0_40_openapi_wckey_resp summary);
    void slurmdbV0040PostAccountsSignal(OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostAccountsAssociationSignal(OAIV0_0_40_openapi_accounts_add_cond_resp_str summary);
    void slurmdbV0040PostAssociationsSignal(OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostClustersSignal(OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostConfigSignal(OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostQosSignal(OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostTresSignal(OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostUsersSignal(OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostUsersAssociationSignal(OAIV0_0_40_openapi_users_add_cond_resp_str summary);
    void slurmdbV0040PostWckeysSignal(OAIV0_0_40_openapi_resp summary);
    void slurmdbV0041DeleteAccountSignal(OAIV0_0_41_openapi_accounts_removed_resp summary);
    void slurmdbV0041DeleteAssociationSignal(OAIV0_0_41_openapi_assocs_removed_resp summary);
    void slurmdbV0041DeleteAssociationsSignal(OAIV0_0_41_openapi_assocs_removed_resp summary);
    void slurmdbV0041DeleteClusterSignal(OAIV0_0_41_openapi_clusters_removed_resp summary);
    void slurmdbV0041DeleteSingleQosSignal(OAIV0_0_41_openapi_slurmdbd_qos_removed_resp summary);
    void slurmdbV0041DeleteUserSignal(OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041DeleteWckeySignal(OAIV0_0_41_openapi_wckey_removed_resp summary);
    void slurmdbV0041GetAccountSignal(OAIV0_0_41_openapi_accounts_resp summary);
    void slurmdbV0041GetAccountsSignal(OAIV0_0_41_openapi_accounts_resp summary);
    void slurmdbV0041GetAssociationSignal(OAIV0_0_41_openapi_assocs_resp summary);
    void slurmdbV0041GetAssociationsSignal(OAIV0_0_41_openapi_assocs_resp summary);
    void slurmdbV0041GetClusterSignal(OAIV0_0_41_openapi_clusters_resp summary);
    void slurmdbV0041GetClustersSignal(OAIV0_0_41_openapi_clusters_resp summary);
    void slurmdbV0041GetConfigSignal(OAIV0_0_41_openapi_slurmdbd_config_resp summary);
    void slurmdbV0041GetDiagSignal(OAIV0_0_41_openapi_slurmdbd_stats_resp summary);
    void slurmdbV0041GetInstanceSignal(OAIV0_0_41_openapi_instances_resp summary);
    void slurmdbV0041GetInstancesSignal(OAIV0_0_41_openapi_instances_resp summary);
    void slurmdbV0041GetJobSignal(OAIV0_0_41_openapi_slurmdbd_jobs_resp summary);
    void slurmdbV0041GetJobsSignal(OAIV0_0_41_openapi_slurmdbd_jobs_resp summary);
    void slurmdbV0041GetQosSignal(OAIV0_0_41_openapi_slurmdbd_qos_resp summary);
    void slurmdbV0041GetSingleQosSignal(OAIV0_0_41_openapi_slurmdbd_qos_resp summary);
    void slurmdbV0041GetTresSignal(OAIV0_0_41_openapi_tres_resp summary);
    void slurmdbV0041GetUserSignal(OAIV0_0_41_openapi_users_resp summary);
    void slurmdbV0041GetUsersSignal(OAIV0_0_41_openapi_users_resp summary);
    void slurmdbV0041GetWckeySignal(OAIV0_0_41_openapi_wckey_resp summary);
    void slurmdbV0041GetWckeysSignal(OAIV0_0_41_openapi_wckey_resp summary);
    void slurmdbV0041PostAccountsSignal(OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostAccountsAssociationSignal(OAIV0_0_41_openapi_accounts_add_cond_resp_str summary);
    void slurmdbV0041PostAssociationsSignal(OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostClustersSignal(OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostConfigSignal(OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostQosSignal(OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostTresSignal(OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostUsersSignal(OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostUsersAssociationSignal(OAIV0_0_41_openapi_users_add_cond_resp_str summary);
    void slurmdbV0041PostWckeysSignal(OAIV0_0_41_openapi_resp summary);


    void slurmdbV0040DeleteAccountSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_accounts_removed_resp summary);
    void slurmdbV0040DeleteAssociationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_assocs_removed_resp summary);
    void slurmdbV0040DeleteAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_assocs_removed_resp summary);
    void slurmdbV0040DeleteClusterSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_clusters_removed_resp summary);
    void slurmdbV0040DeleteSingleQosSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_slurmdbd_qos_removed_resp summary);
    void slurmdbV0040DeleteUserSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040DeleteWckeySignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_wckey_removed_resp summary);
    void slurmdbV0040GetAccountSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_accounts_resp summary);
    void slurmdbV0040GetAccountsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_accounts_resp summary);
    void slurmdbV0040GetAssociationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_assocs_resp summary);
    void slurmdbV0040GetAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_assocs_resp summary);
    void slurmdbV0040GetClusterSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_clusters_resp summary);
    void slurmdbV0040GetClustersSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_clusters_resp summary);
    void slurmdbV0040GetConfigSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_slurmdbd_config_resp summary);
    void slurmdbV0040GetDiagSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_slurmdbd_stats_resp summary);
    void slurmdbV0040GetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_instances_resp summary);
    void slurmdbV0040GetInstancesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_instances_resp summary);
    void slurmdbV0040GetJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_slurmdbd_jobs_resp summary);
    void slurmdbV0040GetJobsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_slurmdbd_jobs_resp summary);
    void slurmdbV0040GetQosSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_slurmdbd_qos_resp summary);
    void slurmdbV0040GetSingleQosSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_slurmdbd_qos_resp summary);
    void slurmdbV0040GetTresSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_tres_resp summary);
    void slurmdbV0040GetUserSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_users_resp summary);
    void slurmdbV0040GetUsersSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_users_resp summary);
    void slurmdbV0040GetWckeySignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_wckey_resp summary);
    void slurmdbV0040GetWckeysSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_wckey_resp summary);
    void slurmdbV0040PostAccountsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostAccountsAssociationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_accounts_add_cond_resp_str summary);
    void slurmdbV0040PostAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostClustersSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostConfigSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostQosSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostTresSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostUsersSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmdbV0040PostUsersAssociationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_users_add_cond_resp_str summary);
    void slurmdbV0040PostWckeysSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_40_openapi_resp summary);
    void slurmdbV0041DeleteAccountSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_accounts_removed_resp summary);
    void slurmdbV0041DeleteAssociationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_assocs_removed_resp summary);
    void slurmdbV0041DeleteAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_assocs_removed_resp summary);
    void slurmdbV0041DeleteClusterSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_clusters_removed_resp summary);
    void slurmdbV0041DeleteSingleQosSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_slurmdbd_qos_removed_resp summary);
    void slurmdbV0041DeleteUserSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041DeleteWckeySignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_wckey_removed_resp summary);
    void slurmdbV0041GetAccountSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_accounts_resp summary);
    void slurmdbV0041GetAccountsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_accounts_resp summary);
    void slurmdbV0041GetAssociationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_assocs_resp summary);
    void slurmdbV0041GetAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_assocs_resp summary);
    void slurmdbV0041GetClusterSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_clusters_resp summary);
    void slurmdbV0041GetClustersSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_clusters_resp summary);
    void slurmdbV0041GetConfigSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_slurmdbd_config_resp summary);
    void slurmdbV0041GetDiagSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_slurmdbd_stats_resp summary);
    void slurmdbV0041GetInstanceSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_instances_resp summary);
    void slurmdbV0041GetInstancesSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_instances_resp summary);
    void slurmdbV0041GetJobSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_slurmdbd_jobs_resp summary);
    void slurmdbV0041GetJobsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_slurmdbd_jobs_resp summary);
    void slurmdbV0041GetQosSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_slurmdbd_qos_resp summary);
    void slurmdbV0041GetSingleQosSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_slurmdbd_qos_resp summary);
    void slurmdbV0041GetTresSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_tres_resp summary);
    void slurmdbV0041GetUserSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_users_resp summary);
    void slurmdbV0041GetUsersSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_users_resp summary);
    void slurmdbV0041GetWckeySignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_wckey_resp summary);
    void slurmdbV0041GetWckeysSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_wckey_resp summary);
    void slurmdbV0041PostAccountsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostAccountsAssociationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_accounts_add_cond_resp_str summary);
    void slurmdbV0041PostAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostClustersSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostConfigSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostQosSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostTresSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostUsersSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);
    void slurmdbV0041PostUsersAssociationSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_users_add_cond_resp_str summary);
    void slurmdbV0041PostWckeysSignalFull(OAIHttpRequestWorker *worker, OAIV0_0_41_openapi_resp summary);

    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteAccountSignalError() instead")
    void slurmdbV0040DeleteAccountSignalE(OAIV0_0_40_openapi_accounts_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteAccountSignalError(OAIV0_0_40_openapi_accounts_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteAssociationSignalError() instead")
    void slurmdbV0040DeleteAssociationSignalE(OAIV0_0_40_openapi_assocs_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteAssociationSignalError(OAIV0_0_40_openapi_assocs_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteAssociationsSignalError() instead")
    void slurmdbV0040DeleteAssociationsSignalE(OAIV0_0_40_openapi_assocs_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteAssociationsSignalError(OAIV0_0_40_openapi_assocs_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteClusterSignalError() instead")
    void slurmdbV0040DeleteClusterSignalE(OAIV0_0_40_openapi_clusters_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteClusterSignalError(OAIV0_0_40_openapi_clusters_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteSingleQosSignalError() instead")
    void slurmdbV0040DeleteSingleQosSignalE(OAIV0_0_40_openapi_slurmdbd_qos_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteSingleQosSignalError(OAIV0_0_40_openapi_slurmdbd_qos_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteUserSignalError() instead")
    void slurmdbV0040DeleteUserSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteUserSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteWckeySignalError() instead")
    void slurmdbV0040DeleteWckeySignalE(OAIV0_0_40_openapi_wckey_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteWckeySignalError(OAIV0_0_40_openapi_wckey_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetAccountSignalError() instead")
    void slurmdbV0040GetAccountSignalE(OAIV0_0_40_openapi_accounts_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetAccountSignalError(OAIV0_0_40_openapi_accounts_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetAccountsSignalError() instead")
    void slurmdbV0040GetAccountsSignalE(OAIV0_0_40_openapi_accounts_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetAccountsSignalError(OAIV0_0_40_openapi_accounts_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetAssociationSignalError() instead")
    void slurmdbV0040GetAssociationSignalE(OAIV0_0_40_openapi_assocs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetAssociationSignalError(OAIV0_0_40_openapi_assocs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetAssociationsSignalError() instead")
    void slurmdbV0040GetAssociationsSignalE(OAIV0_0_40_openapi_assocs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetAssociationsSignalError(OAIV0_0_40_openapi_assocs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetClusterSignalError() instead")
    void slurmdbV0040GetClusterSignalE(OAIV0_0_40_openapi_clusters_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetClusterSignalError(OAIV0_0_40_openapi_clusters_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetClustersSignalError() instead")
    void slurmdbV0040GetClustersSignalE(OAIV0_0_40_openapi_clusters_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetClustersSignalError(OAIV0_0_40_openapi_clusters_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetConfigSignalError() instead")
    void slurmdbV0040GetConfigSignalE(OAIV0_0_40_openapi_slurmdbd_config_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetConfigSignalError(OAIV0_0_40_openapi_slurmdbd_config_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetDiagSignalError() instead")
    void slurmdbV0040GetDiagSignalE(OAIV0_0_40_openapi_slurmdbd_stats_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetDiagSignalError(OAIV0_0_40_openapi_slurmdbd_stats_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetInstanceSignalError() instead")
    void slurmdbV0040GetInstanceSignalE(OAIV0_0_40_openapi_instances_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetInstanceSignalError(OAIV0_0_40_openapi_instances_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetInstancesSignalError() instead")
    void slurmdbV0040GetInstancesSignalE(OAIV0_0_40_openapi_instances_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetInstancesSignalError(OAIV0_0_40_openapi_instances_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetJobSignalError() instead")
    void slurmdbV0040GetJobSignalE(OAIV0_0_40_openapi_slurmdbd_jobs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetJobSignalError(OAIV0_0_40_openapi_slurmdbd_jobs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetJobsSignalError() instead")
    void slurmdbV0040GetJobsSignalE(OAIV0_0_40_openapi_slurmdbd_jobs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetJobsSignalError(OAIV0_0_40_openapi_slurmdbd_jobs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetQosSignalError() instead")
    void slurmdbV0040GetQosSignalE(OAIV0_0_40_openapi_slurmdbd_qos_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetQosSignalError(OAIV0_0_40_openapi_slurmdbd_qos_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetSingleQosSignalError() instead")
    void slurmdbV0040GetSingleQosSignalE(OAIV0_0_40_openapi_slurmdbd_qos_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetSingleQosSignalError(OAIV0_0_40_openapi_slurmdbd_qos_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetTresSignalError() instead")
    void slurmdbV0040GetTresSignalE(OAIV0_0_40_openapi_tres_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetTresSignalError(OAIV0_0_40_openapi_tres_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetUserSignalError() instead")
    void slurmdbV0040GetUserSignalE(OAIV0_0_40_openapi_users_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetUserSignalError(OAIV0_0_40_openapi_users_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetUsersSignalError() instead")
    void slurmdbV0040GetUsersSignalE(OAIV0_0_40_openapi_users_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetUsersSignalError(OAIV0_0_40_openapi_users_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetWckeySignalError() instead")
    void slurmdbV0040GetWckeySignalE(OAIV0_0_40_openapi_wckey_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetWckeySignalError(OAIV0_0_40_openapi_wckey_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetWckeysSignalError() instead")
    void slurmdbV0040GetWckeysSignalE(OAIV0_0_40_openapi_wckey_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetWckeysSignalError(OAIV0_0_40_openapi_wckey_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostAccountsSignalError() instead")
    void slurmdbV0040PostAccountsSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostAccountsSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostAccountsAssociationSignalError() instead")
    void slurmdbV0040PostAccountsAssociationSignalE(OAIV0_0_40_openapi_accounts_add_cond_resp_str summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostAccountsAssociationSignalError(OAIV0_0_40_openapi_accounts_add_cond_resp_str summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostAssociationsSignalError() instead")
    void slurmdbV0040PostAssociationsSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostAssociationsSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostClustersSignalError() instead")
    void slurmdbV0040PostClustersSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostClustersSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostConfigSignalError() instead")
    void slurmdbV0040PostConfigSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostConfigSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostQosSignalError() instead")
    void slurmdbV0040PostQosSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostQosSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostTresSignalError() instead")
    void slurmdbV0040PostTresSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostTresSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostUsersSignalError() instead")
    void slurmdbV0040PostUsersSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostUsersSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostUsersAssociationSignalError() instead")
    void slurmdbV0040PostUsersAssociationSignalE(OAIV0_0_40_openapi_users_add_cond_resp_str summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostUsersAssociationSignalError(OAIV0_0_40_openapi_users_add_cond_resp_str summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostWckeysSignalError() instead")
    void slurmdbV0040PostWckeysSignalE(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostWckeysSignalError(OAIV0_0_40_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteAccountSignalError() instead")
    void slurmdbV0041DeleteAccountSignalE(OAIV0_0_41_openapi_accounts_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteAccountSignalError(OAIV0_0_41_openapi_accounts_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteAssociationSignalError() instead")
    void slurmdbV0041DeleteAssociationSignalE(OAIV0_0_41_openapi_assocs_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteAssociationSignalError(OAIV0_0_41_openapi_assocs_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteAssociationsSignalError() instead")
    void slurmdbV0041DeleteAssociationsSignalE(OAIV0_0_41_openapi_assocs_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteAssociationsSignalError(OAIV0_0_41_openapi_assocs_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteClusterSignalError() instead")
    void slurmdbV0041DeleteClusterSignalE(OAIV0_0_41_openapi_clusters_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteClusterSignalError(OAIV0_0_41_openapi_clusters_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteSingleQosSignalError() instead")
    void slurmdbV0041DeleteSingleQosSignalE(OAIV0_0_41_openapi_slurmdbd_qos_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteSingleQosSignalError(OAIV0_0_41_openapi_slurmdbd_qos_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteUserSignalError() instead")
    void slurmdbV0041DeleteUserSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteUserSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteWckeySignalError() instead")
    void slurmdbV0041DeleteWckeySignalE(OAIV0_0_41_openapi_wckey_removed_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteWckeySignalError(OAIV0_0_41_openapi_wckey_removed_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetAccountSignalError() instead")
    void slurmdbV0041GetAccountSignalE(OAIV0_0_41_openapi_accounts_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetAccountSignalError(OAIV0_0_41_openapi_accounts_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetAccountsSignalError() instead")
    void slurmdbV0041GetAccountsSignalE(OAIV0_0_41_openapi_accounts_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetAccountsSignalError(OAIV0_0_41_openapi_accounts_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetAssociationSignalError() instead")
    void slurmdbV0041GetAssociationSignalE(OAIV0_0_41_openapi_assocs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetAssociationSignalError(OAIV0_0_41_openapi_assocs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetAssociationsSignalError() instead")
    void slurmdbV0041GetAssociationsSignalE(OAIV0_0_41_openapi_assocs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetAssociationsSignalError(OAIV0_0_41_openapi_assocs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetClusterSignalError() instead")
    void slurmdbV0041GetClusterSignalE(OAIV0_0_41_openapi_clusters_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetClusterSignalError(OAIV0_0_41_openapi_clusters_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetClustersSignalError() instead")
    void slurmdbV0041GetClustersSignalE(OAIV0_0_41_openapi_clusters_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetClustersSignalError(OAIV0_0_41_openapi_clusters_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetConfigSignalError() instead")
    void slurmdbV0041GetConfigSignalE(OAIV0_0_41_openapi_slurmdbd_config_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetConfigSignalError(OAIV0_0_41_openapi_slurmdbd_config_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetDiagSignalError() instead")
    void slurmdbV0041GetDiagSignalE(OAIV0_0_41_openapi_slurmdbd_stats_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetDiagSignalError(OAIV0_0_41_openapi_slurmdbd_stats_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetInstanceSignalError() instead")
    void slurmdbV0041GetInstanceSignalE(OAIV0_0_41_openapi_instances_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetInstanceSignalError(OAIV0_0_41_openapi_instances_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetInstancesSignalError() instead")
    void slurmdbV0041GetInstancesSignalE(OAIV0_0_41_openapi_instances_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetInstancesSignalError(OAIV0_0_41_openapi_instances_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetJobSignalError() instead")
    void slurmdbV0041GetJobSignalE(OAIV0_0_41_openapi_slurmdbd_jobs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetJobSignalError(OAIV0_0_41_openapi_slurmdbd_jobs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetJobsSignalError() instead")
    void slurmdbV0041GetJobsSignalE(OAIV0_0_41_openapi_slurmdbd_jobs_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetJobsSignalError(OAIV0_0_41_openapi_slurmdbd_jobs_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetQosSignalError() instead")
    void slurmdbV0041GetQosSignalE(OAIV0_0_41_openapi_slurmdbd_qos_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetQosSignalError(OAIV0_0_41_openapi_slurmdbd_qos_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetSingleQosSignalError() instead")
    void slurmdbV0041GetSingleQosSignalE(OAIV0_0_41_openapi_slurmdbd_qos_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetSingleQosSignalError(OAIV0_0_41_openapi_slurmdbd_qos_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetTresSignalError() instead")
    void slurmdbV0041GetTresSignalE(OAIV0_0_41_openapi_tres_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetTresSignalError(OAIV0_0_41_openapi_tres_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetUserSignalError() instead")
    void slurmdbV0041GetUserSignalE(OAIV0_0_41_openapi_users_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetUserSignalError(OAIV0_0_41_openapi_users_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetUsersSignalError() instead")
    void slurmdbV0041GetUsersSignalE(OAIV0_0_41_openapi_users_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetUsersSignalError(OAIV0_0_41_openapi_users_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetWckeySignalError() instead")
    void slurmdbV0041GetWckeySignalE(OAIV0_0_41_openapi_wckey_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetWckeySignalError(OAIV0_0_41_openapi_wckey_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetWckeysSignalError() instead")
    void slurmdbV0041GetWckeysSignalE(OAIV0_0_41_openapi_wckey_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetWckeysSignalError(OAIV0_0_41_openapi_wckey_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostAccountsSignalError() instead")
    void slurmdbV0041PostAccountsSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostAccountsSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostAccountsAssociationSignalError() instead")
    void slurmdbV0041PostAccountsAssociationSignalE(OAIV0_0_41_openapi_accounts_add_cond_resp_str summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostAccountsAssociationSignalError(OAIV0_0_41_openapi_accounts_add_cond_resp_str summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostAssociationsSignalError() instead")
    void slurmdbV0041PostAssociationsSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostAssociationsSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostClustersSignalError() instead")
    void slurmdbV0041PostClustersSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostClustersSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostConfigSignalError() instead")
    void slurmdbV0041PostConfigSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostConfigSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostQosSignalError() instead")
    void slurmdbV0041PostQosSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostQosSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostTresSignalError() instead")
    void slurmdbV0041PostTresSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostTresSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostUsersSignalError() instead")
    void slurmdbV0041PostUsersSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostUsersSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostUsersAssociationSignalError() instead")
    void slurmdbV0041PostUsersAssociationSignalE(OAIV0_0_41_openapi_users_add_cond_resp_str summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostUsersAssociationSignalError(OAIV0_0_41_openapi_users_add_cond_resp_str summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostWckeysSignalError() instead")
    void slurmdbV0041PostWckeysSignalE(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostWckeysSignalError(OAIV0_0_41_openapi_resp summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteAccountSignalErrorFull() instead")
    void slurmdbV0040DeleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteAssociationSignalErrorFull() instead")
    void slurmdbV0040DeleteAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteAssociationsSignalErrorFull() instead")
    void slurmdbV0040DeleteAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteClusterSignalErrorFull() instead")
    void slurmdbV0040DeleteClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteSingleQosSignalErrorFull() instead")
    void slurmdbV0040DeleteSingleQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteSingleQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteUserSignalErrorFull() instead")
    void slurmdbV0040DeleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040DeleteWckeySignalErrorFull() instead")
    void slurmdbV0040DeleteWckeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040DeleteWckeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetAccountSignalErrorFull() instead")
    void slurmdbV0040GetAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetAccountsSignalErrorFull() instead")
    void slurmdbV0040GetAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetAssociationSignalErrorFull() instead")
    void slurmdbV0040GetAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetAssociationsSignalErrorFull() instead")
    void slurmdbV0040GetAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetClusterSignalErrorFull() instead")
    void slurmdbV0040GetClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetClustersSignalErrorFull() instead")
    void slurmdbV0040GetClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetConfigSignalErrorFull() instead")
    void slurmdbV0040GetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetDiagSignalErrorFull() instead")
    void slurmdbV0040GetDiagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetDiagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetInstanceSignalErrorFull() instead")
    void slurmdbV0040GetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetInstancesSignalErrorFull() instead")
    void slurmdbV0040GetInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetJobSignalErrorFull() instead")
    void slurmdbV0040GetJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetJobsSignalErrorFull() instead")
    void slurmdbV0040GetJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetQosSignalErrorFull() instead")
    void slurmdbV0040GetQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetSingleQosSignalErrorFull() instead")
    void slurmdbV0040GetSingleQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetSingleQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetTresSignalErrorFull() instead")
    void slurmdbV0040GetTresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetTresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetUserSignalErrorFull() instead")
    void slurmdbV0040GetUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetUsersSignalErrorFull() instead")
    void slurmdbV0040GetUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetWckeySignalErrorFull() instead")
    void slurmdbV0040GetWckeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetWckeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040GetWckeysSignalErrorFull() instead")
    void slurmdbV0040GetWckeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040GetWckeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostAccountsSignalErrorFull() instead")
    void slurmdbV0040PostAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostAccountsAssociationSignalErrorFull() instead")
    void slurmdbV0040PostAccountsAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostAccountsAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostAssociationsSignalErrorFull() instead")
    void slurmdbV0040PostAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostClustersSignalErrorFull() instead")
    void slurmdbV0040PostClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostConfigSignalErrorFull() instead")
    void slurmdbV0040PostConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostQosSignalErrorFull() instead")
    void slurmdbV0040PostQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostTresSignalErrorFull() instead")
    void slurmdbV0040PostTresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostTresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostUsersSignalErrorFull() instead")
    void slurmdbV0040PostUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostUsersAssociationSignalErrorFull() instead")
    void slurmdbV0040PostUsersAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostUsersAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0040PostWckeysSignalErrorFull() instead")
    void slurmdbV0040PostWckeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0040PostWckeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteAccountSignalErrorFull() instead")
    void slurmdbV0041DeleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteAssociationSignalErrorFull() instead")
    void slurmdbV0041DeleteAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteAssociationsSignalErrorFull() instead")
    void slurmdbV0041DeleteAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteClusterSignalErrorFull() instead")
    void slurmdbV0041DeleteClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteSingleQosSignalErrorFull() instead")
    void slurmdbV0041DeleteSingleQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteSingleQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteUserSignalErrorFull() instead")
    void slurmdbV0041DeleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041DeleteWckeySignalErrorFull() instead")
    void slurmdbV0041DeleteWckeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041DeleteWckeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetAccountSignalErrorFull() instead")
    void slurmdbV0041GetAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetAccountsSignalErrorFull() instead")
    void slurmdbV0041GetAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetAssociationSignalErrorFull() instead")
    void slurmdbV0041GetAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetAssociationsSignalErrorFull() instead")
    void slurmdbV0041GetAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetClusterSignalErrorFull() instead")
    void slurmdbV0041GetClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetClustersSignalErrorFull() instead")
    void slurmdbV0041GetClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetConfigSignalErrorFull() instead")
    void slurmdbV0041GetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetDiagSignalErrorFull() instead")
    void slurmdbV0041GetDiagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetDiagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetInstanceSignalErrorFull() instead")
    void slurmdbV0041GetInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetInstancesSignalErrorFull() instead")
    void slurmdbV0041GetInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetJobSignalErrorFull() instead")
    void slurmdbV0041GetJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetJobsSignalErrorFull() instead")
    void slurmdbV0041GetJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetQosSignalErrorFull() instead")
    void slurmdbV0041GetQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetSingleQosSignalErrorFull() instead")
    void slurmdbV0041GetSingleQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetSingleQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetTresSignalErrorFull() instead")
    void slurmdbV0041GetTresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetTresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetUserSignalErrorFull() instead")
    void slurmdbV0041GetUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetUsersSignalErrorFull() instead")
    void slurmdbV0041GetUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetWckeySignalErrorFull() instead")
    void slurmdbV0041GetWckeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetWckeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041GetWckeysSignalErrorFull() instead")
    void slurmdbV0041GetWckeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041GetWckeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostAccountsSignalErrorFull() instead")
    void slurmdbV0041PostAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostAccountsAssociationSignalErrorFull() instead")
    void slurmdbV0041PostAccountsAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostAccountsAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostAssociationsSignalErrorFull() instead")
    void slurmdbV0041PostAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostClustersSignalErrorFull() instead")
    void slurmdbV0041PostClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostConfigSignalErrorFull() instead")
    void slurmdbV0041PostConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostQosSignalErrorFull() instead")
    void slurmdbV0041PostQosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostQosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostTresSignalErrorFull() instead")
    void slurmdbV0041PostTresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostTresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostUsersSignalErrorFull() instead")
    void slurmdbV0041PostUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostUsersAssociationSignalErrorFull() instead")
    void slurmdbV0041PostUsersAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostUsersAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slurmdbV0041PostWckeysSignalErrorFull() instead")
    void slurmdbV0041PostWckeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slurmdbV0041PostWckeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
