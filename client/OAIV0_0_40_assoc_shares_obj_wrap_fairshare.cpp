/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_40_assoc_shares_obj_wrap_fairshare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace hm:slurm:client {

OAIV0_0_40_assoc_shares_obj_wrap_fairshare::OAIV0_0_40_assoc_shares_obj_wrap_fairshare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_40_assoc_shares_obj_wrap_fairshare::OAIV0_0_40_assoc_shares_obj_wrap_fairshare() {
    this->initializeModel();
}

OAIV0_0_40_assoc_shares_obj_wrap_fairshare::~OAIV0_0_40_assoc_shares_obj_wrap_fairshare() {}

void OAIV0_0_40_assoc_shares_obj_wrap_fairshare::initializeModel() {

    m_factor_isSet = false;
    m_factor_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;
}

void OAIV0_0_40_assoc_shares_obj_wrap_fairshare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_40_assoc_shares_obj_wrap_fairshare::fromJsonObject(QJsonObject json) {

    m_factor_isValid = ::hm:slurm:client::fromJsonValue(m_factor, json[QString("factor")]);
    m_factor_isSet = !json[QString("factor")].isNull() && m_factor_isValid;

    m_level_isValid = ::hm:slurm:client::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;
}

QString OAIV0_0_40_assoc_shares_obj_wrap_fairshare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_40_assoc_shares_obj_wrap_fairshare::asJsonObject() const {
    QJsonObject obj;
    if (m_factor_isSet) {
        obj.insert(QString("factor"), ::hm:slurm:client::toJsonValue(m_factor));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::hm:slurm:client::toJsonValue(m_level));
    }
    return obj;
}

double OAIV0_0_40_assoc_shares_obj_wrap_fairshare::getFactor() const {
    return m_factor;
}
void OAIV0_0_40_assoc_shares_obj_wrap_fairshare::setFactor(const double &factor) {
    m_factor = factor;
    m_factor_isSet = true;
}

bool OAIV0_0_40_assoc_shares_obj_wrap_fairshare::is_factor_Set() const{
    return m_factor_isSet;
}

bool OAIV0_0_40_assoc_shares_obj_wrap_fairshare::is_factor_Valid() const{
    return m_factor_isValid;
}

double OAIV0_0_40_assoc_shares_obj_wrap_fairshare::getLevel() const {
    return m_level;
}
void OAIV0_0_40_assoc_shares_obj_wrap_fairshare::setLevel(const double &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIV0_0_40_assoc_shares_obj_wrap_fairshare::is_level_Set() const{
    return m_level_isSet;
}

bool OAIV0_0_40_assoc_shares_obj_wrap_fairshare::is_level_Valid() const{
    return m_level_isValid;
}

bool OAIV0_0_40_assoc_shares_obj_wrap_fairshare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_40_assoc_shares_obj_wrap_fairshare::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace hm:slurm:client
