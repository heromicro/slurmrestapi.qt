/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV0_0_39_ext_sensors_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV0_0_39_ext_sensors_data::OAIV0_0_39_ext_sensors_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV0_0_39_ext_sensors_data::OAIV0_0_39_ext_sensors_data() {
    this->initializeModel();
}

OAIV0_0_39_ext_sensors_data::~OAIV0_0_39_ext_sensors_data() {}

void OAIV0_0_39_ext_sensors_data::initializeModel() {

    m_consumed_energy_isSet = false;
    m_consumed_energy_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_energy_update_time_isSet = false;
    m_energy_update_time_isValid = false;

    m_current_watts_isSet = false;
    m_current_watts_isValid = false;
}

void OAIV0_0_39_ext_sensors_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV0_0_39_ext_sensors_data::fromJsonObject(QJsonObject json) {

    m_consumed_energy_isValid = ::OpenAPI::fromJsonValue(m_consumed_energy, json[QString("consumed_energy")]);
    m_consumed_energy_isSet = !json[QString("consumed_energy")].isNull() && m_consumed_energy_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_energy_update_time_isValid = ::OpenAPI::fromJsonValue(m_energy_update_time, json[QString("energy_update_time")]);
    m_energy_update_time_isSet = !json[QString("energy_update_time")].isNull() && m_energy_update_time_isValid;

    m_current_watts_isValid = ::OpenAPI::fromJsonValue(m_current_watts, json[QString("current_watts")]);
    m_current_watts_isSet = !json[QString("current_watts")].isNull() && m_current_watts_isValid;
}

QString OAIV0_0_39_ext_sensors_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV0_0_39_ext_sensors_data::asJsonObject() const {
    QJsonObject obj;
    if (m_consumed_energy.isSet()) {
        obj.insert(QString("consumed_energy"), ::OpenAPI::toJsonValue(m_consumed_energy));
    }
    if (m_temperature.isSet()) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_energy_update_time_isSet) {
        obj.insert(QString("energy_update_time"), ::OpenAPI::toJsonValue(m_energy_update_time));
    }
    if (m_current_watts_isSet) {
        obj.insert(QString("current_watts"), ::OpenAPI::toJsonValue(m_current_watts));
    }
    return obj;
}

OAIV0_0_39_uint64_no_val OAIV0_0_39_ext_sensors_data::getConsumedEnergy() const {
    return m_consumed_energy;
}
void OAIV0_0_39_ext_sensors_data::setConsumedEnergy(const OAIV0_0_39_uint64_no_val &consumed_energy) {
    m_consumed_energy = consumed_energy;
    m_consumed_energy_isSet = true;
}

bool OAIV0_0_39_ext_sensors_data::is_consumed_energy_Set() const{
    return m_consumed_energy_isSet;
}

bool OAIV0_0_39_ext_sensors_data::is_consumed_energy_Valid() const{
    return m_consumed_energy_isValid;
}

OAIV0_0_39_uint32_no_val OAIV0_0_39_ext_sensors_data::getTemperature() const {
    return m_temperature;
}
void OAIV0_0_39_ext_sensors_data::setTemperature(const OAIV0_0_39_uint32_no_val &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIV0_0_39_ext_sensors_data::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIV0_0_39_ext_sensors_data::is_temperature_Valid() const{
    return m_temperature_isValid;
}

qint64 OAIV0_0_39_ext_sensors_data::getEnergyUpdateTime() const {
    return m_energy_update_time;
}
void OAIV0_0_39_ext_sensors_data::setEnergyUpdateTime(const qint64 &energy_update_time) {
    m_energy_update_time = energy_update_time;
    m_energy_update_time_isSet = true;
}

bool OAIV0_0_39_ext_sensors_data::is_energy_update_time_Set() const{
    return m_energy_update_time_isSet;
}

bool OAIV0_0_39_ext_sensors_data::is_energy_update_time_Valid() const{
    return m_energy_update_time_isValid;
}

qint32 OAIV0_0_39_ext_sensors_data::getCurrentWatts() const {
    return m_current_watts;
}
void OAIV0_0_39_ext_sensors_data::setCurrentWatts(const qint32 &current_watts) {
    m_current_watts = current_watts;
    m_current_watts_isSet = true;
}

bool OAIV0_0_39_ext_sensors_data::is_current_watts_Set() const{
    return m_current_watts_isSet;
}

bool OAIV0_0_39_ext_sensors_data::is_current_watts_Valid() const{
    return m_current_watts_isValid;
}

bool OAIV0_0_39_ext_sensors_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumed_energy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_watts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV0_0_39_ext_sensors_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
